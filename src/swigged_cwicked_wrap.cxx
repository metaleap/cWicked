/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040300
#define SWIGC
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 *
 * Note that SWIG expects __cplusplus to be defined to the appropriate C++ standard.
 * MSVC users are urged to check and examine the /Zc:__cplusplus compiler option.
 * See https://learn.microsoft.com/en-us/cpp/build/reference/zc-cplusplus.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif

/* -----------------------------------------------------------------------------
 * clabels.swg
 *
 * Definitions of C specific preprocessor symbols.
 * ----------------------------------------------------------------------------- */

// this is used instead of default SWIGEXPORT symbol

#ifndef SWIGEXPORTC
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORTC
#   else
#     define SWIGEXPORTC __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORTC __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORTC
#   endif
# endif
#endif


#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <setjmp.h>

#define SWIG_contract_assert(expr, msg) if(!(expr)) { printf("%s\n", msg); SWIG_exit(0); } else


typedef struct SwigObj SwigObj;


#ifndef SWIG_exception
#define SWIG_exception(code, msg)
#endif


#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORTC int SWIG_exit(int code) { exit(code); }
#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include "../pch/wi_pch.h"



namespace wi::version {
	long GetVersion() {
		return 0;
	}
}

const char* wi_renderer_GetShaderSourcePath() {
  return wi::renderer::GetShaderSourcePath().c_str();
}

const char* wi_renderer_GetShaderPath() {
  return wi::renderer::GetShaderPath().c_str();
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORTC void wi_Application_infoDisplay(SwigObj* wiApp, bool active, bool watermark, bool fpsInfo, bool deviceName, bool resolution, bool logicalSize, bool colorSpace, bool heapAllocCounter, bool pipelineCount, bool pipelineCreation, bool vramUsage, int textSize, bool colorGradingHelper) {
  wi::Application *app = (wi::Application *) wiApp;
  app->infoDisplay.active = active;
  app->infoDisplay.colorspace = colorSpace;
  app->infoDisplay.device_name = deviceName;
  app->infoDisplay.fpsinfo = fpsInfo;
  app->infoDisplay.heap_allocation_counter = heapAllocCounter;
  app->infoDisplay.logical_size = logicalSize;
  app->infoDisplay.pipeline_count = pipelineCount;
  app->infoDisplay.pipeline_creation = pipelineCreation;
  app->infoDisplay.resolution = resolution;
  app->infoDisplay.vram_usage = vramUsage;
  app->infoDisplay.watermark = watermark;
  app->infoDisplay.size = textSize;
  app->infoDisplay.colorgrading_helper = colorGradingHelper;
}
#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORTC long wi_version_GetVersion() {
  long cppresult;
  long result;
  
  cppresult = (long)wi::version::GetVersion();
  result = (long)cppresult;
  return result;
}


SWIGEXPORTC int wi_version_GetMajor() {
  int cppresult;
  int result;
  
  cppresult = (int)wi::version::GetMajor();
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC int wi_version_GetMinor() {
  int cppresult;
  int result;
  
  cppresult = (int)wi::version::GetMinor();
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC int wi_version_GetRevision() {
  int cppresult;
  int result;
  
  cppresult = (int)wi::version::GetRevision();
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC const char * wi_version_GetVersionString() {
  char *cppresult;
  const char * result;
  
  cppresult = (char *)wi::version::GetVersionString();
  result = (const char *)cppresult;
  return result;
}


SWIGEXPORTC const char * wi_version_GetCreditsString() {
  char *cppresult;
  const char * result;
  
  cppresult = (char *)wi::version::GetCreditsString();
  result = (const char *)cppresult;
  return result;
}


SWIGEXPORTC void wi_Application_delete(SwigObj* carg1) {
  wi::Application *arg1 = (wi::Application *) 0 ;
  
  arg1 = (wi::Application *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_Application_is_window_active_set(SwigObj* carg1, bool carg2) {
  wi::Application *arg1 = (wi::Application *) 0 ;
  bool arg2 ;
  
  arg1 = (wi::Application *) carg1;
  arg2 = (bool) carg2;
  if (arg1) (arg1)->is_window_active = arg2;
}


SWIGEXPORTC bool wi_Application_is_window_active_get(SwigObj* carg1) {
  bool cppresult;
  wi::Application *arg1 = (wi::Application *) 0 ;
  bool result;
  
  arg1 = (wi::Application *) carg1;
  cppresult = (bool) ((arg1)->is_window_active);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_Application_allow_hdr_set(SwigObj* carg1, bool carg2) {
  wi::Application *arg1 = (wi::Application *) 0 ;
  bool arg2 ;
  
  arg1 = (wi::Application *) carg1;
  arg2 = (bool) carg2;
  if (arg1) (arg1)->allow_hdr = arg2;
}


SWIGEXPORTC bool wi_Application_allow_hdr_get(SwigObj* carg1) {
  bool cppresult;
  wi::Application *arg1 = (wi::Application *) 0 ;
  bool result;
  
  arg1 = (wi::Application *) carg1;
  cppresult = (bool) ((arg1)->allow_hdr);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_Application_swapChain_set(SwigObj* carg1, SwigObj* carg2) {
  wi::Application *arg1 = (wi::Application *) 0 ;
  wi::graphics::SwapChain arg2 ;
  
  arg1 = (wi::Application *) carg1;
  arg2 = *(wi::graphics::SwapChain *)carg2;
  if (arg1) (arg1)->swapChain = arg2;
}


SWIGEXPORTC SwigObj* wi_Application_swapChain_get(SwigObj* carg1) {
  wi::graphics::SwapChain cppresult;
  wi::Application *arg1 = (wi::Application *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Application *) carg1;
  cppresult =  ((arg1)->swapChain);
  result = (SwigObj*)new wi::graphics::SwapChain(cppresult);
  return result;
}


SWIGEXPORTC void wi_Application_canvas_set(SwigObj* carg1, SwigObj* carg2) {
  wi::Application *arg1 = (wi::Application *) 0 ;
  wi::Canvas arg2 ;
  
  arg1 = (wi::Application *) carg1;
  arg2 = *(wi::Canvas *)carg2;
  if (arg1) (arg1)->canvas = arg2;
}


SWIGEXPORTC SwigObj* wi_Application_canvas_get(SwigObj* carg1) {
  wi::Canvas cppresult;
  wi::Application *arg1 = (wi::Application *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Application *) carg1;
  cppresult =  ((arg1)->canvas);
  result = (SwigObj*)new wi::Canvas(cppresult);
  return result;
}


SWIGEXPORTC void wi_Application_window_set(SwigObj* carg1, SwigObj* carg2) {
  wi::Application *arg1 = (wi::Application *) 0 ;
  wi::platform::window_type arg2 ;
  
  arg1 = (wi::Application *) carg1;
  arg2 = *(wi::platform::window_type *)carg2;
  if (arg1) (arg1)->window = arg2;
}


SWIGEXPORTC SwigObj* wi_Application_window_get(SwigObj* carg1) {
  wi::platform::window_type cppresult;
  wi::Application *arg1 = (wi::Application *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Application *) carg1;
  cppresult =  ((arg1)->window);
  result = (SwigObj*)new wi::platform::window_type(cppresult);
  return result;
}


SWIGEXPORTC void wi_Application_Run(SwigObj* carg1) {
  wi::Application *arg1 = (wi::Application *) 0 ;
  
  arg1 = (wi::Application *) carg1;
  (arg1)->Run();
}


SWIGEXPORTC void wi_Application_ActivatePath_pwi_RenderPath_f_wi_Color(SwigObj* carg1, SwigObj* carg2, float carg3, SwigObj* carg4) {
  wi::Application *arg1 = (wi::Application *) 0 ;
  wi::RenderPath *arg2 = (wi::RenderPath *) 0 ;
  float arg3 ;
  wi::Color arg4 ;
  
  arg1 = (wi::Application *) carg1;
  arg2 = (wi::RenderPath *) carg2;
  arg3 = (float) carg3;
  arg4 = *(wi::Color *)carg4;
  (arg1)->ActivatePath(arg2,arg3,SWIG_STD_MOVE(arg4));
}


SWIGEXPORTC void wi_Application_ActivatePath_pwi_RenderPath_f(SwigObj* carg1, SwigObj* carg2, float carg3) {
  wi::Application *arg1 = (wi::Application *) 0 ;
  wi::RenderPath *arg2 = (wi::RenderPath *) 0 ;
  float arg3 ;
  
  arg1 = (wi::Application *) carg1;
  arg2 = (wi::RenderPath *) carg2;
  arg3 = (float) carg3;
  (arg1)->ActivatePath(arg2,arg3);
}


SWIGEXPORTC void wi_Application_ActivatePath_pwi_RenderPath(SwigObj* carg1, SwigObj* carg2) {
  wi::Application *arg1 = (wi::Application *) 0 ;
  wi::RenderPath *arg2 = (wi::RenderPath *) 0 ;
  
  arg1 = (wi::Application *) carg1;
  arg2 = (wi::RenderPath *) carg2;
  (arg1)->ActivatePath(arg2);
}


SWIGEXPORTC SwigObj* wi_Application_GetActivePath(SwigObj* carg1) {
  wi::RenderPath *cppresult;
  wi::Application *arg1 = (wi::Application *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Application *) carg1;
  cppresult = (wi::RenderPath *)(arg1)->GetActivePath();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_Application_setTargetFrameRate(SwigObj* carg1, float carg2) {
  wi::Application *arg1 = (wi::Application *) 0 ;
  float arg2 ;
  
  arg1 = (wi::Application *) carg1;
  arg2 = (float) carg2;
  (arg1)->setTargetFrameRate(arg2);
}


SWIGEXPORTC float wi_Application_getTargetFrameRate(SwigObj* carg1) {
  float cppresult;
  wi::Application *arg1 = (wi::Application *) 0 ;
  float result;
  
  arg1 = (wi::Application *) carg1;
  cppresult = (float)((wi::Application const *)arg1)->getTargetFrameRate();
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void wi_Application_setFrameSkip(SwigObj* carg1, bool carg2) {
  wi::Application *arg1 = (wi::Application *) 0 ;
  bool arg2 ;
  
  arg1 = (wi::Application *) carg1;
  arg2 = (bool) carg2;
  (arg1)->setFrameSkip(arg2);
}


SWIGEXPORTC void wi_Application_setFrameRateLock(SwigObj* carg1, bool carg2) {
  wi::Application *arg1 = (wi::Application *) 0 ;
  bool arg2 ;
  
  arg1 = (wi::Application *) carg1;
  arg2 = (bool) carg2;
  (arg1)->setFrameRateLock(arg2);
}


SWIGEXPORTC void wi_Application_Initialize(SwigObj* carg1) {
  wi::Application *arg1 = (wi::Application *) 0 ;
  
  arg1 = (wi::Application *) carg1;
  (arg1)->Initialize();
}


SWIGEXPORTC void wi_Application_Update(SwigObj* carg1, float carg2) {
  wi::Application *arg1 = (wi::Application *) 0 ;
  float arg2 ;
  
  arg1 = (wi::Application *) carg1;
  arg2 = (float) carg2;
  (arg1)->Update(arg2);
}


SWIGEXPORTC void wi_Application_FixedUpdate(SwigObj* carg1) {
  wi::Application *arg1 = (wi::Application *) 0 ;
  
  arg1 = (wi::Application *) carg1;
  (arg1)->FixedUpdate();
}


SWIGEXPORTC void wi_Application_Render(SwigObj* carg1) {
  wi::Application *arg1 = (wi::Application *) 0 ;
  
  arg1 = (wi::Application *) carg1;
  (arg1)->Render();
}


SWIGEXPORTC void wi_Application_Compose(SwigObj* carg1, SwigObj* carg2) {
  wi::Application *arg1 = (wi::Application *) 0 ;
  wi::graphics::CommandList arg2 ;
  
  arg1 = (wi::Application *) carg1;
  arg2 = *(wi::graphics::CommandList *)carg2;
  (arg1)->Compose(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void wi_Application_SetWindow(SwigObj* carg1, SwigObj* carg2) {
  wi::Application *arg1 = (wi::Application *) 0 ;
  wi::platform::window_type arg2 ;
  
  arg1 = (wi::Application *) carg1;
  arg2 = *(wi::platform::window_type *)carg2;
  (arg1)->SetWindow(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void wi_Application_SetFullScreen(SwigObj* carg1, bool carg2) {
  wi::Application *arg1 = (wi::Application *) 0 ;
  bool arg2 ;
  
  arg1 = (wi::Application *) carg1;
  arg2 = (bool) carg2;
  (arg1)->SetFullScreen(arg2);
}


SWIGEXPORTC void wi_Application_infoDisplay_set(SwigObj* carg1, SwigObj* carg2) {
  wi::Application *arg1 = (wi::Application *) 0 ;
  wi::Application::InfoDisplayer *arg2 = (wi::Application::InfoDisplayer *) 0 ;
  
  arg1 = (wi::Application *) carg1;
  arg2 = (wi::Application::InfoDisplayer *) carg2;
  if (arg1) (arg1)->infoDisplay = *arg2;
}


SWIGEXPORTC SwigObj* wi_Application_infoDisplay_get(SwigObj* carg1) {
  wi::Application::InfoDisplayer *cppresult;
  wi::Application *arg1 = (wi::Application *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Application *) carg1;
  cppresult = (wi::Application::InfoDisplayer *)& ((arg1)->infoDisplay);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool wi_Application_IsFaded(SwigObj* carg1) {
  bool cppresult;
  wi::Application *arg1 = (wi::Application *) 0 ;
  bool result;
  
  arg1 = (wi::Application *) carg1;
  cppresult = (bool)((wi::Application const *)arg1)->IsFaded();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Application_new() {
  wi::Application *cppresult;
  SwigObj* result;
  
  cppresult = (wi::Application *)new wi::Application();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Archive_new() {
  wi::Archive *cppresult;
  SwigObj* result;
  
  cppresult = (wi::Archive *)new wi::Archive();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Archive_copy(SwigObj* carg1) {
  wi::Archive *cppresult;
  wi::Archive *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (wi::Archive *) carg1;
  
  cppresult = (wi::Archive *)new wi::Archive((wi::Archive const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Archive_new_zwi_Archive(SwigObj* carg1) {
  wi::Archive *cppresult;
  wi::Archive *arg1 = 0 ;
  SwigObj* result;
  
  arg1 = *(wi::Archive * *)carg1;
  cppresult = (wi::Archive *)new wi::Archive((wi::Archive &&)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Archive_new_rcstd_string_b(SwigObj* carg1, bool carg2) {
  wi::Archive *cppresult;
  std::string *arg1 = 0 ;
  bool arg2 ;
  SwigObj* result;
  
  
  arg1 = (std::string *) carg1;
  
  arg2 = (bool) carg2;
  cppresult = (wi::Archive *)new wi::Archive((std::string const &)*arg1,arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Archive_new_rcstd_string(SwigObj* carg1) {
  wi::Archive *cppresult;
  std::string *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::string *) carg1;
  
  cppresult = (wi::Archive *)new wi::Archive((std::string const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Archive_new_pcuint8_t_size_t(SwigObj* carg1, size_t carg2) {
  wi::Archive *cppresult;
  uint8_t *arg1 = (uint8_t *) 0 ;
  size_t arg2 ;
  SwigObj* result;
  
  arg1 = (uint8_t *) carg1;
  arg2 = (size_t) carg2;
  cppresult = (wi::Archive *)new wi::Archive((uint8_t const *)arg1,SWIG_STD_MOVE(arg2));
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_Archive_delete(SwigObj* carg1) {
  wi::Archive *arg1 = (wi::Archive *) 0 ;
  
  arg1 = (wi::Archive *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_Archive_WriteData(SwigObj* carg1, SwigObj* carg2) {
  wi::Archive *arg1 = (wi::Archive *) 0 ;
  wi::vector< uint8_t,std::allocator< uint8_t > > *arg2 = 0 ;
  
  arg1 = (wi::Archive *) carg1;
  
  arg2 = (wi::vector< uint8_t,std::allocator< uint8_t > > *) carg2;
  
  ((wi::Archive const *)arg1)->WriteData(*arg2);
}


SWIGEXPORTC SwigObj* wi_Archive_GetData(SwigObj* carg1) {
  uint8_t *cppresult;
  wi::Archive *arg1 = (wi::Archive *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Archive *) carg1;
  cppresult = (uint8_t *)((wi::Archive const *)arg1)->GetData();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t wi_Archive_GetSize(SwigObj* carg1) {
  size_t cppresult;
  wi::Archive *arg1 = (wi::Archive *) 0 ;
  size_t result;
  
  arg1 = (wi::Archive *) carg1;
  cppresult = ((wi::Archive const *)arg1)->GetSize();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t wi_Archive_GetPos(SwigObj* carg1) {
  size_t cppresult;
  wi::Archive *arg1 = (wi::Archive *) 0 ;
  size_t result;
  
  arg1 = (wi::Archive *) carg1;
  cppresult = ((wi::Archive const *)arg1)->GetPos();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Archive_GetVersion(SwigObj* carg1) {
  uint64_t cppresult;
  wi::Archive *arg1 = (wi::Archive *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Archive *) carg1;
  cppresult = ((wi::Archive const *)arg1)->GetVersion();
  result = (SwigObj*)new uint64_t(cppresult);
  return result;
}


SWIGEXPORTC bool wi_Archive_IsReadMode(SwigObj* carg1) {
  bool cppresult;
  wi::Archive *arg1 = (wi::Archive *) 0 ;
  bool result;
  
  arg1 = (wi::Archive *) carg1;
  cppresult = (bool)((wi::Archive const *)arg1)->IsReadMode();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_Archive_SetReadModeAndResetPos(SwigObj* carg1, bool carg2) {
  wi::Archive *arg1 = (wi::Archive *) 0 ;
  bool arg2 ;
  
  arg1 = (wi::Archive *) carg1;
  arg2 = (bool) carg2;
  (arg1)->SetReadModeAndResetPos(arg2);
}


SWIGEXPORTC bool wi_Archive_IsOpen(SwigObj* carg1) {
  bool cppresult;
  wi::Archive *arg1 = (wi::Archive *) 0 ;
  bool result;
  
  arg1 = (wi::Archive *) carg1;
  cppresult = (bool)((wi::Archive const *)arg1)->IsOpen();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_Archive_Close(SwigObj* carg1) {
  wi::Archive *arg1 = (wi::Archive *) 0 ;
  
  arg1 = (wi::Archive *) carg1;
  (arg1)->Close();
}


SWIGEXPORTC bool wi_Archive_SaveFile(SwigObj* carg1, SwigObj* carg2) {
  bool cppresult;
  wi::Archive *arg1 = (wi::Archive *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (wi::Archive *) carg1;
  
  arg2 = (std::string *) carg2;
  
  cppresult = (bool)(arg1)->SaveFile((std::string const &)*arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_Archive_SaveHeaderFile(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  bool cppresult;
  wi::Archive *arg1 = (wi::Archive *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  arg1 = (wi::Archive *) carg1;
  
  arg2 = (std::string *) carg2;
  
  
  arg3 = (std::string *) carg3;
  
  cppresult = (bool)(arg1)->SaveHeaderFile((std::string const &)*arg2,(std::string const &)*arg3);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Archive_GetSourceDirectory(SwigObj* carg1) {
  std::string *cppresult;
  wi::Archive *arg1 = (wi::Archive *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Archive *) carg1;
  cppresult = (std::string *) &((wi::Archive const *)arg1)->GetSourceDirectory();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Archive_GetSourceFileName(SwigObj* carg1) {
  std::string *cppresult;
  wi::Archive *arg1 = (wi::Archive *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Archive *) carg1;
  cppresult = (std::string *) &((wi::Archive const *)arg1)->GetSourceFileName();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Archive_CreateThumbnailTexture(SwigObj* carg1) {
  wi::graphics::Texture cppresult;
  wi::Archive *arg1 = (wi::Archive *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Archive *) carg1;
  cppresult = ((wi::Archive const *)arg1)->CreateThumbnailTexture();
  result = (SwigObj*)new wi::graphics::Texture(cppresult);
  return result;
}


SWIGEXPORTC void wi_Archive_SetThumbnailAndResetPos(SwigObj* carg1, SwigObj* carg2) {
  wi::Archive *arg1 = (wi::Archive *) 0 ;
  wi::graphics::Texture *arg2 = 0 ;
  
  arg1 = (wi::Archive *) carg1;
  
  arg2 = (wi::graphics::Texture *) carg2;
  
  (arg1)->SetThumbnailAndResetPos((wi::graphics::Texture const &)*arg2);
}


SWIGEXPORTC SwigObj* wi_Archive_PeekThumbnail(SwigObj* carg1) {
  wi::graphics::Texture cppresult;
  std::string *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::string *) carg1;
  
  cppresult = wi::Archive::PeekThumbnail((std::string const &)*arg1);
  result = (SwigObj*)new wi::graphics::Texture(cppresult);
  return result;
}


SWIGEXPORTC size_t wi_Archive_WriteUnknownJumpPosition(SwigObj* carg1) {
  size_t cppresult;
  wi::Archive *arg1 = (wi::Archive *) 0 ;
  size_t result;
  
  arg1 = (wi::Archive *) carg1;
  cppresult = (arg1)->WriteUnknownJumpPosition();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void wi_Archive_PatchUnknownJumpPosition(SwigObj* carg1, size_t carg2) {
  wi::Archive *arg1 = (wi::Archive *) 0 ;
  size_t arg2 ;
  
  arg1 = (wi::Archive *) carg1;
  arg2 = (size_t) carg2;
  (arg1)->PatchUnknownJumpPosition(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void wi_Archive_Jump(SwigObj* carg1, SwigObj* carg2) {
  wi::Archive *arg1 = (wi::Archive *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (wi::Archive *) carg1;
  arg2 = *(uint64_t *)carg2;
  (arg1)->Jump(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void wi_Archive_MapVector(SwigObj* carg1, SwigObj* carg2, size_t * carg3) {
  wi::Archive *arg1 = (wi::Archive *) 0 ;
  uint8_t **arg2 = 0 ;
  size_t *arg3 = 0 ;
  
  arg1 = (wi::Archive *) carg1;
  
  arg2 = (uint8_t **) carg2;
  
  arg3 = (size_t *) carg3;
  (arg1)->MapVector((uint8_t const *&)*arg2,*arg3);
}


SWIGEXPORTC void wi_audio_Initialize() {
  wi::audio::Initialize();
}


SWIGEXPORTC void wi_audio_Sound_internal_state_set(SwigObj* carg1, SwigObj* carg2) {
  wi::audio::Sound *arg1 = (wi::audio::Sound *) 0 ;
  std::shared_ptr< void > arg2 ;
  
  arg1 = (wi::audio::Sound *) carg1;
  arg2 = *(std::shared_ptr< void > *)carg2;
  if (arg1) (arg1)->internal_state = arg2;
}


SWIGEXPORTC SwigObj* wi_audio_Sound_internal_state_get(SwigObj* carg1) {
  std::shared_ptr< void > cppresult;
  wi::audio::Sound *arg1 = (wi::audio::Sound *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::audio::Sound *) carg1;
  cppresult =  ((arg1)->internal_state);
  result = (SwigObj*)new std::shared_ptr< void >(cppresult);
  return result;
}


SWIGEXPORTC bool wi_audio_Sound_IsValid(SwigObj* carg1) {
  bool cppresult;
  wi::audio::Sound *arg1 = (wi::audio::Sound *) 0 ;
  bool result;
  
  arg1 = (wi::audio::Sound *) carg1;
  cppresult = (bool)((wi::audio::Sound const *)arg1)->IsValid();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_audio_Sound_new() {
  wi::audio::Sound *cppresult;
  SwigObj* result;
  
  cppresult = (wi::audio::Sound *)new wi::audio::Sound();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_audio_Sound_delete(SwigObj* carg1) {
  wi::audio::Sound *arg1 = (wi::audio::Sound *) 0 ;
  
  arg1 = (wi::audio::Sound *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_audio_SoundInstance_internal_state_set(SwigObj* carg1, SwigObj* carg2) {
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  std::shared_ptr< void > arg2 ;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  arg2 = *(std::shared_ptr< void > *)carg2;
  if (arg1) (arg1)->internal_state = arg2;
}


SWIGEXPORTC SwigObj* wi_audio_SoundInstance_internal_state_get(SwigObj* carg1) {
  std::shared_ptr< void > cppresult;
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  cppresult =  ((arg1)->internal_state);
  result = (SwigObj*)new std::shared_ptr< void >(cppresult);
  return result;
}


SWIGEXPORTC bool wi_audio_SoundInstance_IsValid(SwigObj* carg1) {
  bool cppresult;
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  bool result;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  cppresult = (bool)((wi::audio::SoundInstance const *)arg1)->IsValid();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_audio_SoundInstance_type_set(SwigObj* carg1, int carg2) {
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  enum wi::audio::SUBMIX_TYPE arg2 ;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  arg2 = (enum wi::audio::SUBMIX_TYPE) carg2;
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORTC int wi_audio_SoundInstance_type_get(SwigObj* carg1) {
  enum wi::audio::SUBMIX_TYPE cppresult;
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  int result;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  cppresult = (enum wi::audio::SUBMIX_TYPE) ((arg1)->type);
  result = (int) cppresult;
  return result;
}


SWIGEXPORTC void wi_audio_SoundInstance_begin_set(SwigObj* carg1, float carg2) {
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  float arg2 ;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->begin = arg2;
}


SWIGEXPORTC float wi_audio_SoundInstance_begin_get(SwigObj* carg1) {
  float cppresult;
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  float result;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  cppresult = (float) ((arg1)->begin);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void wi_audio_SoundInstance_length_set(SwigObj* carg1, float carg2) {
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  float arg2 ;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORTC float wi_audio_SoundInstance_length_get(SwigObj* carg1) {
  float cppresult;
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  float result;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  cppresult = (float) ((arg1)->length);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void wi_audio_SoundInstance_loop_begin_set(SwigObj* carg1, float carg2) {
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  float arg2 ;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->loop_begin = arg2;
}


SWIGEXPORTC float wi_audio_SoundInstance_loop_begin_get(SwigObj* carg1) {
  float cppresult;
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  float result;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  cppresult = (float) ((arg1)->loop_begin);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void wi_audio_SoundInstance_loop_length_set(SwigObj* carg1, float carg2) {
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  float arg2 ;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->loop_length = arg2;
}


SWIGEXPORTC float wi_audio_SoundInstance_loop_length_get(SwigObj* carg1) {
  float cppresult;
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  float result;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  cppresult = (float) ((arg1)->loop_length);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void wi_audio_SoundInstance__flags_set(SwigObj* carg1, SwigObj* carg2) {
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  arg2 = *(uint32_t *)carg2;
  if (arg1) (arg1)->_flags = arg2;
}


SWIGEXPORTC SwigObj* wi_audio_SoundInstance__flags_get(SwigObj* carg1) {
  uint32_t cppresult;
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  cppresult =  ((arg1)->_flags);
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC void wi_audio_SoundInstance_SetEnableReverb_b(SwigObj* carg1, bool carg2) {
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  bool arg2 ;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  arg2 = (bool) carg2;
  (arg1)->SetEnableReverb(arg2);
}


SWIGEXPORTC void wi_audio_SoundInstance_SetEnableReverb(SwigObj* carg1) {
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  (arg1)->SetEnableReverb();
}


SWIGEXPORTC bool wi_audio_SoundInstance_IsEnableReverb(SwigObj* carg1) {
  bool cppresult;
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  bool result;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  cppresult = (bool)((wi::audio::SoundInstance const *)arg1)->IsEnableReverb();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_audio_SoundInstance_SetLooped_b(SwigObj* carg1, bool carg2) {
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  bool arg2 ;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  arg2 = (bool) carg2;
  (arg1)->SetLooped(arg2);
}


SWIGEXPORTC void wi_audio_SoundInstance_SetLooped(SwigObj* carg1) {
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  (arg1)->SetLooped();
}


SWIGEXPORTC bool wi_audio_SoundInstance_IsLooped(SwigObj* carg1) {
  bool cppresult;
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  bool result;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  cppresult = (bool)((wi::audio::SoundInstance const *)arg1)->IsLooped();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_audio_SoundInstance_new() {
  wi::audio::SoundInstance *cppresult;
  SwigObj* result;
  
  cppresult = (wi::audio::SoundInstance *)new wi::audio::SoundInstance();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_audio_SoundInstance_delete(SwigObj* carg1) {
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  delete arg1;
}


SWIGEXPORTC bool wi_audio_CreateSound_rcstd_string_pwi_audio_Sound(SwigObj* carg1, SwigObj* carg2) {
  bool cppresult;
  std::string *arg1 = 0 ;
  wi::audio::Sound *arg2 = (wi::audio::Sound *) 0 ;
  bool result;
  
  
  arg1 = (std::string *) carg1;
  
  arg2 = (wi::audio::Sound *) carg2;
  cppresult = (bool)wi::audio::CreateSound((std::string const &)*arg1,arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_audio_CreateSound_pcuint8_t_size_t_pwi_audio_Sound(SwigObj* carg1, size_t carg2, SwigObj* carg3) {
  bool cppresult;
  uint8_t *arg1 = (uint8_t *) 0 ;
  size_t arg2 ;
  wi::audio::Sound *arg3 = (wi::audio::Sound *) 0 ;
  bool result;
  
  arg1 = (uint8_t *) carg1;
  arg2 = (size_t) carg2;
  arg3 = (wi::audio::Sound *) carg3;
  cppresult = (bool)wi::audio::CreateSound((uint8_t const *)arg1,SWIG_STD_MOVE(arg2),arg3);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_audio_CreateSoundInstance(SwigObj* carg1, SwigObj* carg2) {
  bool cppresult;
  wi::audio::Sound *arg1 = (wi::audio::Sound *) 0 ;
  wi::audio::SoundInstance *arg2 = (wi::audio::SoundInstance *) 0 ;
  bool result;
  
  arg1 = (wi::audio::Sound *) carg1;
  arg2 = (wi::audio::SoundInstance *) carg2;
  cppresult = (bool)wi::audio::CreateSoundInstance((wi::audio::Sound const *)arg1,arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_audio_Play(SwigObj* carg1) {
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  wi::audio::Play(arg1);
}


SWIGEXPORTC void wi_audio_Pause(SwigObj* carg1) {
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  wi::audio::Pause(arg1);
}


SWIGEXPORTC void wi_audio_Stop(SwigObj* carg1) {
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  wi::audio::Stop(arg1);
}


SWIGEXPORTC void wi_audio_SetVolume_f_pwi_audio_SoundInstance(float carg1, SwigObj* carg2) {
  float arg1 ;
  wi::audio::SoundInstance *arg2 = (wi::audio::SoundInstance *) 0 ;
  
  arg1 = (float) carg1;
  arg2 = (wi::audio::SoundInstance *) carg2;
  wi::audio::SetVolume(arg1,arg2);
}


SWIGEXPORTC void wi_audio_SetVolume_f(float carg1) {
  float arg1 ;
  
  arg1 = (float) carg1;
  wi::audio::SetVolume(arg1);
}


SWIGEXPORTC float wi_audio_GetVolume_pcwi_audio_SoundInstance(SwigObj* carg1) {
  float cppresult;
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  float result;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  cppresult = (float)wi::audio::GetVolume((wi::audio::SoundInstance const *)arg1);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC float wi_audio_GetVolume() {
  float cppresult;
  float result;
  
  cppresult = (float)wi::audio::GetVolume();
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void wi_audio_ExitLoop(SwigObj* carg1) {
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  wi::audio::ExitLoop(arg1);
}


SWIGEXPORTC bool wi_audio_IsEnded(SwigObj* carg1) {
  bool cppresult;
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  bool result;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  cppresult = (bool)wi::audio::IsEnded(arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_audio_SampleInfo_samples_set(SwigObj* carg1, const short * carg2) {
  wi::audio::SampleInfo *arg1 = (wi::audio::SampleInfo *) 0 ;
  short *arg2 = (short *) 0 ;
  
  arg1 = (wi::audio::SampleInfo *) carg1;
  arg2 = (short *) carg2;
  if (arg1) (arg1)->samples = (short const *)arg2;
}


SWIGEXPORTC const short * wi_audio_SampleInfo_samples_get(SwigObj* carg1) {
  short *cppresult;
  wi::audio::SampleInfo *arg1 = (wi::audio::SampleInfo *) 0 ;
  const short * result;
  
  arg1 = (wi::audio::SampleInfo *) carg1;
  cppresult = (short *) ((arg1)->samples);
  result = (const short *)cppresult;
  return result;
}


SWIGEXPORTC void wi_audio_SampleInfo_sample_count_set(SwigObj* carg1, size_t carg2) {
  wi::audio::SampleInfo *arg1 = (wi::audio::SampleInfo *) 0 ;
  size_t arg2 ;
  
  arg1 = (wi::audio::SampleInfo *) carg1;
  arg2 = (size_t) carg2;
  if (arg1) (arg1)->sample_count = arg2;
}


SWIGEXPORTC size_t wi_audio_SampleInfo_sample_count_get(SwigObj* carg1) {
  size_t cppresult;
  wi::audio::SampleInfo *arg1 = (wi::audio::SampleInfo *) 0 ;
  size_t result;
  
  arg1 = (wi::audio::SampleInfo *) carg1;
  cppresult =  ((arg1)->sample_count);
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void wi_audio_SampleInfo_sample_rate_set(SwigObj* carg1, int carg2) {
  wi::audio::SampleInfo *arg1 = (wi::audio::SampleInfo *) 0 ;
  int arg2 ;
  
  arg1 = (wi::audio::SampleInfo *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->sample_rate = arg2;
}


SWIGEXPORTC int wi_audio_SampleInfo_sample_rate_get(SwigObj* carg1) {
  int cppresult;
  wi::audio::SampleInfo *arg1 = (wi::audio::SampleInfo *) 0 ;
  int result;
  
  arg1 = (wi::audio::SampleInfo *) carg1;
  cppresult = (int) ((arg1)->sample_rate);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void wi_audio_SampleInfo_channel_count_set(SwigObj* carg1, SwigObj* carg2) {
  wi::audio::SampleInfo *arg1 = (wi::audio::SampleInfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (wi::audio::SampleInfo *) carg1;
  arg2 = *(uint32_t *)carg2;
  if (arg1) (arg1)->channel_count = arg2;
}


SWIGEXPORTC SwigObj* wi_audio_SampleInfo_channel_count_get(SwigObj* carg1) {
  uint32_t cppresult;
  wi::audio::SampleInfo *arg1 = (wi::audio::SampleInfo *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::audio::SampleInfo *) carg1;
  cppresult =  ((arg1)->channel_count);
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_audio_SampleInfo_new() {
  wi::audio::SampleInfo *cppresult;
  SwigObj* result;
  
  cppresult = (wi::audio::SampleInfo *)new wi::audio::SampleInfo();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_audio_SampleInfo_delete(SwigObj* carg1) {
  wi::audio::SampleInfo *arg1 = (wi::audio::SampleInfo *) 0 ;
  
  arg1 = (wi::audio::SampleInfo *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* wi_audio_GetSampleInfo(SwigObj* carg1) {
  wi::audio::SampleInfo cppresult;
  wi::audio::Sound *arg1 = (wi::audio::Sound *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::audio::Sound *) carg1;
  cppresult = wi::audio::GetSampleInfo((wi::audio::Sound const *)arg1);
  result = (SwigObj*)new wi::audio::SampleInfo(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_audio_GetTotalSamplesPlayed(SwigObj* carg1) {
  uint64_t cppresult;
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  cppresult = wi::audio::GetTotalSamplesPlayed((wi::audio::SoundInstance const *)arg1);
  result = (SwigObj*)new uint64_t(cppresult);
  return result;
}


SWIGEXPORTC void wi_audio_SetSubmixVolume(int carg1, float carg2) {
  wi::audio::SUBMIX_TYPE arg1 ;
  float arg2 ;
  
  arg1 = (wi::audio::SUBMIX_TYPE) carg1;
  arg2 = (float) carg2;
  wi::audio::SetSubmixVolume(arg1,arg2);
}


SWIGEXPORTC float wi_audio_GetSubmixVolume(int carg1) {
  float cppresult;
  wi::audio::SUBMIX_TYPE arg1 ;
  float result;
  
  arg1 = (wi::audio::SUBMIX_TYPE) carg1;
  cppresult = (float)wi::audio::GetSubmixVolume(arg1);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void wi_audio_SoundInstance3D_listenerPos_set(SwigObj* carg1, SwigObj* carg2) {
  wi::audio::SoundInstance3D *arg1 = (wi::audio::SoundInstance3D *) 0 ;
  XMFLOAT3 arg2 ;
  
  arg1 = (wi::audio::SoundInstance3D *) carg1;
  arg2 = *(XMFLOAT3 *)carg2;
  if (arg1) (arg1)->listenerPos = arg2;
}


SWIGEXPORTC SwigObj* wi_audio_SoundInstance3D_listenerPos_get(SwigObj* carg1) {
  XMFLOAT3 cppresult;
  wi::audio::SoundInstance3D *arg1 = (wi::audio::SoundInstance3D *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::audio::SoundInstance3D *) carg1;
  cppresult =  ((arg1)->listenerPos);
  result = (SwigObj*)new XMFLOAT3(cppresult);
  return result;
}


SWIGEXPORTC void wi_audio_SoundInstance3D_listenerUp_set(SwigObj* carg1, SwigObj* carg2) {
  wi::audio::SoundInstance3D *arg1 = (wi::audio::SoundInstance3D *) 0 ;
  XMFLOAT3 arg2 ;
  
  arg1 = (wi::audio::SoundInstance3D *) carg1;
  arg2 = *(XMFLOAT3 *)carg2;
  if (arg1) (arg1)->listenerUp = arg2;
}


SWIGEXPORTC SwigObj* wi_audio_SoundInstance3D_listenerUp_get(SwigObj* carg1) {
  XMFLOAT3 cppresult;
  wi::audio::SoundInstance3D *arg1 = (wi::audio::SoundInstance3D *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::audio::SoundInstance3D *) carg1;
  cppresult =  ((arg1)->listenerUp);
  result = (SwigObj*)new XMFLOAT3(cppresult);
  return result;
}


SWIGEXPORTC void wi_audio_SoundInstance3D_listenerFront_set(SwigObj* carg1, SwigObj* carg2) {
  wi::audio::SoundInstance3D *arg1 = (wi::audio::SoundInstance3D *) 0 ;
  XMFLOAT3 arg2 ;
  
  arg1 = (wi::audio::SoundInstance3D *) carg1;
  arg2 = *(XMFLOAT3 *)carg2;
  if (arg1) (arg1)->listenerFront = arg2;
}


SWIGEXPORTC SwigObj* wi_audio_SoundInstance3D_listenerFront_get(SwigObj* carg1) {
  XMFLOAT3 cppresult;
  wi::audio::SoundInstance3D *arg1 = (wi::audio::SoundInstance3D *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::audio::SoundInstance3D *) carg1;
  cppresult =  ((arg1)->listenerFront);
  result = (SwigObj*)new XMFLOAT3(cppresult);
  return result;
}


SWIGEXPORTC void wi_audio_SoundInstance3D_listenerVelocity_set(SwigObj* carg1, SwigObj* carg2) {
  wi::audio::SoundInstance3D *arg1 = (wi::audio::SoundInstance3D *) 0 ;
  XMFLOAT3 arg2 ;
  
  arg1 = (wi::audio::SoundInstance3D *) carg1;
  arg2 = *(XMFLOAT3 *)carg2;
  if (arg1) (arg1)->listenerVelocity = arg2;
}


SWIGEXPORTC SwigObj* wi_audio_SoundInstance3D_listenerVelocity_get(SwigObj* carg1) {
  XMFLOAT3 cppresult;
  wi::audio::SoundInstance3D *arg1 = (wi::audio::SoundInstance3D *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::audio::SoundInstance3D *) carg1;
  cppresult =  ((arg1)->listenerVelocity);
  result = (SwigObj*)new XMFLOAT3(cppresult);
  return result;
}


SWIGEXPORTC void wi_audio_SoundInstance3D_emitterPos_set(SwigObj* carg1, SwigObj* carg2) {
  wi::audio::SoundInstance3D *arg1 = (wi::audio::SoundInstance3D *) 0 ;
  XMFLOAT3 arg2 ;
  
  arg1 = (wi::audio::SoundInstance3D *) carg1;
  arg2 = *(XMFLOAT3 *)carg2;
  if (arg1) (arg1)->emitterPos = arg2;
}


SWIGEXPORTC SwigObj* wi_audio_SoundInstance3D_emitterPos_get(SwigObj* carg1) {
  XMFLOAT3 cppresult;
  wi::audio::SoundInstance3D *arg1 = (wi::audio::SoundInstance3D *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::audio::SoundInstance3D *) carg1;
  cppresult =  ((arg1)->emitterPos);
  result = (SwigObj*)new XMFLOAT3(cppresult);
  return result;
}


SWIGEXPORTC void wi_audio_SoundInstance3D_emitterUp_set(SwigObj* carg1, SwigObj* carg2) {
  wi::audio::SoundInstance3D *arg1 = (wi::audio::SoundInstance3D *) 0 ;
  XMFLOAT3 arg2 ;
  
  arg1 = (wi::audio::SoundInstance3D *) carg1;
  arg2 = *(XMFLOAT3 *)carg2;
  if (arg1) (arg1)->emitterUp = arg2;
}


SWIGEXPORTC SwigObj* wi_audio_SoundInstance3D_emitterUp_get(SwigObj* carg1) {
  XMFLOAT3 cppresult;
  wi::audio::SoundInstance3D *arg1 = (wi::audio::SoundInstance3D *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::audio::SoundInstance3D *) carg1;
  cppresult =  ((arg1)->emitterUp);
  result = (SwigObj*)new XMFLOAT3(cppresult);
  return result;
}


SWIGEXPORTC void wi_audio_SoundInstance3D_emitterFront_set(SwigObj* carg1, SwigObj* carg2) {
  wi::audio::SoundInstance3D *arg1 = (wi::audio::SoundInstance3D *) 0 ;
  XMFLOAT3 arg2 ;
  
  arg1 = (wi::audio::SoundInstance3D *) carg1;
  arg2 = *(XMFLOAT3 *)carg2;
  if (arg1) (arg1)->emitterFront = arg2;
}


SWIGEXPORTC SwigObj* wi_audio_SoundInstance3D_emitterFront_get(SwigObj* carg1) {
  XMFLOAT3 cppresult;
  wi::audio::SoundInstance3D *arg1 = (wi::audio::SoundInstance3D *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::audio::SoundInstance3D *) carg1;
  cppresult =  ((arg1)->emitterFront);
  result = (SwigObj*)new XMFLOAT3(cppresult);
  return result;
}


SWIGEXPORTC void wi_audio_SoundInstance3D_emitterVelocity_set(SwigObj* carg1, SwigObj* carg2) {
  wi::audio::SoundInstance3D *arg1 = (wi::audio::SoundInstance3D *) 0 ;
  XMFLOAT3 arg2 ;
  
  arg1 = (wi::audio::SoundInstance3D *) carg1;
  arg2 = *(XMFLOAT3 *)carg2;
  if (arg1) (arg1)->emitterVelocity = arg2;
}


SWIGEXPORTC SwigObj* wi_audio_SoundInstance3D_emitterVelocity_get(SwigObj* carg1) {
  XMFLOAT3 cppresult;
  wi::audio::SoundInstance3D *arg1 = (wi::audio::SoundInstance3D *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::audio::SoundInstance3D *) carg1;
  cppresult =  ((arg1)->emitterVelocity);
  result = (SwigObj*)new XMFLOAT3(cppresult);
  return result;
}


SWIGEXPORTC void wi_audio_SoundInstance3D_emitterRadius_set(SwigObj* carg1, float carg2) {
  wi::audio::SoundInstance3D *arg1 = (wi::audio::SoundInstance3D *) 0 ;
  float arg2 ;
  
  arg1 = (wi::audio::SoundInstance3D *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->emitterRadius = arg2;
}


SWIGEXPORTC float wi_audio_SoundInstance3D_emitterRadius_get(SwigObj* carg1) {
  float cppresult;
  wi::audio::SoundInstance3D *arg1 = (wi::audio::SoundInstance3D *) 0 ;
  float result;
  
  arg1 = (wi::audio::SoundInstance3D *) carg1;
  cppresult = (float) ((arg1)->emitterRadius);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_audio_SoundInstance3D_new() {
  wi::audio::SoundInstance3D *cppresult;
  SwigObj* result;
  
  cppresult = (wi::audio::SoundInstance3D *)new wi::audio::SoundInstance3D();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_audio_SoundInstance3D_delete(SwigObj* carg1) {
  wi::audio::SoundInstance3D *arg1 = (wi::audio::SoundInstance3D *) 0 ;
  
  arg1 = (wi::audio::SoundInstance3D *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_audio_Update3D(SwigObj* carg1, SwigObj* carg2) {
  wi::audio::SoundInstance *arg1 = (wi::audio::SoundInstance *) 0 ;
  wi::audio::SoundInstance3D *arg2 = 0 ;
  
  arg1 = (wi::audio::SoundInstance *) carg1;
  
  arg2 = (wi::audio::SoundInstance3D *) carg2;
  
  wi::audio::Update3D(arg1,(wi::audio::SoundInstance3D const &)*arg2);
}


SWIGEXPORTC void wi_audio_SetReverb(int carg1) {
  wi::audio::REVERB_PRESET arg1 ;
  
  arg1 = (wi::audio::REVERB_PRESET) carg1;
  wi::audio::SetReverb(arg1);
}


SWIGEXPORTC void wi_BVH_allocation_set(SwigObj* carg1, SwigObj* carg2) {
  wi::BVH *arg1 = (wi::BVH *) 0 ;
  wi::vector< uint8_t,std::allocator< uint8_t > > *arg2 = (wi::vector< uint8_t,std::allocator< uint8_t > > *) 0 ;
  
  arg1 = (wi::BVH *) carg1;
  arg2 = (wi::vector< uint8_t,std::allocator< uint8_t > > *) carg2;
  if (arg1) (arg1)->allocation = *arg2;
}


SWIGEXPORTC SwigObj* wi_BVH_allocation_get(SwigObj* carg1) {
  wi::vector< uint8_t,std::allocator< uint8_t > > *cppresult;
  wi::BVH *arg1 = (wi::BVH *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::BVH *) carg1;
  cppresult = (wi::vector< uint8_t,std::allocator< uint8_t > > *)& ((arg1)->allocation);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_BVH_nodes_set(SwigObj* carg1, SwigObj* carg2) {
  wi::BVH *arg1 = (wi::BVH *) 0 ;
  wi::BVH::Node *arg2 = (wi::BVH::Node *) 0 ;
  
  arg1 = (wi::BVH *) carg1;
  arg2 = (wi::BVH::Node *) carg2;
  if (arg1) (arg1)->nodes = arg2;
}


SWIGEXPORTC SwigObj* wi_BVH_nodes_get(SwigObj* carg1) {
  wi::BVH::Node *cppresult;
  wi::BVH *arg1 = (wi::BVH *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::BVH *) carg1;
  cppresult = (wi::BVH::Node *) ((arg1)->nodes);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_BVH_node_count_set(SwigObj* carg1, SwigObj* carg2) {
  wi::BVH *arg1 = (wi::BVH *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (wi::BVH *) carg1;
  arg2 = *(uint32_t *)carg2;
  if (arg1) (arg1)->node_count = arg2;
}


SWIGEXPORTC SwigObj* wi_BVH_node_count_get(SwigObj* carg1) {
  uint32_t cppresult;
  wi::BVH *arg1 = (wi::BVH *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::BVH *) carg1;
  cppresult =  ((arg1)->node_count);
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC void wi_BVH_leaf_indices_set(SwigObj* carg1, SwigObj* carg2) {
  wi::BVH *arg1 = (wi::BVH *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  
  arg1 = (wi::BVH *) carg1;
  arg2 = (uint32_t *) carg2;
  if (arg1) (arg1)->leaf_indices = arg2;
}


SWIGEXPORTC SwigObj* wi_BVH_leaf_indices_get(SwigObj* carg1) {
  uint32_t *cppresult;
  wi::BVH *arg1 = (wi::BVH *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::BVH *) carg1;
  cppresult = (uint32_t *) ((arg1)->leaf_indices);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_BVH_leaf_count_set(SwigObj* carg1, SwigObj* carg2) {
  wi::BVH *arg1 = (wi::BVH *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (wi::BVH *) carg1;
  arg2 = *(uint32_t *)carg2;
  if (arg1) (arg1)->leaf_count = arg2;
}


SWIGEXPORTC SwigObj* wi_BVH_leaf_count_get(SwigObj* carg1) {
  uint32_t cppresult;
  wi::BVH *arg1 = (wi::BVH *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::BVH *) carg1;
  cppresult =  ((arg1)->leaf_count);
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC bool wi_BVH_IsValid(SwigObj* carg1) {
  bool cppresult;
  wi::BVH *arg1 = (wi::BVH *) 0 ;
  bool result;
  
  arg1 = (wi::BVH *) carg1;
  cppresult = (bool)((wi::BVH const *)arg1)->IsValid();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_BVH_Build(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  wi::BVH *arg1 = (wi::BVH *) 0 ;
  wi::primitive::AABB *arg2 = (wi::primitive::AABB *) 0 ;
  uint32_t arg3 ;
  
  arg1 = (wi::BVH *) carg1;
  arg2 = (wi::primitive::AABB *) carg2;
  arg3 = *(uint32_t *)carg3;
  (arg1)->Build((wi::primitive::AABB const *)arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORTC void wi_BVH_Subdivide(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  wi::BVH *arg1 = (wi::BVH *) 0 ;
  uint32_t arg2 ;
  wi::primitive::AABB *arg3 = (wi::primitive::AABB *) 0 ;
  
  arg1 = (wi::BVH *) carg1;
  arg2 = *(uint32_t *)carg2;
  arg3 = (wi::primitive::AABB *) carg3;
  (arg1)->Subdivide(SWIG_STD_MOVE(arg2),(wi::primitive::AABB const *)arg3);
}


SWIGEXPORTC void wi_BVH_UpdateNodeBounds(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  wi::BVH *arg1 = (wi::BVH *) 0 ;
  uint32_t arg2 ;
  wi::primitive::AABB *arg3 = (wi::primitive::AABB *) 0 ;
  
  arg1 = (wi::BVH *) carg1;
  arg2 = *(uint32_t *)carg2;
  arg3 = (wi::primitive::AABB *) carg3;
  (arg1)->UpdateNodeBounds(SWIG_STD_MOVE(arg2),(wi::primitive::AABB const *)arg3);
}


SWIGEXPORTC SwigObj* wi_BVH_new() {
  wi::BVH *cppresult;
  SwigObj* result;
  
  cppresult = (wi::BVH *)new wi::BVH();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_BVH_delete(SwigObj* carg1) {
  wi::BVH *arg1 = (wi::BVH *) 0 ;
  
  arg1 = (wi::BVH *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_Color_rgba_set(SwigObj* carg1, SwigObj* carg2) {
  wi::Color *arg1 = (wi::Color *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (wi::Color *) carg1;
  arg2 = *(uint32_t *)carg2;
  if (arg1) (arg1)->rgba = arg2;
}


SWIGEXPORTC SwigObj* wi_Color_rgba_get(SwigObj* carg1) {
  uint32_t cppresult;
  wi::Color *arg1 = (wi::Color *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Color *) carg1;
  cppresult =  ((arg1)->rgba);
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_new_uint32_t(SwigObj* carg1) {
  wi::Color *cppresult;
  uint32_t arg1 ;
  SwigObj* result;
  
  arg1 = *(uint32_t *)carg1;
  cppresult = (wi::Color *)new wi::Color(SWIG_STD_MOVE(arg1));
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_new_uint8_t_uint8_t_uint8_t_uint8_t(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  wi::Color *cppresult;
  uint8_t arg1 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  SwigObj* result;
  
  arg1 = *(uint8_t *)carg1;
  arg2 = *(uint8_t *)carg2;
  arg3 = *(uint8_t *)carg3;
  arg4 = *(uint8_t *)carg4;
  cppresult = (wi::Color *)new wi::Color(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_new_uint8_t_uint8_t_uint8_t(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  wi::Color *cppresult;
  uint8_t arg1 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  SwigObj* result;
  
  arg1 = *(uint8_t *)carg1;
  arg2 = *(uint8_t *)carg2;
  arg3 = *(uint8_t *)carg3;
  cppresult = (wi::Color *)new wi::Color(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_new_uint8_t_uint8_t(SwigObj* carg1, SwigObj* carg2) {
  wi::Color *cppresult;
  uint8_t arg1 ;
  uint8_t arg2 ;
  SwigObj* result;
  
  arg1 = *(uint8_t *)carg1;
  arg2 = *(uint8_t *)carg2;
  cppresult = (wi::Color *)new wi::Color(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_new_uint8_t(SwigObj* carg1) {
  wi::Color *cppresult;
  uint8_t arg1 ;
  SwigObj* result;
  
  arg1 = *(uint8_t *)carg1;
  cppresult = (wi::Color *)new wi::Color(SWIG_STD_MOVE(arg1));
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_new() {
  wi::Color *cppresult;
  SwigObj* result;
  
  cppresult = (wi::Color *)new wi::Color();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_new_pcc(const char * carg1) {
  wi::Color *cppresult;
  char *arg1 = (char *) 0 ;
  SwigObj* result;
  
  arg1 = (char *) carg1;
  cppresult = (wi::Color *)new wi::Color((char const *)arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_getR(SwigObj* carg1) {
  uint8_t cppresult;
  wi::Color *arg1 = (wi::Color *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Color *) carg1;
  cppresult = ((wi::Color const *)arg1)->getR();
  result = (SwigObj*)new uint8_t(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_getG(SwigObj* carg1) {
  uint8_t cppresult;
  wi::Color *arg1 = (wi::Color *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Color *) carg1;
  cppresult = ((wi::Color const *)arg1)->getG();
  result = (SwigObj*)new uint8_t(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_getB(SwigObj* carg1) {
  uint8_t cppresult;
  wi::Color *arg1 = (wi::Color *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Color *) carg1;
  cppresult = ((wi::Color const *)arg1)->getB();
  result = (SwigObj*)new uint8_t(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_getA(SwigObj* carg1) {
  uint8_t cppresult;
  wi::Color *arg1 = (wi::Color *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Color *) carg1;
  cppresult = ((wi::Color const *)arg1)->getA();
  result = (SwigObj*)new uint8_t(cppresult);
  return result;
}


SWIGEXPORTC void wi_Color_setR(SwigObj* carg1, SwigObj* carg2) {
  wi::Color *arg1 = (wi::Color *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (wi::Color *) carg1;
  arg2 = *(uint8_t *)carg2;
  (arg1)->setR(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void wi_Color_setG(SwigObj* carg1, SwigObj* carg2) {
  wi::Color *arg1 = (wi::Color *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (wi::Color *) carg1;
  arg2 = *(uint8_t *)carg2;
  (arg1)->setG(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void wi_Color_setB(SwigObj* carg1, SwigObj* carg2) {
  wi::Color *arg1 = (wi::Color *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (wi::Color *) carg1;
  arg2 = *(uint8_t *)carg2;
  (arg1)->setB(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void wi_Color_setA(SwigObj* carg1, SwigObj* carg2) {
  wi::Color *arg1 = (wi::Color *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (wi::Color *) carg1;
  arg2 = *(uint8_t *)carg2;
  (arg1)->setA(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC SwigObj* wi_Color_toFloat3(SwigObj* carg1) {
  XMFLOAT3 cppresult;
  wi::Color *arg1 = (wi::Color *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Color *) carg1;
  cppresult = ((wi::Color const *)arg1)->toFloat3();
  result = (SwigObj*)new XMFLOAT3(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_toFloat4(SwigObj* carg1) {
  XMFLOAT4 cppresult;
  wi::Color *arg1 = (wi::Color *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Color *) carg1;
  cppresult = ((wi::Color const *)arg1)->toFloat4();
  result = (SwigObj*)new XMFLOAT4(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_to_hex(SwigObj* carg1) {
  SwigValueWrapper< wi::Color::char_return< 9 > > cppresult;
  wi::Color *arg1 = (wi::Color *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Color *) carg1;
  cppresult = ((wi::Color const *)arg1)->to_hex();
  result = (SwigObj*)new wi::Color::char_return< 9 >(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_fromFloat4(SwigObj* carg1) {
  wi::Color cppresult;
  XMFLOAT4 *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (XMFLOAT4 *) carg1;
  
  cppresult = wi::Color::fromFloat4((XMFLOAT4 const &)*arg1);
  result = (SwigObj*)new wi::Color(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_fromFloat3(SwigObj* carg1) {
  wi::Color cppresult;
  XMFLOAT3 *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (XMFLOAT3 *) carg1;
  
  cppresult = wi::Color::fromFloat3((XMFLOAT3 const &)*arg1);
  result = (SwigObj*)new wi::Color(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_lerp(SwigObj* carg1, SwigObj* carg2, float carg3) {
  wi::Color cppresult;
  wi::Color arg1 ;
  wi::Color arg2 ;
  float arg3 ;
  SwigObj* result;
  
  arg1 = *(wi::Color *)carg1;
  arg2 = *(wi::Color *)carg2;
  arg3 = (float) carg3;
  cppresult = wi::Color::lerp(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3);
  result = (SwigObj*)new wi::Color(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_Red() {
  wi::Color cppresult;
  SwigObj* result;
  
  cppresult = wi::Color::Red();
  result = (SwigObj*)new wi::Color(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_Green() {
  wi::Color cppresult;
  SwigObj* result;
  
  cppresult = wi::Color::Green();
  result = (SwigObj*)new wi::Color(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_Blue() {
  wi::Color cppresult;
  SwigObj* result;
  
  cppresult = wi::Color::Blue();
  result = (SwigObj*)new wi::Color(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_Black() {
  wi::Color cppresult;
  SwigObj* result;
  
  cppresult = wi::Color::Black();
  result = (SwigObj*)new wi::Color(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_White() {
  wi::Color cppresult;
  SwigObj* result;
  
  cppresult = wi::Color::White();
  result = (SwigObj*)new wi::Color(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_Yellow() {
  wi::Color cppresult;
  SwigObj* result;
  
  cppresult = wi::Color::Yellow();
  result = (SwigObj*)new wi::Color(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_Purple() {
  wi::Color cppresult;
  SwigObj* result;
  
  cppresult = wi::Color::Purple();
  result = (SwigObj*)new wi::Color(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_Cyan() {
  wi::Color cppresult;
  SwigObj* result;
  
  cppresult = wi::Color::Cyan();
  result = (SwigObj*)new wi::Color(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_Transparent() {
  wi::Color cppresult;
  SwigObj* result;
  
  cppresult = wi::Color::Transparent();
  result = (SwigObj*)new wi::Color(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_Gray() {
  wi::Color cppresult;
  SwigObj* result;
  
  cppresult = wi::Color::Gray();
  result = (SwigObj*)new wi::Color(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_Ghost() {
  wi::Color cppresult;
  SwigObj* result;
  
  cppresult = wi::Color::Ghost();
  result = (SwigObj*)new wi::Color(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_Booger() {
  wi::Color cppresult;
  SwigObj* result;
  
  cppresult = wi::Color::Booger();
  result = (SwigObj*)new wi::Color(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_Shadow() {
  wi::Color cppresult;
  SwigObj* result;
  
  cppresult = wi::Color::Shadow();
  result = (SwigObj*)new wi::Color(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_Warning() {
  wi::Color cppresult;
  SwigObj* result;
  
  cppresult = wi::Color::Warning();
  result = (SwigObj*)new wi::Color(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color_Error() {
  wi::Color cppresult;
  SwigObj* result;
  
  cppresult = wi::Color::Error();
  result = (SwigObj*)new wi::Color(cppresult);
  return result;
}


SWIGEXPORTC void wi_Color_delete(SwigObj* carg1) {
  wi::Color *arg1 = (wi::Color *) 0 ;
  
  arg1 = (wi::Color *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_Color16_rgba_set(SwigObj* carg1, SwigObj* carg2) {
  wi::Color16 *arg1 = (wi::Color16 *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (wi::Color16 *) carg1;
  arg2 = *(uint64_t *)carg2;
  if (arg1) (arg1)->rgba = arg2;
}


SWIGEXPORTC SwigObj* wi_Color16_rgba_get(SwigObj* carg1) {
  uint64_t cppresult;
  wi::Color16 *arg1 = (wi::Color16 *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Color16 *) carg1;
  cppresult =  ((arg1)->rgba);
  result = (SwigObj*)new uint64_t(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color16_new_uint64_t(SwigObj* carg1) {
  wi::Color16 *cppresult;
  uint64_t arg1 ;
  SwigObj* result;
  
  arg1 = *(uint64_t *)carg1;
  cppresult = (wi::Color16 *)new wi::Color16(SWIG_STD_MOVE(arg1));
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Color16_new_uint16_t_uint16_t_uint16_t_uint16_t(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  wi::Color16 *cppresult;
  uint16_t arg1 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  uint16_t arg4 ;
  SwigObj* result;
  
  arg1 = *(uint16_t *)carg1;
  arg2 = *(uint16_t *)carg2;
  arg3 = *(uint16_t *)carg3;
  arg4 = *(uint16_t *)carg4;
  cppresult = (wi::Color16 *)new wi::Color16(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Color16_new_uint16_t_uint16_t_uint16_t(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  wi::Color16 *cppresult;
  uint16_t arg1 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  SwigObj* result;
  
  arg1 = *(uint16_t *)carg1;
  arg2 = *(uint16_t *)carg2;
  arg3 = *(uint16_t *)carg3;
  cppresult = (wi::Color16 *)new wi::Color16(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Color16_new_uint16_t_uint16_t(SwigObj* carg1, SwigObj* carg2) {
  wi::Color16 *cppresult;
  uint16_t arg1 ;
  uint16_t arg2 ;
  SwigObj* result;
  
  arg1 = *(uint16_t *)carg1;
  arg2 = *(uint16_t *)carg2;
  cppresult = (wi::Color16 *)new wi::Color16(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Color16_new_uint16_t(SwigObj* carg1) {
  wi::Color16 *cppresult;
  uint16_t arg1 ;
  SwigObj* result;
  
  arg1 = *(uint16_t *)carg1;
  cppresult = (wi::Color16 *)new wi::Color16(SWIG_STD_MOVE(arg1));
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Color16_new() {
  wi::Color16 *cppresult;
  SwigObj* result;
  
  cppresult = (wi::Color16 *)new wi::Color16();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Color16_new_wi_Color(SwigObj* carg1) {
  wi::Color16 *cppresult;
  wi::Color arg1 ;
  SwigObj* result;
  
  arg1 = *(wi::Color *)carg1;
  cppresult = (wi::Color16 *)new wi::Color16(SWIG_STD_MOVE(arg1));
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Color16_getR(SwigObj* carg1) {
  uint16_t cppresult;
  wi::Color16 *arg1 = (wi::Color16 *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Color16 *) carg1;
  cppresult = ((wi::Color16 const *)arg1)->getR();
  result = (SwigObj*)new uint16_t(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color16_getG(SwigObj* carg1) {
  uint16_t cppresult;
  wi::Color16 *arg1 = (wi::Color16 *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Color16 *) carg1;
  cppresult = ((wi::Color16 const *)arg1)->getG();
  result = (SwigObj*)new uint16_t(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color16_getB(SwigObj* carg1) {
  uint16_t cppresult;
  wi::Color16 *arg1 = (wi::Color16 *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Color16 *) carg1;
  cppresult = ((wi::Color16 const *)arg1)->getB();
  result = (SwigObj*)new uint16_t(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color16_getA(SwigObj* carg1) {
  uint16_t cppresult;
  wi::Color16 *arg1 = (wi::Color16 *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Color16 *) carg1;
  cppresult = ((wi::Color16 const *)arg1)->getA();
  result = (SwigObj*)new uint16_t(cppresult);
  return result;
}


SWIGEXPORTC void wi_Color16_setR(SwigObj* carg1, SwigObj* carg2) {
  wi::Color16 *arg1 = (wi::Color16 *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (wi::Color16 *) carg1;
  arg2 = *(uint16_t *)carg2;
  (arg1)->setR(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void wi_Color16_setG(SwigObj* carg1, SwigObj* carg2) {
  wi::Color16 *arg1 = (wi::Color16 *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (wi::Color16 *) carg1;
  arg2 = *(uint16_t *)carg2;
  (arg1)->setG(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void wi_Color16_setB(SwigObj* carg1, SwigObj* carg2) {
  wi::Color16 *arg1 = (wi::Color16 *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (wi::Color16 *) carg1;
  arg2 = *(uint16_t *)carg2;
  (arg1)->setB(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void wi_Color16_setA(SwigObj* carg1, SwigObj* carg2) {
  wi::Color16 *arg1 = (wi::Color16 *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (wi::Color16 *) carg1;
  arg2 = *(uint16_t *)carg2;
  (arg1)->setA(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC SwigObj* wi_Color16_toFloat3(SwigObj* carg1) {
  XMFLOAT3 cppresult;
  wi::Color16 *arg1 = (wi::Color16 *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Color16 *) carg1;
  cppresult = ((wi::Color16 const *)arg1)->toFloat3();
  result = (SwigObj*)new XMFLOAT3(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color16_toFloat4(SwigObj* carg1) {
  XMFLOAT4 cppresult;
  wi::Color16 *arg1 = (wi::Color16 *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Color16 *) carg1;
  cppresult = ((wi::Color16 const *)arg1)->toFloat4();
  result = (SwigObj*)new XMFLOAT4(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color16_fromFloat4(SwigObj* carg1) {
  wi::Color16 cppresult;
  XMFLOAT4 *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (XMFLOAT4 *) carg1;
  
  cppresult = wi::Color16::fromFloat4((XMFLOAT4 const &)*arg1);
  result = (SwigObj*)new wi::Color16(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color16_fromFloat3(SwigObj* carg1) {
  wi::Color16 cppresult;
  XMFLOAT3 *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (XMFLOAT3 *) carg1;
  
  cppresult = wi::Color16::fromFloat3((XMFLOAT3 const &)*arg1);
  result = (SwigObj*)new wi::Color16(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Color16_lerp(SwigObj* carg1, SwigObj* carg2, float carg3) {
  wi::Color16 cppresult;
  wi::Color16 arg1 ;
  wi::Color16 arg2 ;
  float arg3 ;
  SwigObj* result;
  
  arg1 = *(wi::Color16 *)carg1;
  arg2 = *(wi::Color16 *)carg2;
  arg3 = (float) carg3;
  cppresult = wi::Color16::lerp(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3);
  result = (SwigObj*)new wi::Color16(cppresult);
  return result;
}


SWIGEXPORTC void wi_Color16_delete(SwigObj* carg1) {
  wi::Color16 *arg1 = (wi::Color16 *) 0 ;
  
  arg1 = (wi::Color16 *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_config_Section_delete(SwigObj* carg1) {
  wi::config::Section *arg1 = (wi::config::Section *) 0 ;
  
  arg1 = (wi::config::Section *) carg1;
  delete arg1;
}


SWIGEXPORTC bool wi_config_Section_Has(SwigObj* carg1, const char * carg2) {
  bool cppresult;
  wi::config::Section *arg1 = (wi::config::Section *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (wi::config::Section *) carg1;
  arg2 = (char *) carg2;
  cppresult = (bool)((wi::config::Section const *)arg1)->Has((char const *)arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_config_Section_GetBool(SwigObj* carg1, const char * carg2) {
  bool cppresult;
  wi::config::Section *arg1 = (wi::config::Section *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (wi::config::Section *) carg1;
  arg2 = (char *) carg2;
  cppresult = (bool)((wi::config::Section const *)arg1)->GetBool((char const *)arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC int wi_config_Section_GetInt(SwigObj* carg1, const char * carg2) {
  int cppresult;
  wi::config::Section *arg1 = (wi::config::Section *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (wi::config::Section *) carg1;
  arg2 = (char *) carg2;
  cppresult = (int)((wi::config::Section const *)arg1)->GetInt((char const *)arg2);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC float wi_config_Section_GetFloat(SwigObj* carg1, const char * carg2) {
  float cppresult;
  wi::config::Section *arg1 = (wi::config::Section *) 0 ;
  char *arg2 = (char *) 0 ;
  float result;
  
  arg1 = (wi::config::Section *) carg1;
  arg2 = (char *) carg2;
  cppresult = (float)((wi::config::Section const *)arg1)->GetFloat((char const *)arg2);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_config_Section_GetText(SwigObj* carg1, const char * carg2) {
  std::string cppresult;
  wi::config::Section *arg1 = (wi::config::Section *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::config::Section *) carg1;
  arg2 = (char *) carg2;
  cppresult = ((wi::config::Section const *)arg1)->GetText((char const *)arg2);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC void wi_config_Section_Set_pcc_b(SwigObj* carg1, const char * carg2, bool carg3) {
  wi::config::Section *arg1 = (wi::config::Section *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (wi::config::Section *) carg1;
  arg2 = (char *) carg2;
  arg3 = (bool) carg3;
  (arg1)->Set((char const *)arg2,arg3);
}


SWIGEXPORTC void wi_config_Section_Set_pcc_i(SwigObj* carg1, const char * carg2, int carg3) {
  wi::config::Section *arg1 = (wi::config::Section *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (wi::config::Section *) carg1;
  arg2 = (char *) carg2;
  arg3 = (int) carg3;
  (arg1)->Set((char const *)arg2,arg3);
}


SWIGEXPORTC void wi_config_Section_Set_pcc_f(SwigObj* carg1, const char * carg2, float carg3) {
  wi::config::Section *arg1 = (wi::config::Section *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  
  arg1 = (wi::config::Section *) carg1;
  arg2 = (char *) carg2;
  arg3 = (float) carg3;
  (arg1)->Set((char const *)arg2,arg3);
}


SWIGEXPORTC void wi_config_Section_Set_pcc_pcc(SwigObj* carg1, const char * carg2, const char * carg3) {
  wi::config::Section *arg1 = (wi::config::Section *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (wi::config::Section *) carg1;
  arg2 = (char *) carg2;
  arg3 = (char *) carg3;
  (arg1)->Set((char const *)arg2,(char const *)arg3);
}


SWIGEXPORTC void wi_config_Section_Set_pcc_rcstd_string(SwigObj* carg1, const char * carg2, SwigObj* carg3) {
  wi::config::Section *arg1 = (wi::config::Section *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (wi::config::Section *) carg1;
  arg2 = (char *) carg2;
  
  arg3 = (std::string *) carg3;
  
  (arg1)->Set((char const *)arg2,(std::string const &)*arg3);
}


SWIGEXPORTC SwigObj* wi_config_Section_begin(SwigObj* carg1) {
  std::unordered_map< std::string,std::string >::iterator cppresult;
  wi::config::Section *arg1 = (wi::config::Section *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::config::Section *) carg1;
  cppresult = (arg1)->begin();
  result = (SwigObj*)new std::unordered_map< std::string,std::string >::iterator(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_config_Section_begin_const(SwigObj* carg1) {
  std::unordered_map< std::string,std::string >::const_iterator cppresult;
  wi::config::Section *arg1 = (wi::config::Section *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::config::Section *) carg1;
  cppresult = ((wi::config::Section const *)arg1)->begin();
  result = (SwigObj*)new std::unordered_map< std::string,std::string >::const_iterator(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_config_Section_end(SwigObj* carg1) {
  std::unordered_map< std::string,std::string >::iterator cppresult;
  wi::config::Section *arg1 = (wi::config::Section *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::config::Section *) carg1;
  cppresult = (arg1)->end();
  result = (SwigObj*)new std::unordered_map< std::string,std::string >::iterator(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_config_Section_end_const(SwigObj* carg1) {
  std::unordered_map< std::string,std::string >::const_iterator cppresult;
  wi::config::Section *arg1 = (wi::config::Section *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::config::Section *) carg1;
  cppresult = ((wi::config::Section const *)arg1)->end();
  result = (SwigObj*)new std::unordered_map< std::string,std::string >::const_iterator(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_config_Section_new() {
  wi::config::Section *cppresult;
  SwigObj* result;
  
  cppresult = (wi::config::Section *)new wi::config::Section();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC bool wi_config_File_Open(SwigObj* carg1, const char * carg2) {
  bool cppresult;
  wi::config::File *arg1 = (wi::config::File *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (wi::config::File *) carg1;
  arg2 = (char *) carg2;
  cppresult = (bool)(arg1)->Open((char const *)arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_config_File_Commit(SwigObj* carg1) {
  wi::config::File *arg1 = (wi::config::File *) 0 ;
  
  arg1 = (wi::config::File *) carg1;
  (arg1)->Commit();
}


SWIGEXPORTC SwigObj* wi_config_File_GetSection(SwigObj* carg1, const char * carg2) {
  wi::config::Section *cppresult;
  wi::config::File *arg1 = (wi::config::File *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::config::File *) carg1;
  arg2 = (char *) carg2;
  cppresult = (wi::config::Section *) &(arg1)->GetSection((char const *)arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_config_File_begin(SwigObj* carg1) {
  SwigValueWrapper< std::unordered_map< std::string,wi::config::Section >::iterator > cppresult;
  wi::config::File *arg1 = (wi::config::File *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::config::File *) carg1;
  cppresult = (arg1)->begin();
  result = (SwigObj*)new std::unordered_map< std::string,wi::config::Section >::iterator(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_config_File_begin_const(SwigObj* carg1) {
  SwigValueWrapper< std::unordered_map< std::string,wi::config::Section >::const_iterator > cppresult;
  wi::config::File *arg1 = (wi::config::File *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::config::File *) carg1;
  cppresult = ((wi::config::File const *)arg1)->begin();
  result = (SwigObj*)new std::unordered_map< std::string,wi::config::Section >::const_iterator(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_config_File_end(SwigObj* carg1) {
  SwigValueWrapper< std::unordered_map< std::string,wi::config::Section >::iterator > cppresult;
  wi::config::File *arg1 = (wi::config::File *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::config::File *) carg1;
  cppresult = (arg1)->end();
  result = (SwigObj*)new std::unordered_map< std::string,wi::config::Section >::iterator(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_config_File_end_const(SwigObj* carg1) {
  SwigValueWrapper< std::unordered_map< std::string,wi::config::Section >::const_iterator > cppresult;
  wi::config::File *arg1 = (wi::config::File *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::config::File *) carg1;
  cppresult = ((wi::config::File const *)arg1)->end();
  result = (SwigObj*)new std::unordered_map< std::string,wi::config::Section >::const_iterator(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_config_File_new() {
  wi::config::File *cppresult;
  SwigObj* result;
  
  cppresult = (wi::config::File *)new wi::config::File();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_config_File_delete(SwigObj* carg1) {
  wi::config::File *arg1 = (wi::config::File *) 0 ;
  
  arg1 = (wi::config::File *) carg1;
  delete arg1;
}


SWIGEXPORTC bool wi_config_File_Has(SwigObj* carg1, const char * carg2) {
  bool cppresult;
  wi::config::File *arg1 = (wi::config::File *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (wi::config::File *) carg1;
  arg2 = (char *) carg2;
  cppresult = (bool)((wi::config::File const *)arg1)->Has((char const *)arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_config_File_GetBool(SwigObj* carg1, const char * carg2) {
  bool cppresult;
  wi::config::File *arg1 = (wi::config::File *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (wi::config::File *) carg1;
  arg2 = (char *) carg2;
  cppresult = (bool)((wi::config::File const *)arg1)->GetBool((char const *)arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC int wi_config_File_GetInt(SwigObj* carg1, const char * carg2) {
  int cppresult;
  wi::config::File *arg1 = (wi::config::File *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (wi::config::File *) carg1;
  arg2 = (char *) carg2;
  cppresult = (int)((wi::config::File const *)arg1)->GetInt((char const *)arg2);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC float wi_config_File_GetFloat(SwigObj* carg1, const char * carg2) {
  float cppresult;
  wi::config::File *arg1 = (wi::config::File *) 0 ;
  char *arg2 = (char *) 0 ;
  float result;
  
  arg1 = (wi::config::File *) carg1;
  arg2 = (char *) carg2;
  cppresult = (float)((wi::config::File const *)arg1)->GetFloat((char const *)arg2);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_config_File_GetText(SwigObj* carg1, const char * carg2) {
  std::string cppresult;
  wi::config::File *arg1 = (wi::config::File *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::config::File *) carg1;
  arg2 = (char *) carg2;
  cppresult = ((wi::config::File const *)arg1)->GetText((char const *)arg2);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC void wi_config_File_Set(SwigObj* carg1, const char * carg2, bool carg3) {
  wi::config::File *arg1 = (wi::config::File *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (wi::config::File *) carg1;
  arg2 = (char *) carg2;
  arg3 = (bool) carg3;
  (arg1)->Set((char const *)arg2,arg3);
}


SWIGEXPORTC int EVENT_THREAD_SAFE_POINT_get() {
  int cppresult;
  int result;
  
  cppresult = (int)wi::eventhandler::EVENT_THREAD_SAFE_POINT;
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC int EVENT_RELOAD_SHADERS_get() {
  int cppresult;
  int result;
  
  cppresult = (int)wi::eventhandler::EVENT_RELOAD_SHADERS;
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC int EVENT_SET_VSYNC_get() {
  int cppresult;
  int result;
  
  cppresult = (int)wi::eventhandler::EVENT_SET_VSYNC;
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void wi_eventhandler_Handle_internal_state_set(SwigObj* carg1, SwigObj* carg2) {
  wi::eventhandler::Handle *arg1 = (wi::eventhandler::Handle *) 0 ;
  std::shared_ptr< void > arg2 ;
  
  arg1 = (wi::eventhandler::Handle *) carg1;
  arg2 = *(std::shared_ptr< void > *)carg2;
  if (arg1) (arg1)->internal_state = arg2;
}


SWIGEXPORTC SwigObj* wi_eventhandler_Handle_internal_state_get(SwigObj* carg1) {
  std::shared_ptr< void > cppresult;
  wi::eventhandler::Handle *arg1 = (wi::eventhandler::Handle *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::eventhandler::Handle *) carg1;
  cppresult =  ((arg1)->internal_state);
  result = (SwigObj*)new std::shared_ptr< void >(cppresult);
  return result;
}


SWIGEXPORTC bool wi_eventhandler_Handle_IsValid(SwigObj* carg1) {
  bool cppresult;
  wi::eventhandler::Handle *arg1 = (wi::eventhandler::Handle *) 0 ;
  bool result;
  
  arg1 = (wi::eventhandler::Handle *) carg1;
  cppresult = (bool)((wi::eventhandler::Handle const *)arg1)->IsValid();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_eventhandler_Handle_new() {
  wi::eventhandler::Handle *cppresult;
  SwigObj* result;
  
  cppresult = (wi::eventhandler::Handle *)new wi::eventhandler::Handle();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_eventhandler_Handle_delete(SwigObj* carg1) {
  wi::eventhandler::Handle *arg1 = (wi::eventhandler::Handle *) 0 ;
  
  arg1 = (wi::eventhandler::Handle *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* wi_eventhandler_Subscribe(int carg1, SwigObj* carg2) {
  wi::eventhandler::Handle cppresult;
  int arg1 ;
  std::function< void (uint64_t) > arg2 ;
  SwigObj* result;
  
  arg1 = (int) carg1;
  arg2 = *(std::function< void (uint64_t) > *)carg2;
  cppresult = wi::eventhandler::Subscribe(arg1,SWIG_STD_MOVE(arg2));
  result = (SwigObj*)new wi::eventhandler::Handle(cppresult);
  return result;
}


SWIGEXPORTC void wi_eventhandler_Subscribe_Once(int carg1, SwigObj* carg2) {
  int arg1 ;
  std::function< void (uint64_t) > arg2 ;
  
  arg1 = (int) carg1;
  arg2 = *(std::function< void (uint64_t) > *)carg2;
  wi::eventhandler::Subscribe_Once(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void wi_eventhandler_FireEvent(int carg1, SwigObj* carg2) {
  int arg1 ;
  uint64_t arg2 ;
  
  arg1 = (int) carg1;
  arg2 = *(uint64_t *)carg2;
  wi::eventhandler::FireEvent(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void wi_eventhandler_SetVSync(bool carg1) {
  bool arg1 ;
  
  arg1 = (bool) carg1;
  wi::eventhandler::SetVSync(arg1);
}


SWIGEXPORTC void wi_FadeManager_opacity_set(SwigObj* carg1, float carg2) {
  wi::FadeManager *arg1 = (wi::FadeManager *) 0 ;
  float arg2 ;
  
  arg1 = (wi::FadeManager *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->opacity = arg2;
}


SWIGEXPORTC float wi_FadeManager_opacity_get(SwigObj* carg1) {
  float cppresult;
  wi::FadeManager *arg1 = (wi::FadeManager *) 0 ;
  float result;
  
  arg1 = (wi::FadeManager *) carg1;
  cppresult = (float) ((arg1)->opacity);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void wi_FadeManager_timer_set(SwigObj* carg1, float carg2) {
  wi::FadeManager *arg1 = (wi::FadeManager *) 0 ;
  float arg2 ;
  
  arg1 = (wi::FadeManager *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->timer = arg2;
}


SWIGEXPORTC float wi_FadeManager_timer_get(SwigObj* carg1) {
  float cppresult;
  wi::FadeManager *arg1 = (wi::FadeManager *) 0 ;
  float result;
  
  arg1 = (wi::FadeManager *) carg1;
  cppresult = (float) ((arg1)->timer);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void wi_FadeManager_targetFadeTimeInSeconds_set(SwigObj* carg1, float carg2) {
  wi::FadeManager *arg1 = (wi::FadeManager *) 0 ;
  float arg2 ;
  
  arg1 = (wi::FadeManager *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->targetFadeTimeInSeconds = arg2;
}


SWIGEXPORTC float wi_FadeManager_targetFadeTimeInSeconds_get(SwigObj* carg1) {
  float cppresult;
  wi::FadeManager *arg1 = (wi::FadeManager *) 0 ;
  float result;
  
  arg1 = (wi::FadeManager *) carg1;
  cppresult = (float) ((arg1)->targetFadeTimeInSeconds);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void wi_FadeManager_state_set(SwigObj* carg1, int carg2) {
  wi::FadeManager *arg1 = (wi::FadeManager *) 0 ;
  enum wi::FadeManager::FADE_STATE arg2 ;
  
  arg1 = (wi::FadeManager *) carg1;
  arg2 = (enum wi::FadeManager::FADE_STATE) carg2;
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORTC int wi_FadeManager_state_get(SwigObj* carg1) {
  enum wi::FadeManager::FADE_STATE cppresult;
  wi::FadeManager *arg1 = (wi::FadeManager *) 0 ;
  int result;
  
  arg1 = (wi::FadeManager *) carg1;
  cppresult = (enum wi::FadeManager::FADE_STATE) ((arg1)->state);
  result = (int) cppresult;
  return result;
}


SWIGEXPORTC void wi_FadeManager_color_set(SwigObj* carg1, SwigObj* carg2) {
  wi::FadeManager *arg1 = (wi::FadeManager *) 0 ;
  wi::Color *arg2 = (wi::Color *) 0 ;
  
  arg1 = (wi::FadeManager *) carg1;
  arg2 = (wi::Color *) carg2;
  if (arg1) (arg1)->color = *arg2;
}


SWIGEXPORTC SwigObj* wi_FadeManager_color_get(SwigObj* carg1) {
  wi::Color *cppresult;
  wi::FadeManager *arg1 = (wi::FadeManager *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::FadeManager *) carg1;
  cppresult = (wi::Color *)& ((arg1)->color);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_FadeManager_onFade_set(SwigObj* carg1, SwigObj* carg2) {
  wi::FadeManager *arg1 = (wi::FadeManager *) 0 ;
  std::function< void () > arg2 ;
  
  arg1 = (wi::FadeManager *) carg1;
  arg2 = *(std::function< void () > *)carg2;
  if (arg1) (arg1)->onFade = arg2;
}


SWIGEXPORTC SwigObj* wi_FadeManager_onFade_get(SwigObj* carg1) {
  std::function< void () > cppresult;
  wi::FadeManager *arg1 = (wi::FadeManager *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::FadeManager *) carg1;
  cppresult =  ((arg1)->onFade);
  result = (SwigObj*)new std::function< void () >(cppresult);
  return result;
}


SWIGEXPORTC void wi_FadeManager_fadeEventTriggeredThisFrame_set(SwigObj* carg1, bool carg2) {
  wi::FadeManager *arg1 = (wi::FadeManager *) 0 ;
  bool arg2 ;
  
  arg1 = (wi::FadeManager *) carg1;
  arg2 = (bool) carg2;
  if (arg1) (arg1)->fadeEventTriggeredThisFrame = arg2;
}


SWIGEXPORTC bool wi_FadeManager_fadeEventTriggeredThisFrame_get(SwigObj* carg1) {
  bool cppresult;
  wi::FadeManager *arg1 = (wi::FadeManager *) 0 ;
  bool result;
  
  arg1 = (wi::FadeManager *) carg1;
  cppresult = (bool) ((arg1)->fadeEventTriggeredThisFrame);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_FadeManager_new() {
  wi::FadeManager *cppresult;
  SwigObj* result;
  
  cppresult = (wi::FadeManager *)new wi::FadeManager();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_FadeManager_Clear(SwigObj* carg1) {
  wi::FadeManager *arg1 = (wi::FadeManager *) 0 ;
  
  arg1 = (wi::FadeManager *) carg1;
  (arg1)->Clear();
}


SWIGEXPORTC void wi_FadeManager_Start(SwigObj* carg1, float carg2, SwigObj* carg3, SwigObj* carg4) {
  wi::FadeManager *arg1 = (wi::FadeManager *) 0 ;
  float arg2 ;
  wi::Color arg3 ;
  std::function< void () > arg4 ;
  
  arg1 = (wi::FadeManager *) carg1;
  arg2 = (float) carg2;
  arg3 = *(wi::Color *)carg3;
  arg4 = *(std::function< void () > *)carg4;
  (arg1)->Start(arg2,SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
}


SWIGEXPORTC void wi_FadeManager_Update(SwigObj* carg1, float carg2) {
  wi::FadeManager *arg1 = (wi::FadeManager *) 0 ;
  float arg2 ;
  
  arg1 = (wi::FadeManager *) carg1;
  arg2 = (float) carg2;
  (arg1)->Update(arg2);
}


SWIGEXPORTC bool wi_FadeManager_IsFaded(SwigObj* carg1) {
  bool cppresult;
  wi::FadeManager *arg1 = (wi::FadeManager *) 0 ;
  bool result;
  
  arg1 = (wi::FadeManager *) carg1;
  cppresult = (bool)((wi::FadeManager const *)arg1)->IsFaded();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_FadeManager_IsActive(SwigObj* carg1) {
  bool cppresult;
  wi::FadeManager *arg1 = (wi::FadeManager *) 0 ;
  bool result;
  
  arg1 = (wi::FadeManager *) carg1;
  cppresult = (bool)((wi::FadeManager const *)arg1)->IsActive();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_FadeManager_delete(SwigObj* carg1) {
  wi::FadeManager *arg1 = (wi::FadeManager *) 0 ;
  
  arg1 = (wi::FadeManager *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_fftgenerator_fft_512x512_c2c(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  wi::graphics::GPUResource *arg1 = 0 ;
  wi::graphics::GPUResource *arg2 = 0 ;
  wi::graphics::GPUResource *arg3 = 0 ;
  wi::graphics::CommandList arg4 ;
  
  
  arg1 = (wi::graphics::GPUResource *) carg1;
  
  
  arg2 = (wi::graphics::GPUResource *) carg2;
  
  
  arg3 = (wi::graphics::GPUResource *) carg3;
  
  arg4 = *(wi::graphics::CommandList *)carg4;
  wi::fftgenerator::fft_512x512_c2c((wi::graphics::GPUResource const &)*arg1,(wi::graphics::GPUResource const &)*arg2,(wi::graphics::GPUResource const &)*arg3,SWIG_STD_MOVE(arg4));
}


SWIGEXPORTC void wi_fftgenerator_LoadShaders() {
  wi::fftgenerator::LoadShaders();
}


SWIGEXPORTC void wi_GPUBVH_bvhNodeBuffer_set(SwigObj* carg1, SwigObj* carg2) {
  wi::GPUBVH *arg1 = (wi::GPUBVH *) 0 ;
  wi::graphics::GPUBuffer arg2 ;
  
  arg1 = (wi::GPUBVH *) carg1;
  arg2 = *(wi::graphics::GPUBuffer *)carg2;
  if (arg1) (arg1)->bvhNodeBuffer = arg2;
}


SWIGEXPORTC SwigObj* wi_GPUBVH_bvhNodeBuffer_get(SwigObj* carg1) {
  wi::graphics::GPUBuffer cppresult;
  wi::GPUBVH *arg1 = (wi::GPUBVH *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::GPUBVH *) carg1;
  cppresult =  ((arg1)->bvhNodeBuffer);
  result = (SwigObj*)new wi::graphics::GPUBuffer(cppresult);
  return result;
}


SWIGEXPORTC void wi_GPUBVH_bvhParentBuffer_set(SwigObj* carg1, SwigObj* carg2) {
  wi::GPUBVH *arg1 = (wi::GPUBVH *) 0 ;
  wi::graphics::GPUBuffer arg2 ;
  
  arg1 = (wi::GPUBVH *) carg1;
  arg2 = *(wi::graphics::GPUBuffer *)carg2;
  if (arg1) (arg1)->bvhParentBuffer = arg2;
}


SWIGEXPORTC SwigObj* wi_GPUBVH_bvhParentBuffer_get(SwigObj* carg1) {
  wi::graphics::GPUBuffer cppresult;
  wi::GPUBVH *arg1 = (wi::GPUBVH *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::GPUBVH *) carg1;
  cppresult =  ((arg1)->bvhParentBuffer);
  result = (SwigObj*)new wi::graphics::GPUBuffer(cppresult);
  return result;
}


SWIGEXPORTC void wi_GPUBVH_bvhFlagBuffer_set(SwigObj* carg1, SwigObj* carg2) {
  wi::GPUBVH *arg1 = (wi::GPUBVH *) 0 ;
  wi::graphics::GPUBuffer arg2 ;
  
  arg1 = (wi::GPUBVH *) carg1;
  arg2 = *(wi::graphics::GPUBuffer *)carg2;
  if (arg1) (arg1)->bvhFlagBuffer = arg2;
}


SWIGEXPORTC SwigObj* wi_GPUBVH_bvhFlagBuffer_get(SwigObj* carg1) {
  wi::graphics::GPUBuffer cppresult;
  wi::GPUBVH *arg1 = (wi::GPUBVH *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::GPUBVH *) carg1;
  cppresult =  ((arg1)->bvhFlagBuffer);
  result = (SwigObj*)new wi::graphics::GPUBuffer(cppresult);
  return result;
}


SWIGEXPORTC void wi_GPUBVH_primitiveCounterBuffer_set(SwigObj* carg1, SwigObj* carg2) {
  wi::GPUBVH *arg1 = (wi::GPUBVH *) 0 ;
  wi::graphics::GPUBuffer arg2 ;
  
  arg1 = (wi::GPUBVH *) carg1;
  arg2 = *(wi::graphics::GPUBuffer *)carg2;
  if (arg1) (arg1)->primitiveCounterBuffer = arg2;
}


SWIGEXPORTC SwigObj* wi_GPUBVH_primitiveCounterBuffer_get(SwigObj* carg1) {
  wi::graphics::GPUBuffer cppresult;
  wi::GPUBVH *arg1 = (wi::GPUBVH *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::GPUBVH *) carg1;
  cppresult =  ((arg1)->primitiveCounterBuffer);
  result = (SwigObj*)new wi::graphics::GPUBuffer(cppresult);
  return result;
}


SWIGEXPORTC void wi_GPUBVH_primitiveIDBuffer_set(SwigObj* carg1, SwigObj* carg2) {
  wi::GPUBVH *arg1 = (wi::GPUBVH *) 0 ;
  wi::graphics::GPUBuffer arg2 ;
  
  arg1 = (wi::GPUBVH *) carg1;
  arg2 = *(wi::graphics::GPUBuffer *)carg2;
  if (arg1) (arg1)->primitiveIDBuffer = arg2;
}


SWIGEXPORTC SwigObj* wi_GPUBVH_primitiveIDBuffer_get(SwigObj* carg1) {
  wi::graphics::GPUBuffer cppresult;
  wi::GPUBVH *arg1 = (wi::GPUBVH *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::GPUBVH *) carg1;
  cppresult =  ((arg1)->primitiveIDBuffer);
  result = (SwigObj*)new wi::graphics::GPUBuffer(cppresult);
  return result;
}


SWIGEXPORTC void wi_GPUBVH_primitiveBuffer_set(SwigObj* carg1, SwigObj* carg2) {
  wi::GPUBVH *arg1 = (wi::GPUBVH *) 0 ;
  wi::graphics::GPUBuffer arg2 ;
  
  arg1 = (wi::GPUBVH *) carg1;
  arg2 = *(wi::graphics::GPUBuffer *)carg2;
  if (arg1) (arg1)->primitiveBuffer = arg2;
}


SWIGEXPORTC SwigObj* wi_GPUBVH_primitiveBuffer_get(SwigObj* carg1) {
  wi::graphics::GPUBuffer cppresult;
  wi::GPUBVH *arg1 = (wi::GPUBVH *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::GPUBVH *) carg1;
  cppresult =  ((arg1)->primitiveBuffer);
  result = (SwigObj*)new wi::graphics::GPUBuffer(cppresult);
  return result;
}


SWIGEXPORTC void wi_GPUBVH_primitiveMortonBuffer_set(SwigObj* carg1, SwigObj* carg2) {
  wi::GPUBVH *arg1 = (wi::GPUBVH *) 0 ;
  wi::graphics::GPUBuffer arg2 ;
  
  arg1 = (wi::GPUBVH *) carg1;
  arg2 = *(wi::graphics::GPUBuffer *)carg2;
  if (arg1) (arg1)->primitiveMortonBuffer = arg2;
}


SWIGEXPORTC SwigObj* wi_GPUBVH_primitiveMortonBuffer_get(SwigObj* carg1) {
  wi::graphics::GPUBuffer cppresult;
  wi::GPUBVH *arg1 = (wi::GPUBVH *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::GPUBVH *) carg1;
  cppresult =  ((arg1)->primitiveMortonBuffer);
  result = (SwigObj*)new wi::graphics::GPUBuffer(cppresult);
  return result;
}


SWIGEXPORTC void wi_GPUBVH_primitiveCapacity_set(SwigObj* carg1, SwigObj* carg2) {
  wi::GPUBVH *arg1 = (wi::GPUBVH *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (wi::GPUBVH *) carg1;
  arg2 = *(uint32_t *)carg2;
  if (arg1) (arg1)->primitiveCapacity = arg2;
}


SWIGEXPORTC SwigObj* wi_GPUBVH_primitiveCapacity_get(SwigObj* carg1) {
  uint32_t cppresult;
  wi::GPUBVH *arg1 = (wi::GPUBVH *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::GPUBVH *) carg1;
  cppresult =  ((arg1)->primitiveCapacity);
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC bool wi_GPUBVH_IsValid(SwigObj* carg1) {
  bool cppresult;
  wi::GPUBVH *arg1 = (wi::GPUBVH *) 0 ;
  bool result;
  
  arg1 = (wi::GPUBVH *) carg1;
  cppresult = (bool)((wi::GPUBVH const *)arg1)->IsValid();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_GPUBVH_Update(SwigObj* carg1, SwigObj* carg2) {
  wi::GPUBVH *arg1 = (wi::GPUBVH *) 0 ;
  wi::scene::Scene *arg2 = 0 ;
  
  arg1 = (wi::GPUBVH *) carg1;
  
  arg2 = (wi::scene::Scene *) carg2;
  
  (arg1)->Update((wi::scene::Scene const &)*arg2);
}


SWIGEXPORTC void wi_GPUBVH_Build(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  wi::GPUBVH *arg1 = (wi::GPUBVH *) 0 ;
  wi::scene::Scene *arg2 = 0 ;
  wi::graphics::CommandList arg3 ;
  
  arg1 = (wi::GPUBVH *) carg1;
  
  arg2 = (wi::scene::Scene *) carg2;
  
  arg3 = *(wi::graphics::CommandList *)carg3;
  ((wi::GPUBVH const *)arg1)->Build((wi::scene::Scene const &)*arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORTC void wi_GPUBVH_Clear(SwigObj* carg1) {
  wi::GPUBVH *arg1 = (wi::GPUBVH *) 0 ;
  
  arg1 = (wi::GPUBVH *) carg1;
  (arg1)->Clear();
}


SWIGEXPORTC void wi_GPUBVH_Initialize() {
  wi::GPUBVH::Initialize();
}


SWIGEXPORTC SwigObj* wi_GPUBVH_new() {
  wi::GPUBVH *cppresult;
  SwigObj* result;
  
  cppresult = (wi::GPUBVH *)new wi::GPUBVH();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_GPUBVH_delete(SwigObj* carg1) {
  wi::GPUBVH *arg1 = (wi::GPUBVH *) 0 ;
  
  arg1 = (wi::GPUBVH *) carg1;
  delete arg1;
}


SWIGEXPORTC size_t wi_helper_string_hash(const char * carg1) {
  size_t cppresult;
  char *arg1 = (char *) 0 ;
  size_t result;
  
  arg1 = (char *) carg1;
  cppresult = wi::helper::string_hash((char const *)arg1);
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_helper_toUpper(SwigObj* carg1) {
  std::string cppresult;
  std::string *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::string *) carg1;
  
  cppresult = wi::helper::toUpper((std::string const &)*arg1);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_helper_toLower(SwigObj* carg1) {
  std::string cppresult;
  std::string *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::string *) carg1;
  
  cppresult = wi::helper::toLower((std::string const &)*arg1);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC void wi_helper_messageBox_rcstd_string_rcstd_string(SwigObj* carg1, SwigObj* carg2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  
  arg1 = (std::string *) carg1;
  
  
  arg2 = (std::string *) carg2;
  
  wi::helper::messageBox((std::string const &)*arg1,(std::string const &)*arg2);
}


SWIGEXPORTC void wi_helper_messageBox_rcstd_string(SwigObj* carg1) {
  std::string *arg1 = 0 ;
  
  
  arg1 = (std::string *) carg1;
  
  wi::helper::messageBox((std::string const &)*arg1);
}


SWIGEXPORTC SwigObj* wi_helper_screenshot_rcwi_graphics_SwapChain_rcstd_string(SwigObj* carg1, SwigObj* carg2) {
  std::string cppresult;
  wi::graphics::SwapChain *arg1 = 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;
  
  
  arg1 = (wi::graphics::SwapChain *) carg1;
  
  
  arg2 = (std::string *) carg2;
  
  cppresult = wi::helper::screenshot((wi::graphics::SwapChain const &)*arg1,(std::string const &)*arg2);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_helper_screenshot_rcwi_graphics_SwapChain(SwigObj* carg1) {
  std::string cppresult;
  wi::graphics::SwapChain *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (wi::graphics::SwapChain *) carg1;
  
  cppresult = wi::helper::screenshot((wi::graphics::SwapChain const &)*arg1);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC bool wi_helper_saveTextureToMemory(SwigObj* carg1, SwigObj* carg2) {
  bool cppresult;
  wi::graphics::Texture *arg1 = 0 ;
  wi::vector< uint8_t,std::allocator< uint8_t > > *arg2 = 0 ;
  bool result;
  
  
  arg1 = (wi::graphics::Texture *) carg1;
  
  
  arg2 = (wi::vector< uint8_t,std::allocator< uint8_t > > *) carg2;
  
  cppresult = (bool)wi::helper::saveTextureToMemory((wi::graphics::Texture const &)*arg1,*arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_helper_saveTextureToMemoryFile_rcwi_graphics_Texture_rcstd_string_rwi_vector_Sl_uint8_t_Sc_std_allocator_Sl_uint8_t_Sg__Sg_(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  bool cppresult;
  wi::graphics::Texture *arg1 = 0 ;
  std::string *arg2 = 0 ;
  wi::vector< uint8_t,std::allocator< uint8_t > > *arg3 = 0 ;
  bool result;
  
  
  arg1 = (wi::graphics::Texture *) carg1;
  
  
  arg2 = (std::string *) carg2;
  
  
  arg3 = (wi::vector< uint8_t,std::allocator< uint8_t > > *) carg3;
  
  cppresult = (bool)wi::helper::saveTextureToMemoryFile((wi::graphics::Texture const &)*arg1,(std::string const &)*arg2,*arg3);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_helper_saveTextureToMemoryFile_rcwi_vector_Sl_uint8_t_Sc_std_allocator_Sl_uint8_t_Sg__Sg__rcwi_graphics_TextureDesc_rcstd_string_rwi_vector_Sl_uint8_t_Sc_std_allocator_Sl_uint8_t_Sg__Sg_(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  bool cppresult;
  wi::vector< uint8_t,std::allocator< uint8_t > > *arg1 = 0 ;
  wi::graphics::TextureDesc *arg2 = 0 ;
  std::string *arg3 = 0 ;
  wi::vector< uint8_t,std::allocator< uint8_t > > *arg4 = 0 ;
  bool result;
  
  
  arg1 = (wi::vector< uint8_t,std::allocator< uint8_t > > *) carg1;
  
  
  arg2 = (wi::graphics::TextureDesc *) carg2;
  
  
  arg3 = (std::string *) carg3;
  
  
  arg4 = (wi::vector< uint8_t,std::allocator< uint8_t > > *) carg4;
  
  cppresult = (bool)wi::helper::saveTextureToMemoryFile((wi::vector< uint8_t,std::allocator< uint8_t > > const &)*arg1,(wi::graphics::TextureDesc const &)*arg2,(std::string const &)*arg3,*arg4);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_helper_saveTextureToFile_rcwi_graphics_Texture_rcstd_string(SwigObj* carg1, SwigObj* carg2) {
  bool cppresult;
  wi::graphics::Texture *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  
  arg1 = (wi::graphics::Texture *) carg1;
  
  
  arg2 = (std::string *) carg2;
  
  cppresult = (bool)wi::helper::saveTextureToFile((wi::graphics::Texture const &)*arg1,(std::string const &)*arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_helper_saveTextureToFile_rcwi_vector_Sl_uint8_t_Sc_std_allocator_Sl_uint8_t_Sg__Sg__rcwi_graphics_TextureDesc_rcstd_string(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  bool cppresult;
  wi::vector< uint8_t,std::allocator< uint8_t > > *arg1 = 0 ;
  wi::graphics::TextureDesc *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  
  arg1 = (wi::vector< uint8_t,std::allocator< uint8_t > > *) carg1;
  
  
  arg2 = (wi::graphics::TextureDesc *) carg2;
  
  
  arg3 = (std::string *) carg3;
  
  cppresult = (bool)wi::helper::saveTextureToFile((wi::vector< uint8_t,std::allocator< uint8_t > > const &)*arg1,(wi::graphics::TextureDesc const &)*arg2,(std::string const &)*arg3);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_helper_getCurrentDateTimeAsString() {
  std::string cppresult;
  SwigObj* result;
  
  cppresult = wi::helper::getCurrentDateTimeAsString();
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC void wi_helper_SplitPath(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  
  arg1 = (std::string *) carg1;
  
  
  arg2 = (std::string *) carg2;
  
  
  arg3 = (std::string *) carg3;
  
  wi::helper::SplitPath((std::string const &)*arg1,*arg2,*arg3);
}


SWIGEXPORTC SwigObj* wi_helper_GetFileNameFromPath(SwigObj* carg1) {
  std::string cppresult;
  std::string *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::string *) carg1;
  
  cppresult = wi::helper::GetFileNameFromPath((std::string const &)*arg1);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_helper_GetDirectoryFromPath(SwigObj* carg1) {
  std::string cppresult;
  std::string *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::string *) carg1;
  
  cppresult = wi::helper::GetDirectoryFromPath((std::string const &)*arg1);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_helper_GetExtensionFromFileName(SwigObj* carg1) {
  std::string cppresult;
  std::string *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::string *) carg1;
  
  cppresult = wi::helper::GetExtensionFromFileName((std::string const &)*arg1);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_helper_ReplaceExtension(SwigObj* carg1, SwigObj* carg2) {
  std::string cppresult;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::string *) carg1;
  
  
  arg2 = (std::string *) carg2;
  
  cppresult = wi::helper::ReplaceExtension((std::string const &)*arg1,(std::string const &)*arg2);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_helper_ForceExtension(SwigObj* carg1, SwigObj* carg2) {
  std::string cppresult;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::string *) carg1;
  
  
  arg2 = (std::string *) carg2;
  
  cppresult = wi::helper::ForceExtension((std::string const &)*arg1,(std::string const &)*arg2);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_helper_RemoveExtension(SwigObj* carg1) {
  std::string cppresult;
  std::string *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::string *) carg1;
  
  cppresult = wi::helper::RemoveExtension((std::string const &)*arg1);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_helper_GetPathRelative(SwigObj* carg1, SwigObj* carg2) {
  std::string cppresult;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::string *) carg1;
  
  
  arg2 = (std::string *) carg2;
  
  cppresult = wi::helper::GetPathRelative((std::string const &)*arg1,(std::string const &)*arg2);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC void wi_helper_MakePathRelative(SwigObj* carg1, SwigObj* carg2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  
  arg1 = (std::string *) carg1;
  
  
  arg2 = (std::string *) carg2;
  
  wi::helper::MakePathRelative((std::string const &)*arg1,*arg2);
}


SWIGEXPORTC void wi_helper_MakePathAbsolute(SwigObj* carg1) {
  std::string *arg1 = 0 ;
  
  
  arg1 = (std::string *) carg1;
  
  wi::helper::MakePathAbsolute(*arg1);
}


SWIGEXPORTC void wi_helper_DirectoryCreate(SwigObj* carg1) {
  std::string *arg1 = 0 ;
  
  
  arg1 = (std::string *) carg1;
  
  wi::helper::DirectoryCreate((std::string const &)*arg1);
}


SWIGEXPORTC bool wi_helper_FileRead_rcstd_string_rwi_vector_Sl_uint8_t_Sc_std_allocator_Sl_uint8_t_Sg__Sg__size_t_size_t(SwigObj* carg1, SwigObj* carg2, size_t carg3, size_t carg4) {
  bool cppresult;
  std::string *arg1 = 0 ;
  wi::vector< uint8_t,std::allocator< uint8_t > > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  bool result;
  
  
  arg1 = (std::string *) carg1;
  
  
  arg2 = (wi::vector< uint8_t,std::allocator< uint8_t > > *) carg2;
  
  arg3 = (size_t) carg3;
  arg4 = (size_t) carg4;
  cppresult = (bool)wi::helper::FileRead((std::string const &)*arg1,*arg2,SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_helper_FileRead_rcstd_string_rwi_vector_Sl_uint8_t_Sc_std_allocator_Sl_uint8_t_Sg__Sg__size_t(SwigObj* carg1, SwigObj* carg2, size_t carg3) {
  bool cppresult;
  std::string *arg1 = 0 ;
  wi::vector< uint8_t,std::allocator< uint8_t > > *arg2 = 0 ;
  size_t arg3 ;
  bool result;
  
  
  arg1 = (std::string *) carg1;
  
  
  arg2 = (wi::vector< uint8_t,std::allocator< uint8_t > > *) carg2;
  
  arg3 = (size_t) carg3;
  cppresult = (bool)wi::helper::FileRead((std::string const &)*arg1,*arg2,SWIG_STD_MOVE(arg3));
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_helper_FileRead_rcstd_string_rwi_vector_Sl_uint8_t_Sc_std_allocator_Sl_uint8_t_Sg__Sg_(SwigObj* carg1, SwigObj* carg2) {
  bool cppresult;
  std::string *arg1 = 0 ;
  wi::vector< uint8_t,std::allocator< uint8_t > > *arg2 = 0 ;
  bool result;
  
  
  arg1 = (std::string *) carg1;
  
  
  arg2 = (wi::vector< uint8_t,std::allocator< uint8_t > > *) carg2;
  
  cppresult = (bool)wi::helper::FileRead((std::string const &)*arg1,*arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_helper_FileWrite(SwigObj* carg1, SwigObj* carg2, size_t carg3) {
  bool cppresult;
  std::string *arg1 = 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  size_t arg3 ;
  bool result;
  
  
  arg1 = (std::string *) carg1;
  
  arg2 = (uint8_t *) carg2;
  arg3 = (size_t) carg3;
  cppresult = (bool)wi::helper::FileWrite((std::string const &)*arg1,(uint8_t const *)arg2,SWIG_STD_MOVE(arg3));
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_helper_FileExists(SwigObj* carg1) {
  bool cppresult;
  std::string *arg1 = 0 ;
  bool result;
  
  
  arg1 = (std::string *) carg1;
  
  cppresult = (bool)wi::helper::FileExists((std::string const &)*arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_helper_DirectoryExists(SwigObj* carg1) {
  bool cppresult;
  std::string *arg1 = 0 ;
  bool result;
  
  
  arg1 = (std::string *) carg1;
  
  cppresult = (bool)wi::helper::DirectoryExists((std::string const &)*arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_helper_FileTimestamp(SwigObj* carg1) {
  uint64_t cppresult;
  std::string *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::string *) carg1;
  
  cppresult = wi::helper::FileTimestamp((std::string const &)*arg1);
  result = (SwigObj*)new uint64_t(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_helper_GetTempDirectoryPath() {
  std::string cppresult;
  SwigObj* result;
  
  cppresult = wi::helper::GetTempDirectoryPath();
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_helper_GetCacheDirectoryPath() {
  std::string cppresult;
  SwigObj* result;
  
  cppresult = wi::helper::GetCacheDirectoryPath();
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_helper_GetCurrentPath() {
  std::string cppresult;
  SwigObj* result;
  
  cppresult = wi::helper::GetCurrentPath();
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC void wi_helper_FileDialogParams_type_set(SwigObj* carg1, int carg2) {
  wi::helper::FileDialogParams *arg1 = (wi::helper::FileDialogParams *) 0 ;
  enum wi::helper::FileDialogParams::TYPE arg2 ;
  
  arg1 = (wi::helper::FileDialogParams *) carg1;
  arg2 = (enum wi::helper::FileDialogParams::TYPE) carg2;
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORTC int wi_helper_FileDialogParams_type_get(SwigObj* carg1) {
  enum wi::helper::FileDialogParams::TYPE cppresult;
  wi::helper::FileDialogParams *arg1 = (wi::helper::FileDialogParams *) 0 ;
  int result;
  
  arg1 = (wi::helper::FileDialogParams *) carg1;
  cppresult = (enum wi::helper::FileDialogParams::TYPE) ((arg1)->type);
  result = (int) cppresult;
  return result;
}


SWIGEXPORTC void wi_helper_FileDialogParams_description_set(SwigObj* carg1, SwigObj* carg2) {
  wi::helper::FileDialogParams *arg1 = (wi::helper::FileDialogParams *) 0 ;
  std::string arg2 ;
  
  arg1 = (wi::helper::FileDialogParams *) carg1;
  arg2 = *(std::string *)carg2;
  if (arg1) (arg1)->description = arg2;
}


SWIGEXPORTC SwigObj* wi_helper_FileDialogParams_description_get(SwigObj* carg1) {
  std::string cppresult;
  wi::helper::FileDialogParams *arg1 = (wi::helper::FileDialogParams *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::helper::FileDialogParams *) carg1;
  cppresult =  ((arg1)->description);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC void wi_helper_FileDialogParams_extensions_set(SwigObj* carg1, SwigObj* carg2) {
  wi::helper::FileDialogParams *arg1 = (wi::helper::FileDialogParams *) 0 ;
  wi::vector< std::string,std::allocator< std::string > > *arg2 = (wi::vector< std::string,std::allocator< std::string > > *) 0 ;
  
  arg1 = (wi::helper::FileDialogParams *) carg1;
  arg2 = (wi::vector< std::string,std::allocator< std::string > > *) carg2;
  if (arg1) (arg1)->extensions = *arg2;
}


SWIGEXPORTC SwigObj* wi_helper_FileDialogParams_extensions_get(SwigObj* carg1) {
  wi::vector< std::string,std::allocator< std::string > > *cppresult;
  wi::helper::FileDialogParams *arg1 = (wi::helper::FileDialogParams *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::helper::FileDialogParams *) carg1;
  cppresult = (wi::vector< std::string,std::allocator< std::string > > *)& ((arg1)->extensions);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_helper_FileDialogParams_new() {
  wi::helper::FileDialogParams *cppresult;
  SwigObj* result;
  
  cppresult = (wi::helper::FileDialogParams *)new wi::helper::FileDialogParams();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_helper_FileDialogParams_delete(SwigObj* carg1) {
  wi::helper::FileDialogParams *arg1 = (wi::helper::FileDialogParams *) 0 ;
  
  arg1 = (wi::helper::FileDialogParams *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_helper_FileDialog(SwigObj* carg1, SwigObj* carg2) {
  wi::helper::FileDialogParams *arg1 = 0 ;
  std::function< void (std::string) > arg2 ;
  
  
  arg1 = (wi::helper::FileDialogParams *) carg1;
  
  arg2 = *(std::function< void (std::string) > *)carg2;
  wi::helper::FileDialog((wi::helper::FileDialogParams const &)*arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void wi_helper_GetFileNamesInDirectory_rcstd_string_std_function_Sl_void_Sp_std_string_SP__Sg__rcstd_string(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  std::string *arg1 = 0 ;
  std::function< void (std::string) > arg2 ;
  std::string *arg3 = 0 ;
  
  
  arg1 = (std::string *) carg1;
  
  arg2 = *(std::function< void (std::string) > *)carg2;
  
  arg3 = (std::string *) carg3;
  
  wi::helper::GetFileNamesInDirectory((std::string const &)*arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
}


SWIGEXPORTC void wi_helper_GetFileNamesInDirectory_rcstd_string_std_function_Sl_void_Sp_std_string_SP__Sg_(SwigObj* carg1, SwigObj* carg2) {
  std::string *arg1 = 0 ;
  std::function< void (std::string) > arg2 ;
  
  
  arg1 = (std::string *) carg1;
  
  arg2 = *(std::function< void (std::string) > *)carg2;
  wi::helper::GetFileNamesInDirectory((std::string const &)*arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void wi_helper_GetFolderNamesInDirectory(SwigObj* carg1, SwigObj* carg2) {
  std::string *arg1 = 0 ;
  std::function< void (std::string) > arg2 ;
  
  
  arg1 = (std::string *) carg1;
  
  arg2 = *(std::function< void (std::string) > *)carg2;
  wi::helper::GetFolderNamesInDirectory((std::string const &)*arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool wi_helper_Bin2H(SwigObj* carg1, size_t carg2, SwigObj* carg3, const char * carg4) {
  bool cppresult;
  uint8_t *arg1 = (uint8_t *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  arg1 = (uint8_t *) carg1;
  arg2 = (size_t) carg2;
  
  arg3 = (std::string *) carg3;
  
  arg4 = (char *) carg4;
  cppresult = (bool)wi::helper::Bin2H((uint8_t const *)arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3,(char const *)arg4);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_helper_StringConvert_rcstd_string_rstd_wstring(SwigObj* carg1, SwigObj* carg2) {
  std::string *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  
  
  arg1 = (std::string *) carg1;
  
  
  arg2 = (std::wstring *) carg2;
  
  wi::helper::StringConvert((std::string const &)*arg1,*arg2);
}


SWIGEXPORTC void wi_helper_StringConvert_rcstd_wstring_rstd_string(SwigObj* carg1, SwigObj* carg2) {
  std::wstring *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  
  arg1 = (std::wstring *) carg1;
  
  
  arg2 = (std::string *) carg2;
  
  wi::helper::StringConvert((std::wstring const &)*arg1,*arg2);
}


SWIGEXPORTC int wi_helper_StringConvert_pcc_pwchar_t_i(const char * carg1, SwigObj* carg2, int carg3) {
  int cppresult;
  char *arg1 = (char *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (char *) carg1;
  arg2 = (wchar_t *) carg2;
  arg3 = (int) carg3;
  cppresult = (int)wi::helper::StringConvert((char const *)arg1,arg2,arg3);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC int wi_helper_StringConvert_pcc_pwchar_t(const char * carg1, SwigObj* carg2) {
  int cppresult;
  char *arg1 = (char *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  int result;
  
  arg1 = (char *) carg1;
  arg2 = (wchar_t *) carg2;
  cppresult = (int)wi::helper::StringConvert((char const *)arg1,arg2);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC int wi_helper_StringConvert_pcwchar_t_pc_i(SwigObj* carg1, char * carg2, int carg3) {
  int cppresult;
  wchar_t *arg1 = (wchar_t *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (wchar_t *) carg1;
  arg2 = (char *) carg2;
  arg3 = (int) carg3;
  cppresult = (int)wi::helper::StringConvert((wchar_t const *)arg1,arg2,arg3);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC int wi_helper_StringConvert_pcwchar_t_pc(SwigObj* carg1, char * carg2) {
  int cppresult;
  wchar_t *arg1 = (wchar_t *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (wchar_t *) carg1;
  arg2 = (char *) carg2;
  cppresult = (int)wi::helper::StringConvert((wchar_t const *)arg1,arg2);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void wi_helper_DebugOut_rcstd_string_eDebugLevel(SwigObj* carg1, int carg2) {
  std::string *arg1 = 0 ;
  wi::helper::DebugLevel arg2 ;
  
  
  arg1 = (std::string *) carg1;
  
  arg2 = (wi::helper::DebugLevel) carg2;
  wi::helper::DebugOut((std::string const &)*arg1,arg2);
}


SWIGEXPORTC void wi_helper_DebugOut_rcstd_string(SwigObj* carg1) {
  std::string *arg1 = 0 ;
  
  
  arg1 = (std::string *) carg1;
  
  wi::helper::DebugOut((std::string const &)*arg1);
}


SWIGEXPORTC void wi_helper_Sleep(float carg1) {
  float arg1 ;
  
  arg1 = (float) carg1;
  wi::helper::Sleep(arg1);
}


SWIGEXPORTC void wi_helper_Spin(float carg1) {
  float arg1 ;
  
  arg1 = (float) carg1;
  wi::helper::Spin(arg1);
}


SWIGEXPORTC void wi_helper_QuickSleep(float carg1) {
  float arg1 ;
  
  arg1 = (float) carg1;
  wi::helper::QuickSleep(arg1);
}


SWIGEXPORTC void wi_helper_OpenUrl(SwigObj* carg1) {
  std::string *arg1 = 0 ;
  
  
  arg1 = (std::string *) carg1;
  
  wi::helper::OpenUrl((std::string const &)*arg1);
}


SWIGEXPORTC void wi_helper_MemoryUsage_total_physical_set(SwigObj* carg1, SwigObj* carg2) {
  wi::helper::MemoryUsage *arg1 = (wi::helper::MemoryUsage *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (wi::helper::MemoryUsage *) carg1;
  arg2 = *(uint64_t *)carg2;
  if (arg1) (arg1)->total_physical = arg2;
}


SWIGEXPORTC SwigObj* wi_helper_MemoryUsage_total_physical_get(SwigObj* carg1) {
  uint64_t cppresult;
  wi::helper::MemoryUsage *arg1 = (wi::helper::MemoryUsage *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::helper::MemoryUsage *) carg1;
  cppresult =  ((arg1)->total_physical);
  result = (SwigObj*)new uint64_t(cppresult);
  return result;
}


SWIGEXPORTC void wi_helper_MemoryUsage_total_virtual_set(SwigObj* carg1, SwigObj* carg2) {
  wi::helper::MemoryUsage *arg1 = (wi::helper::MemoryUsage *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (wi::helper::MemoryUsage *) carg1;
  arg2 = *(uint64_t *)carg2;
  if (arg1) (arg1)->total_virtual = arg2;
}


SWIGEXPORTC SwigObj* wi_helper_MemoryUsage_total_virtual_get(SwigObj* carg1) {
  uint64_t cppresult;
  wi::helper::MemoryUsage *arg1 = (wi::helper::MemoryUsage *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::helper::MemoryUsage *) carg1;
  cppresult =  ((arg1)->total_virtual);
  result = (SwigObj*)new uint64_t(cppresult);
  return result;
}


SWIGEXPORTC void wi_helper_MemoryUsage_process_physical_set(SwigObj* carg1, SwigObj* carg2) {
  wi::helper::MemoryUsage *arg1 = (wi::helper::MemoryUsage *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (wi::helper::MemoryUsage *) carg1;
  arg2 = *(uint64_t *)carg2;
  if (arg1) (arg1)->process_physical = arg2;
}


SWIGEXPORTC SwigObj* wi_helper_MemoryUsage_process_physical_get(SwigObj* carg1) {
  uint64_t cppresult;
  wi::helper::MemoryUsage *arg1 = (wi::helper::MemoryUsage *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::helper::MemoryUsage *) carg1;
  cppresult =  ((arg1)->process_physical);
  result = (SwigObj*)new uint64_t(cppresult);
  return result;
}


SWIGEXPORTC void wi_helper_MemoryUsage_process_virtual_set(SwigObj* carg1, SwigObj* carg2) {
  wi::helper::MemoryUsage *arg1 = (wi::helper::MemoryUsage *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (wi::helper::MemoryUsage *) carg1;
  arg2 = *(uint64_t *)carg2;
  if (arg1) (arg1)->process_virtual = arg2;
}


SWIGEXPORTC SwigObj* wi_helper_MemoryUsage_process_virtual_get(SwigObj* carg1) {
  uint64_t cppresult;
  wi::helper::MemoryUsage *arg1 = (wi::helper::MemoryUsage *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::helper::MemoryUsage *) carg1;
  cppresult =  ((arg1)->process_virtual);
  result = (SwigObj*)new uint64_t(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_helper_MemoryUsage_new() {
  wi::helper::MemoryUsage *cppresult;
  SwigObj* result;
  
  cppresult = (wi::helper::MemoryUsage *)new wi::helper::MemoryUsage();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_helper_MemoryUsage_delete(SwigObj* carg1) {
  wi::helper::MemoryUsage *arg1 = (wi::helper::MemoryUsage *) 0 ;
  
  arg1 = (wi::helper::MemoryUsage *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* wi_helper_GetMemoryUsage() {
  wi::helper::MemoryUsage cppresult;
  SwigObj* result;
  
  cppresult = wi::helper::GetMemoryUsage();
  result = (SwigObj*)new wi::helper::MemoryUsage(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_helper_GetMemorySizeText(size_t carg1) {
  std::string cppresult;
  size_t arg1 ;
  SwigObj* result;
  
  arg1 = (size_t) carg1;
  cppresult = wi::helper::GetMemorySizeText(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_helper_GetTimerDurationText(float carg1) {
  std::string cppresult;
  float arg1 ;
  SwigObj* result;
  
  arg1 = (float) carg1;
  cppresult = wi::helper::GetTimerDurationText(arg1);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_helper_GetPlatformErrorString(SwigObj* carg1) {
  std::string cppresult;
  wi::platform::error_type arg1 ;
  SwigObj* result;
  
  arg1 = *(wi::platform::error_type *)carg1;
  cppresult = wi::helper::GetPlatformErrorString(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC bool wi_helper_Compress(SwigObj* carg1, size_t carg2, SwigObj* carg3) {
  bool cppresult;
  uint8_t *arg1 = (uint8_t *) 0 ;
  size_t arg2 ;
  wi::vector< uint8_t,std::allocator< uint8_t > > *arg3 = 0 ;
  bool result;
  
  arg1 = (uint8_t *) carg1;
  arg2 = (size_t) carg2;
  
  arg3 = (wi::vector< uint8_t,std::allocator< uint8_t > > *) carg3;
  
  cppresult = (bool)wi::helper::Compress((uint8_t const *)arg1,SWIG_STD_MOVE(arg2),*arg3);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_helper_Decompress(SwigObj* carg1, size_t carg2, SwigObj* carg3) {
  bool cppresult;
  uint8_t *arg1 = (uint8_t *) 0 ;
  size_t arg2 ;
  wi::vector< uint8_t,std::allocator< uint8_t > > *arg3 = 0 ;
  bool result;
  
  arg1 = (uint8_t *) carg1;
  arg2 = (size_t) carg2;
  
  arg3 = (wi::vector< uint8_t,std::allocator< uint8_t > > *) carg3;
  
  cppresult = (bool)wi::helper::Decompress((uint8_t const *)arg1,SWIG_STD_MOVE(arg2),*arg3);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_initializer_InitializeComponentsImmediate() {
  wi::initializer::InitializeComponentsImmediate();
}


SWIGEXPORTC void wi_initializer_InitializeComponentsAsync() {
  wi::initializer::InitializeComponentsAsync();
}


SWIGEXPORTC bool wi_initializer_IsInitializeFinished_eINITIALIZED_SYSTEM(int carg1) {
  bool cppresult;
  wi::initializer::INITIALIZED_SYSTEM arg1 ;
  bool result;
  
  arg1 = (wi::initializer::INITIALIZED_SYSTEM) carg1;
  cppresult = (bool)wi::initializer::IsInitializeFinished(arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_initializer_IsInitializeFinished() {
  bool cppresult;
  bool result;
  
  cppresult = (bool)wi::initializer::IsInitializeFinished();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_initializer_WaitForInitializationsToFinish() {
  wi::initializer::WaitForInitializationsToFinish();
}


SWIGEXPORTC void wi_jobsystem_Initialize_uint32_t(SwigObj* carg1) {
  uint32_t arg1 ;
  
  arg1 = *(uint32_t *)carg1;
  wi::jobsystem::Initialize(SWIG_STD_MOVE(arg1));
}


SWIGEXPORTC void wi_jobsystem_Initialize() {
  wi::jobsystem::Initialize();
}


SWIGEXPORTC void wi_jobsystem_ShutDown() {
  wi::jobsystem::ShutDown();
}


SWIGEXPORTC void wi_jobsystem_JobArgs_jobIndex_set(SwigObj* carg1, SwigObj* carg2) {
  wi::jobsystem::JobArgs *arg1 = (wi::jobsystem::JobArgs *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (wi::jobsystem::JobArgs *) carg1;
  arg2 = *(uint32_t *)carg2;
  if (arg1) (arg1)->jobIndex = arg2;
}


SWIGEXPORTC SwigObj* wi_jobsystem_JobArgs_jobIndex_get(SwigObj* carg1) {
  uint32_t cppresult;
  wi::jobsystem::JobArgs *arg1 = (wi::jobsystem::JobArgs *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::jobsystem::JobArgs *) carg1;
  cppresult =  ((arg1)->jobIndex);
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC void wi_jobsystem_JobArgs_groupID_set(SwigObj* carg1, SwigObj* carg2) {
  wi::jobsystem::JobArgs *arg1 = (wi::jobsystem::JobArgs *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (wi::jobsystem::JobArgs *) carg1;
  arg2 = *(uint32_t *)carg2;
  if (arg1) (arg1)->groupID = arg2;
}


SWIGEXPORTC SwigObj* wi_jobsystem_JobArgs_groupID_get(SwigObj* carg1) {
  uint32_t cppresult;
  wi::jobsystem::JobArgs *arg1 = (wi::jobsystem::JobArgs *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::jobsystem::JobArgs *) carg1;
  cppresult =  ((arg1)->groupID);
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC void wi_jobsystem_JobArgs_groupIndex_set(SwigObj* carg1, SwigObj* carg2) {
  wi::jobsystem::JobArgs *arg1 = (wi::jobsystem::JobArgs *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (wi::jobsystem::JobArgs *) carg1;
  arg2 = *(uint32_t *)carg2;
  if (arg1) (arg1)->groupIndex = arg2;
}


SWIGEXPORTC SwigObj* wi_jobsystem_JobArgs_groupIndex_get(SwigObj* carg1) {
  uint32_t cppresult;
  wi::jobsystem::JobArgs *arg1 = (wi::jobsystem::JobArgs *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::jobsystem::JobArgs *) carg1;
  cppresult =  ((arg1)->groupIndex);
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC void wi_jobsystem_JobArgs_isFirstJobInGroup_set(SwigObj* carg1, bool carg2) {
  wi::jobsystem::JobArgs *arg1 = (wi::jobsystem::JobArgs *) 0 ;
  bool arg2 ;
  
  arg1 = (wi::jobsystem::JobArgs *) carg1;
  arg2 = (bool) carg2;
  if (arg1) (arg1)->isFirstJobInGroup = arg2;
}


SWIGEXPORTC bool wi_jobsystem_JobArgs_isFirstJobInGroup_get(SwigObj* carg1) {
  bool cppresult;
  wi::jobsystem::JobArgs *arg1 = (wi::jobsystem::JobArgs *) 0 ;
  bool result;
  
  arg1 = (wi::jobsystem::JobArgs *) carg1;
  cppresult = (bool) ((arg1)->isFirstJobInGroup);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_jobsystem_JobArgs_isLastJobInGroup_set(SwigObj* carg1, bool carg2) {
  wi::jobsystem::JobArgs *arg1 = (wi::jobsystem::JobArgs *) 0 ;
  bool arg2 ;
  
  arg1 = (wi::jobsystem::JobArgs *) carg1;
  arg2 = (bool) carg2;
  if (arg1) (arg1)->isLastJobInGroup = arg2;
}


SWIGEXPORTC bool wi_jobsystem_JobArgs_isLastJobInGroup_get(SwigObj* carg1) {
  bool cppresult;
  wi::jobsystem::JobArgs *arg1 = (wi::jobsystem::JobArgs *) 0 ;
  bool result;
  
  arg1 = (wi::jobsystem::JobArgs *) carg1;
  cppresult = (bool) ((arg1)->isLastJobInGroup);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_jobsystem_JobArgs_sharedmemory_set(SwigObj* carg1, void * carg2) {
  wi::jobsystem::JobArgs *arg1 = (wi::jobsystem::JobArgs *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (wi::jobsystem::JobArgs *) carg1;
  arg2 = (void *) carg2;
  if (arg1) (arg1)->sharedmemory = arg2;
}


SWIGEXPORTC void * wi_jobsystem_JobArgs_sharedmemory_get(SwigObj* carg1) {
  void *cppresult;
  wi::jobsystem::JobArgs *arg1 = (wi::jobsystem::JobArgs *) 0 ;
  void * result;
  
  arg1 = (wi::jobsystem::JobArgs *) carg1;
  cppresult = (void *) ((arg1)->sharedmemory);
  result = (void *)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_jobsystem_JobArgs_new() {
  wi::jobsystem::JobArgs *cppresult;
  SwigObj* result;
  
  cppresult = (wi::jobsystem::JobArgs *)new wi::jobsystem::JobArgs();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_jobsystem_JobArgs_delete(SwigObj* carg1) {
  wi::jobsystem::JobArgs *arg1 = (wi::jobsystem::JobArgs *) 0 ;
  
  arg1 = (wi::jobsystem::JobArgs *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_jobsystem_context_counter_set(SwigObj* carg1, long carg2) {
  wi::jobsystem::context *arg1 = (wi::jobsystem::context *) 0 ;
  long arg2 ;
  
  arg1 = (wi::jobsystem::context *) carg1;
  arg2 = (long) carg2;
  if (arg1) (arg1)->counter = (long volatile )arg2;
}


SWIGEXPORTC long wi_jobsystem_context_counter_get(SwigObj* carg1) {
  long cppresult;
  wi::jobsystem::context *arg1 = (wi::jobsystem::context *) 0 ;
  long result;
  
  arg1 = (wi::jobsystem::context *) carg1;
  cppresult = (long)(long) ((arg1)->counter);
  result = (long)cppresult;
  return result;
}


SWIGEXPORTC void wi_jobsystem_context_priority_set(SwigObj* carg1, int carg2) {
  wi::jobsystem::context *arg1 = (wi::jobsystem::context *) 0 ;
  enum wi::jobsystem::Priority arg2 ;
  
  arg1 = (wi::jobsystem::context *) carg1;
  arg2 = (enum wi::jobsystem::Priority) carg2;
  if (arg1) (arg1)->priority = arg2;
}


SWIGEXPORTC int wi_jobsystem_context_priority_get(SwigObj* carg1) {
  enum wi::jobsystem::Priority cppresult;
  wi::jobsystem::context *arg1 = (wi::jobsystem::context *) 0 ;
  int result;
  
  arg1 = (wi::jobsystem::context *) carg1;
  cppresult = (enum wi::jobsystem::Priority) ((arg1)->priority);
  result = (int) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_jobsystem_context_new() {
  wi::jobsystem::context *cppresult;
  SwigObj* result;
  
  cppresult = (wi::jobsystem::context *)new wi::jobsystem::context();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_jobsystem_context_delete(SwigObj* carg1) {
  wi::jobsystem::context *arg1 = (wi::jobsystem::context *) 0 ;
  
  arg1 = (wi::jobsystem::context *) carg1;
  delete arg1;
}


SWIGEXPORTC SwigObj* wi_jobsystem_GetThreadCount_ePriority(int carg1) {
  uint32_t cppresult;
  wi::jobsystem::Priority arg1 ;
  SwigObj* result;
  
  arg1 = (wi::jobsystem::Priority) carg1;
  cppresult = wi::jobsystem::GetThreadCount(arg1);
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_jobsystem_GetThreadCount() {
  uint32_t cppresult;
  SwigObj* result;
  
  cppresult = wi::jobsystem::GetThreadCount();
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC void wi_jobsystem_Execute(SwigObj* carg1, SwigObj* carg2) {
  wi::jobsystem::context *arg1 = 0 ;
  std::function< void (wi::jobsystem::JobArgs) > *arg2 = 0 ;
  
  
  arg1 = (wi::jobsystem::context *) carg1;
  
  
  arg2 = (std::function< void (wi::jobsystem::JobArgs) > *) carg2;
  
  wi::jobsystem::Execute(*arg1,(std::function< void (wi::jobsystem::JobArgs) > const &)*arg2);
}


SWIGEXPORTC void wi_jobsystem_Dispatch_rwi_jobsystem_context_uint32_t_uint32_t_rcstd_function_Sl_void_Sp_wi_jobsystem_JobArgs_SP__Sg__size_t(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4, size_t carg5) {
  wi::jobsystem::context *arg1 = 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  std::function< void (wi::jobsystem::JobArgs) > *arg4 = 0 ;
  size_t arg5 ;
  
  
  arg1 = (wi::jobsystem::context *) carg1;
  
  arg2 = *(uint32_t *)carg2;
  arg3 = *(uint32_t *)carg3;
  
  arg4 = (std::function< void (wi::jobsystem::JobArgs) > *) carg4;
  
  arg5 = (size_t) carg5;
  wi::jobsystem::Dispatch(*arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::function< void (wi::jobsystem::JobArgs) > const &)*arg4,SWIG_STD_MOVE(arg5));
}


SWIGEXPORTC void wi_jobsystem_Dispatch_rwi_jobsystem_context_uint32_t_uint32_t_rcstd_function_Sl_void_Sp_wi_jobsystem_JobArgs_SP__Sg_(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, SwigObj* carg4) {
  wi::jobsystem::context *arg1 = 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  std::function< void (wi::jobsystem::JobArgs) > *arg4 = 0 ;
  
  
  arg1 = (wi::jobsystem::context *) carg1;
  
  arg2 = *(uint32_t *)carg2;
  arg3 = *(uint32_t *)carg3;
  
  arg4 = (std::function< void (wi::jobsystem::JobArgs) > *) carg4;
  
  wi::jobsystem::Dispatch(*arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::function< void (wi::jobsystem::JobArgs) > const &)*arg4);
}


SWIGEXPORTC SwigObj* wi_jobsystem_DispatchGroupCount(SwigObj* carg1, SwigObj* carg2) {
  uint32_t cppresult;
  uint32_t arg1 ;
  uint32_t arg2 ;
  SwigObj* result;
  
  arg1 = *(uint32_t *)carg1;
  arg2 = *(uint32_t *)carg2;
  cppresult = wi::jobsystem::DispatchGroupCount(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC bool wi_jobsystem_IsBusy(SwigObj* carg1) {
  bool cppresult;
  wi::jobsystem::context *arg1 = 0 ;
  bool result;
  
  
  arg1 = (wi::jobsystem::context *) carg1;
  
  cppresult = (bool)wi::jobsystem::IsBusy((wi::jobsystem::context const &)*arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_jobsystem_Wait(SwigObj* carg1) {
  wi::jobsystem::context *arg1 = 0 ;
  
  
  arg1 = (wi::jobsystem::context *) carg1;
  
  wi::jobsystem::Wait((wi::jobsystem::context const &)*arg1);
}


SWIGEXPORTC void wi_LoadingScreen_backgroundTexture_set(SwigObj* carg1, SwigObj* carg2) {
  wi::LoadingScreen *arg1 = (wi::LoadingScreen *) 0 ;
  wi::Resource arg2 ;
  
  arg1 = (wi::LoadingScreen *) carg1;
  arg2 = *(wi::Resource *)carg2;
  if (arg1) (arg1)->backgroundTexture = arg2;
}


SWIGEXPORTC SwigObj* wi_LoadingScreen_backgroundTexture_get(SwigObj* carg1) {
  wi::Resource cppresult;
  wi::LoadingScreen *arg1 = (wi::LoadingScreen *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::LoadingScreen *) carg1;
  cppresult =  ((arg1)->backgroundTexture);
  result = (SwigObj*)new wi::Resource(cppresult);
  return result;
}


SWIGEXPORTC void wi_LoadingScreen_background_mode_set(SwigObj* carg1, int carg2) {
  wi::LoadingScreen *arg1 = (wi::LoadingScreen *) 0 ;
  enum wi::LoadingScreen::BackgroundMode arg2 ;
  
  arg1 = (wi::LoadingScreen *) carg1;
  arg2 = (enum wi::LoadingScreen::BackgroundMode) carg2;
  if (arg1) (arg1)->background_mode = arg2;
}


SWIGEXPORTC int wi_LoadingScreen_background_mode_get(SwigObj* carg1) {
  enum wi::LoadingScreen::BackgroundMode cppresult;
  wi::LoadingScreen *arg1 = (wi::LoadingScreen *) 0 ;
  int result;
  
  arg1 = (wi::LoadingScreen *) carg1;
  cppresult = (enum wi::LoadingScreen::BackgroundMode) ((arg1)->background_mode);
  result = (int) cppresult;
  return result;
}


SWIGEXPORTC void wi_LoadingScreen_addLoadingFunction(SwigObj* carg1, SwigObj* carg2) {
  wi::LoadingScreen *arg1 = (wi::LoadingScreen *) 0 ;
  SwigValueWrapper< std::function< void (wi::jobsystem::JobArgs) > > arg2 ;
  
  arg1 = (wi::LoadingScreen *) carg1;
  arg2 = *(std::function< void (wi::jobsystem::JobArgs) > *)carg2;
  (arg1)->addLoadingFunction(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void wi_LoadingScreen_addLoadingComponent_pwi_RenderPath_pwi_Application_f_wi_Color(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, float carg4, SwigObj* carg5) {
  wi::LoadingScreen *arg1 = (wi::LoadingScreen *) 0 ;
  wi::RenderPath *arg2 = (wi::RenderPath *) 0 ;
  wi::Application *arg3 = (wi::Application *) 0 ;
  float arg4 ;
  wi::Color arg5 ;
  
  arg1 = (wi::LoadingScreen *) carg1;
  arg2 = (wi::RenderPath *) carg2;
  arg3 = (wi::Application *) carg3;
  arg4 = (float) carg4;
  arg5 = *(wi::Color *)carg5;
  (arg1)->addLoadingComponent(arg2,arg3,arg4,SWIG_STD_MOVE(arg5));
}


SWIGEXPORTC void wi_LoadingScreen_addLoadingComponent_pwi_RenderPath_pwi_Application_f(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3, float carg4) {
  wi::LoadingScreen *arg1 = (wi::LoadingScreen *) 0 ;
  wi::RenderPath *arg2 = (wi::RenderPath *) 0 ;
  wi::Application *arg3 = (wi::Application *) 0 ;
  float arg4 ;
  
  arg1 = (wi::LoadingScreen *) carg1;
  arg2 = (wi::RenderPath *) carg2;
  arg3 = (wi::Application *) carg3;
  arg4 = (float) carg4;
  (arg1)->addLoadingComponent(arg2,arg3,arg4);
}


SWIGEXPORTC void wi_LoadingScreen_addLoadingComponent_pwi_RenderPath_pwi_Application(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  wi::LoadingScreen *arg1 = (wi::LoadingScreen *) 0 ;
  wi::RenderPath *arg2 = (wi::RenderPath *) 0 ;
  wi::Application *arg3 = (wi::Application *) 0 ;
  
  arg1 = (wi::LoadingScreen *) carg1;
  arg2 = (wi::RenderPath *) carg2;
  arg3 = (wi::Application *) carg3;
  (arg1)->addLoadingComponent(arg2,arg3);
}


SWIGEXPORTC void wi_LoadingScreen_onFinished(SwigObj* carg1, SwigObj* carg2) {
  wi::LoadingScreen *arg1 = (wi::LoadingScreen *) 0 ;
  std::function< void () > arg2 ;
  
  arg1 = (wi::LoadingScreen *) carg1;
  arg2 = *(std::function< void () > *)carg2;
  (arg1)->onFinished(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC bool wi_LoadingScreen_isActive(SwigObj* carg1) {
  bool cppresult;
  wi::LoadingScreen *arg1 = (wi::LoadingScreen *) 0 ;
  bool result;
  
  arg1 = (wi::LoadingScreen *) carg1;
  cppresult = (bool)((wi::LoadingScreen const *)arg1)->isActive();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_LoadingScreen_isFinished(SwigObj* carg1) {
  bool cppresult;
  wi::LoadingScreen *arg1 = (wi::LoadingScreen *) 0 ;
  bool result;
  
  arg1 = (wi::LoadingScreen *) carg1;
  cppresult = (bool)((wi::LoadingScreen const *)arg1)->isFinished();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC int wi_LoadingScreen_getProgress(SwigObj* carg1) {
  int cppresult;
  wi::LoadingScreen *arg1 = (wi::LoadingScreen *) 0 ;
  int result;
  
  arg1 = (wi::LoadingScreen *) carg1;
  cppresult = (int)((wi::LoadingScreen const *)arg1)->getProgress();
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void wi_LoadingScreen_Start(SwigObj* carg1) {
  wi::LoadingScreen *arg1 = (wi::LoadingScreen *) 0 ;
  
  arg1 = (wi::LoadingScreen *) carg1;
  (arg1)->Start();
}


SWIGEXPORTC void wi_LoadingScreen_Compose(SwigObj* carg1, SwigObj* carg2) {
  wi::LoadingScreen *arg1 = (wi::LoadingScreen *) 0 ;
  wi::graphics::CommandList arg2 ;
  
  arg1 = (wi::LoadingScreen *) carg1;
  arg2 = *(wi::graphics::CommandList *)carg2;
  ((wi::LoadingScreen const *)arg1)->Compose(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC SwigObj* wi_LoadingScreen_new() {
  wi::LoadingScreen *cppresult;
  SwigObj* result;
  
  cppresult = (wi::LoadingScreen *)new wi::LoadingScreen();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_LoadingScreen_delete(SwigObj* carg1) {
  wi::LoadingScreen *arg1 = (wi::LoadingScreen *) 0 ;
  
  arg1 = (wi::LoadingScreen *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_Localization_entries_set(SwigObj* carg1, SwigObj* carg2) {
  wi::Localization *arg1 = (wi::Localization *) 0 ;
  wi::vector< wi::Localization::Entry,std::allocator< wi::Localization::Entry > > *arg2 = (wi::vector< wi::Localization::Entry,std::allocator< wi::Localization::Entry > > *) 0 ;
  
  arg1 = (wi::Localization *) carg1;
  arg2 = (wi::vector< wi::Localization::Entry,std::allocator< wi::Localization::Entry > > *) carg2;
  if (arg1) (arg1)->entries = *arg2;
}


SWIGEXPORTC SwigObj* wi_Localization_entries_get(SwigObj* carg1) {
  wi::vector< wi::Localization::Entry,std::allocator< wi::Localization::Entry > > *cppresult;
  wi::Localization *arg1 = (wi::Localization *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Localization *) carg1;
  cppresult = (wi::vector< wi::Localization::Entry,std::allocator< wi::Localization::Entry > > *)& ((arg1)->entries);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_Localization_lookup_set(SwigObj* carg1, SwigObj* carg2) {
  wi::Localization *arg1 = (wi::Localization *) 0 ;
  wi::unordered_map< size_t,size_t,std::hash< size_t >,std::equal_to< size_t >,std::allocator< std::pair< size_t const,size_t > > > *arg2 = (wi::unordered_map< size_t,size_t,std::hash< size_t >,std::equal_to< size_t >,std::allocator< std::pair< size_t const,size_t > > > *) 0 ;
  
  arg1 = (wi::Localization *) carg1;
  arg2 = (wi::unordered_map< size_t,size_t,std::hash< size_t >,std::equal_to< size_t >,std::allocator< std::pair< size_t const,size_t > > > *) carg2;
  if (arg1) (arg1)->lookup = *arg2;
}


SWIGEXPORTC SwigObj* wi_Localization_lookup_get(SwigObj* carg1) {
  wi::unordered_map< size_t,size_t,std::hash< size_t >,std::equal_to< size_t >,std::allocator< std::pair< size_t const,size_t > > > *cppresult;
  wi::Localization *arg1 = (wi::Localization *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Localization *) carg1;
  cppresult = (wi::unordered_map< size_t,size_t,std::hash< size_t >,std::equal_to< size_t >,std::allocator< std::pair< size_t const,size_t > > > *)& ((arg1)->lookup);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_Localization_sections_set(SwigObj* carg1, SwigObj* carg2) {
  wi::Localization *arg1 = (wi::Localization *) 0 ;
  wi::unordered_map< std::string,wi::Localization,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,wi::Localization > > > *arg2 = (wi::unordered_map< std::string,wi::Localization,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,wi::Localization > > > *) 0 ;
  
  arg1 = (wi::Localization *) carg1;
  arg2 = (wi::unordered_map< std::string,wi::Localization,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,wi::Localization > > > *) carg2;
  if (arg1) (arg1)->sections = *arg2;
}


SWIGEXPORTC SwigObj* wi_Localization_sections_get(SwigObj* carg1) {
  wi::unordered_map< std::string,wi::Localization,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,wi::Localization > > > *cppresult;
  wi::Localization *arg1 = (wi::Localization *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Localization *) carg1;
  cppresult = (wi::unordered_map< std::string,wi::Localization,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,wi::Localization > > > *)& ((arg1)->sections);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_Localization_section_hint_set(SwigObj* carg1, SwigObj* carg2) {
  wi::Localization *arg1 = (wi::Localization *) 0 ;
  std::string arg2 ;
  
  arg1 = (wi::Localization *) carg1;
  arg2 = *(std::string *)carg2;
  if (arg1) (arg1)->section_hint = arg2;
}


SWIGEXPORTC SwigObj* wi_Localization_section_hint_get(SwigObj* carg1) {
  std::string cppresult;
  wi::Localization *arg1 = (wi::Localization *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Localization *) carg1;
  cppresult =  ((arg1)->section_hint);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC bool wi_Localization_IsValid(SwigObj* carg1) {
  bool cppresult;
  wi::Localization *arg1 = (wi::Localization *) 0 ;
  bool result;
  
  arg1 = (wi::Localization *) carg1;
  cppresult = (bool)((wi::Localization const *)arg1)->IsValid();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Localization_GetSection_pcc(SwigObj* carg1, const char * carg2) {
  wi::Localization *cppresult;
  wi::Localization *arg1 = (wi::Localization *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Localization *) carg1;
  arg2 = (char *) carg2;
  cppresult = (wi::Localization *) &(arg1)->GetSection((char const *)arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Localization_GetSection_rcstd_string(SwigObj* carg1, SwigObj* carg2) {
  wi::Localization *cppresult;
  wi::Localization *arg1 = (wi::Localization *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (wi::Localization *) carg1;
  
  arg2 = (std::string *) carg2;
  
  cppresult = (wi::Localization *) &(arg1)->GetSection((std::string const &)*arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Localization_CheckSection_pcc(SwigObj* carg1, const char * carg2) {
  wi::Localization *cppresult;
  wi::Localization *arg1 = (wi::Localization *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Localization *) carg1;
  arg2 = (char *) carg2;
  cppresult = (wi::Localization *)((wi::Localization const *)arg1)->CheckSection((char const *)arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Localization_CheckSection_rcstd_string(SwigObj* carg1, SwigObj* carg2) {
  wi::Localization *cppresult;
  wi::Localization *arg1 = (wi::Localization *) 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (wi::Localization *) carg1;
  
  arg2 = (std::string *) carg2;
  
  cppresult = (wi::Localization *)((wi::Localization const *)arg1)->CheckSection((std::string const &)*arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_Localization_SetSectionHint_pcc(SwigObj* carg1, const char * carg2) {
  wi::Localization *arg1 = (wi::Localization *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (wi::Localization *) carg1;
  arg2 = (char *) carg2;
  (arg1)->SetSectionHint((char const *)arg2);
}


SWIGEXPORTC void wi_Localization_SetSectionHint_rcstd_string(SwigObj* carg1, SwigObj* carg2) {
  wi::Localization *arg1 = (wi::Localization *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (wi::Localization *) carg1;
  
  arg2 = (std::string *) carg2;
  
  (arg1)->SetSectionHint((std::string const &)*arg2);
}


SWIGEXPORTC void wi_Localization_Add_size_t_pcc_pcc(SwigObj* carg1, size_t carg2, const char * carg3, const char * carg4) {
  wi::Localization *arg1 = (wi::Localization *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (wi::Localization *) carg1;
  arg2 = (size_t) carg2;
  arg3 = (char *) carg3;
  arg4 = (char *) carg4;
  (arg1)->Add(SWIG_STD_MOVE(arg2),(char const *)arg3,(char const *)arg4);
}


SWIGEXPORTC void wi_Localization_Add_size_t_pcc(SwigObj* carg1, size_t carg2, const char * carg3) {
  wi::Localization *arg1 = (wi::Localization *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (wi::Localization *) carg1;
  arg2 = (size_t) carg2;
  arg3 = (char *) carg3;
  (arg1)->Add(SWIG_STD_MOVE(arg2),(char const *)arg3);
}


SWIGEXPORTC const char * wi_Localization_Get(SwigObj* carg1, size_t carg2) {
  char *cppresult;
  wi::Localization *arg1 = (wi::Localization *) 0 ;
  size_t arg2 ;
  const char * result;
  
  arg1 = (wi::Localization *) carg1;
  arg2 = (size_t) carg2;
  cppresult = (char *)((wi::Localization const *)arg1)->Get(SWIG_STD_MOVE(arg2));
  result = (const char *)cppresult;
  return result;
}


SWIGEXPORTC bool wi_Localization_Import(SwigObj* carg1, SwigObj* carg2) {
  bool cppresult;
  wi::Localization *arg1 = (wi::Localization *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (wi::Localization *) carg1;
  
  arg2 = (std::string *) carg2;
  
  cppresult = (bool)(arg1)->Import((std::string const &)*arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_Localization_Export(SwigObj* carg1, SwigObj* carg2) {
  bool cppresult;
  wi::Localization *arg1 = (wi::Localization *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (wi::Localization *) carg1;
  
  arg2 = (std::string *) carg2;
  
  cppresult = (bool)((wi::Localization const *)arg1)->Export((std::string const &)*arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Localization_new() {
  wi::Localization *cppresult;
  SwigObj* result;
  
  cppresult = (wi::Localization *)new wi::Localization();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_Localization_delete(SwigObj* carg1) {
  wi::Localization *arg1 = (wi::Localization *) 0 ;
  
  arg1 = (wi::Localization *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_network_Socket_internal_state_set(SwigObj* carg1, SwigObj* carg2) {
  wi::network::Socket *arg1 = (wi::network::Socket *) 0 ;
  std::shared_ptr< void > arg2 ;
  
  arg1 = (wi::network::Socket *) carg1;
  arg2 = *(std::shared_ptr< void > *)carg2;
  if (arg1) (arg1)->internal_state = arg2;
}


SWIGEXPORTC SwigObj* wi_network_Socket_internal_state_get(SwigObj* carg1) {
  std::shared_ptr< void > cppresult;
  wi::network::Socket *arg1 = (wi::network::Socket *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::network::Socket *) carg1;
  cppresult =  ((arg1)->internal_state);
  result = (SwigObj*)new std::shared_ptr< void >(cppresult);
  return result;
}


SWIGEXPORTC bool wi_network_Socket_IsValid(SwigObj* carg1) {
  bool cppresult;
  wi::network::Socket *arg1 = (wi::network::Socket *) 0 ;
  bool result;
  
  arg1 = (wi::network::Socket *) carg1;
  cppresult = (bool)((wi::network::Socket const *)arg1)->IsValid();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_network_Socket_new() {
  wi::network::Socket *cppresult;
  SwigObj* result;
  
  cppresult = (wi::network::Socket *)new wi::network::Socket();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_network_Socket_delete(SwigObj* carg1) {
  wi::network::Socket *arg1 = (wi::network::Socket *) 0 ;
  
  arg1 = (wi::network::Socket *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_network_Connection_ipaddress_set(SwigObj* carg1, SwigObj* carg2) {
  wi::network::Connection *arg1 = (wi::network::Connection *) 0 ;
  std::array< uint8_t,4 > arg2 ;
  
  arg1 = (wi::network::Connection *) carg1;
  arg2 = *(std::array< uint8_t,4 > *)carg2;
  if (arg1) (arg1)->ipaddress = arg2;
}


SWIGEXPORTC SwigObj* wi_network_Connection_ipaddress_get(SwigObj* carg1) {
  std::array< uint8_t,4 > cppresult;
  wi::network::Connection *arg1 = (wi::network::Connection *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::network::Connection *) carg1;
  cppresult =  ((arg1)->ipaddress);
  result = (SwigObj*)new std::array< uint8_t,4 >(cppresult);
  return result;
}


SWIGEXPORTC void wi_network_Connection_port_set(SwigObj* carg1, SwigObj* carg2) {
  wi::network::Connection *arg1 = (wi::network::Connection *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (wi::network::Connection *) carg1;
  arg2 = *(uint16_t *)carg2;
  if (arg1) (arg1)->port = arg2;
}


SWIGEXPORTC SwigObj* wi_network_Connection_port_get(SwigObj* carg1) {
  uint16_t cppresult;
  wi::network::Connection *arg1 = (wi::network::Connection *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::network::Connection *) carg1;
  cppresult =  ((arg1)->port);
  result = (SwigObj*)new uint16_t(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_network_Connection_new() {
  wi::network::Connection *cppresult;
  SwigObj* result;
  
  cppresult = (wi::network::Connection *)new wi::network::Connection();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_network_Connection_delete(SwigObj* carg1) {
  wi::network::Connection *arg1 = (wi::network::Connection *) 0 ;
  
  arg1 = (wi::network::Connection *) carg1;
  delete arg1;
}


SWIGEXPORTC bool wi_network_CreateSocket(SwigObj* carg1) {
  bool cppresult;
  wi::network::Socket *arg1 = (wi::network::Socket *) 0 ;
  bool result;
  
  arg1 = (wi::network::Socket *) carg1;
  cppresult = (bool)wi::network::CreateSocket(arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_network_Send(SwigObj* carg1, SwigObj* carg2, const void * carg3, size_t carg4) {
  bool cppresult;
  wi::network::Socket *arg1 = (wi::network::Socket *) 0 ;
  wi::network::Connection *arg2 = (wi::network::Connection *) 0 ;
  void *arg3 = (void *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (wi::network::Socket *) carg1;
  arg2 = (wi::network::Connection *) carg2;
  arg3 = (void *) carg3;
  arg4 = (size_t) carg4;
  cppresult = (bool)wi::network::Send((wi::network::Socket const *)arg1,(wi::network::Connection const *)arg2,(void const *)arg3,SWIG_STD_MOVE(arg4));
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_network_ListenPort_pcwi_network_Socket_uint16_t(SwigObj* carg1, SwigObj* carg2) {
  bool cppresult;
  wi::network::Socket *arg1 = (wi::network::Socket *) 0 ;
  uint16_t arg2 ;
  bool result;
  
  arg1 = (wi::network::Socket *) carg1;
  arg2 = *(uint16_t *)carg2;
  cppresult = (bool)wi::network::ListenPort((wi::network::Socket const *)arg1,SWIG_STD_MOVE(arg2));
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_network_ListenPort_pcwi_network_Socket(SwigObj* carg1) {
  bool cppresult;
  wi::network::Socket *arg1 = (wi::network::Socket *) 0 ;
  bool result;
  
  arg1 = (wi::network::Socket *) carg1;
  cppresult = (bool)wi::network::ListenPort((wi::network::Socket const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_network_CanReceive_pcwi_network_Socket_l(SwigObj* carg1, long carg2) {
  bool cppresult;
  wi::network::Socket *arg1 = (wi::network::Socket *) 0 ;
  long arg2 ;
  bool result;
  
  arg1 = (wi::network::Socket *) carg1;
  arg2 = (long) carg2;
  cppresult = (bool)wi::network::CanReceive((wi::network::Socket const *)arg1,arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_network_CanReceive_pcwi_network_Socket(SwigObj* carg1) {
  bool cppresult;
  wi::network::Socket *arg1 = (wi::network::Socket *) 0 ;
  bool result;
  
  arg1 = (wi::network::Socket *) carg1;
  cppresult = (bool)wi::network::CanReceive((wi::network::Socket const *)arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_network_Receive(SwigObj* carg1, SwigObj* carg2, void * carg3, size_t carg4) {
  bool cppresult;
  wi::network::Socket *arg1 = (wi::network::Socket *) 0 ;
  wi::network::Connection *arg2 = (wi::network::Connection *) 0 ;
  void *arg3 = (void *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (wi::network::Socket *) carg1;
  arg2 = (wi::network::Connection *) carg2;
  arg3 = (void *) carg3;
  arg4 = (size_t) carg4;
  cppresult = (bool)wi::network::Receive((wi::network::Socket const *)arg1,arg2,arg3,SWIG_STD_MOVE(arg4));
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_Ocean_Create(SwigObj* carg1, SwigObj* carg2) {
  wi::Ocean *arg1 = (wi::Ocean *) 0 ;
  wi::Ocean::OceanParameters *arg2 = 0 ;
  
  arg1 = (wi::Ocean *) carg1;
  
  arg2 = (wi::Ocean::OceanParameters *) carg2;
  
  (arg1)->Create((wi::Ocean::OceanParameters const &)*arg2);
}


SWIGEXPORTC void wi_Ocean_UpdateDisplacementMap(SwigObj* carg1, SwigObj* carg2) {
  wi::Ocean *arg1 = (wi::Ocean *) 0 ;
  wi::graphics::CommandList arg2 ;
  
  arg1 = (wi::Ocean *) carg1;
  arg2 = *(wi::graphics::CommandList *)carg2;
  ((wi::Ocean const *)arg1)->UpdateDisplacementMap(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void wi_Ocean_RenderForOcclusionTest(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  wi::Ocean *arg1 = (wi::Ocean *) 0 ;
  wi::scene::CameraComponent *arg2 = 0 ;
  wi::graphics::CommandList arg3 ;
  
  arg1 = (wi::Ocean *) carg1;
  
  arg2 = (wi::scene::CameraComponent *) carg2;
  
  arg3 = *(wi::graphics::CommandList *)carg3;
  ((wi::Ocean const *)arg1)->RenderForOcclusionTest((wi::scene::CameraComponent const &)*arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORTC void wi_Ocean_Render(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  wi::Ocean *arg1 = (wi::Ocean *) 0 ;
  wi::scene::CameraComponent *arg2 = 0 ;
  wi::graphics::CommandList arg3 ;
  
  arg1 = (wi::Ocean *) carg1;
  
  arg2 = (wi::scene::CameraComponent *) carg2;
  
  arg3 = *(wi::graphics::CommandList *)carg3;
  ((wi::Ocean const *)arg1)->Render((wi::scene::CameraComponent const &)*arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORTC void wi_Ocean_CopyDisplacementMapReadback(SwigObj* carg1, SwigObj* carg2) {
  wi::Ocean *arg1 = (wi::Ocean *) 0 ;
  wi::graphics::CommandList arg2 ;
  
  arg1 = (wi::Ocean *) carg1;
  arg2 = *(wi::graphics::CommandList *)carg2;
  ((wi::Ocean const *)arg1)->CopyDisplacementMapReadback(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC SwigObj* wi_Ocean_getDisplacementMap(SwigObj* carg1) {
  wi::graphics::Texture *cppresult;
  wi::Ocean *arg1 = (wi::Ocean *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Ocean *) carg1;
  cppresult = (wi::graphics::Texture *)((wi::Ocean const *)arg1)->getDisplacementMap();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Ocean_getGradientMap(SwigObj* carg1) {
  wi::graphics::Texture *cppresult;
  wi::Ocean *arg1 = (wi::Ocean *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Ocean *) carg1;
  cppresult = (wi::graphics::Texture *)((wi::Ocean const *)arg1)->getGradientMap();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_Ocean_Initialize() {
  wi::Ocean::Initialize();
}


SWIGEXPORTC bool wi_Ocean_IsValid(SwigObj* carg1) {
  bool cppresult;
  wi::Ocean *arg1 = (wi::Ocean *) 0 ;
  bool result;
  
  arg1 = (wi::Ocean *) carg1;
  cppresult = (bool)((wi::Ocean const *)arg1)->IsValid();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_Ocean_occlusionHistory_set(SwigObj* carg1, SwigObj* carg2) {
  wi::Ocean *arg1 = (wi::Ocean *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (wi::Ocean *) carg1;
  arg2 = *(uint32_t *)carg2;
  if (arg1) (arg1)->occlusionHistory = arg2;
}


SWIGEXPORTC SwigObj* wi_Ocean_occlusionHistory_get(SwigObj* carg1) {
  uint32_t cppresult;
  wi::Ocean *arg1 = (wi::Ocean *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Ocean *) carg1;
  cppresult =  ((arg1)->occlusionHistory);
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC void wi_Ocean_occlusionQueries_set(SwigObj* carg1, int * carg2) {
  wi::Ocean *arg1 = (wi::Ocean *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (wi::Ocean *) carg1;
  arg2 = (int *) carg2;
  {
    size_t ii;
    int *b = (int *) arg1->occlusionQueries;
    for (ii = 0; ii < (size_t)wi::graphics::GraphicsDevice::GetBufferCount(); ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORTC int * wi_Ocean_occlusionQueries_get(SwigObj* carg1) {
  int *cppresult;
  wi::Ocean *arg1 = (wi::Ocean *) 0 ;
  int * result;
  
  arg1 = (wi::Ocean *) carg1;
  cppresult = (int *)(int *) ((arg1)->occlusionQueries);
  result = (int *)cppresult;
  return result;
}


SWIGEXPORTC bool wi_Ocean_IsOccluded(SwigObj* carg1) {
  bool cppresult;
  wi::Ocean *arg1 = (wi::Ocean *) 0 ;
  bool result;
  
  arg1 = (wi::Ocean *) carg1;
  cppresult = (bool)((wi::Ocean const *)arg1)->IsOccluded();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Ocean_GetDisplacedPosition(SwigObj* carg1, SwigObj* carg2) {
  XMFLOAT3 cppresult;
  wi::Ocean *arg1 = (wi::Ocean *) 0 ;
  XMFLOAT3 *arg2 = 0 ;
  SwigObj* result;
  
  arg1 = (wi::Ocean *) carg1;
  
  arg2 = (XMFLOAT3 *) carg2;
  
  cppresult = ((wi::Ocean const *)arg1)->GetDisplacedPosition((XMFLOAT3 const &)*arg2);
  result = (SwigObj*)new XMFLOAT3(cppresult);
  return result;
}


SWIGEXPORTC void wi_Ocean_params_set(SwigObj* carg1, SwigObj* carg2) {
  wi::Ocean *arg1 = (wi::Ocean *) 0 ;
  wi::Ocean::OceanParameters *arg2 = (wi::Ocean::OceanParameters *) 0 ;
  
  arg1 = (wi::Ocean *) carg1;
  arg2 = (wi::Ocean::OceanParameters *) carg2;
  if (arg1) (arg1)->params = *arg2;
}


SWIGEXPORTC SwigObj* wi_Ocean_params_get(SwigObj* carg1) {
  wi::Ocean::OceanParameters *cppresult;
  wi::Ocean *arg1 = (wi::Ocean *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Ocean *) carg1;
  cppresult = (wi::Ocean::OceanParameters *)& ((arg1)->params);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Ocean_new() {
  wi::Ocean *cppresult;
  SwigObj* result;
  
  cppresult = (wi::Ocean *)new wi::Ocean();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_Ocean_delete(SwigObj* carg1) {
  wi::Ocean *arg1 = (wi::Ocean *) 0 ;
  
  arg1 = (wi::Ocean *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_profiler_BeginFrame() {
  wi::profiler::BeginFrame();
}


SWIGEXPORTC void wi_profiler_EndFrame(SwigObj* carg1) {
  wi::graphics::CommandList arg1 ;
  
  arg1 = *(wi::graphics::CommandList *)carg1;
  wi::profiler::EndFrame(SWIG_STD_MOVE(arg1));
}


SWIGEXPORTC size_t wi_profiler_BeginRangeCPU(const char * carg1) {
  wi::profiler::range_id cppresult;
  char *arg1 = (char *) 0 ;
  size_t result;
  
  arg1 = (char *) carg1;
  cppresult = wi::profiler::BeginRangeCPU((char const *)arg1);
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC size_t wi_profiler_BeginRangeGPU(const char * carg1, SwigObj* carg2) {
  wi::profiler::range_id cppresult;
  char *arg1 = (char *) 0 ;
  wi::graphics::CommandList arg2 ;
  size_t result;
  
  arg1 = (char *) carg1;
  arg2 = *(wi::graphics::CommandList *)carg2;
  cppresult = wi::profiler::BeginRangeGPU((char const *)arg1,SWIG_STD_MOVE(arg2));
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void wi_profiler_EndRange(size_t carg1) {
  wi::profiler::range_id arg1 ;
  
  arg1 = (wi::profiler::range_id) carg1;
  wi::profiler::EndRange(SWIG_STD_MOVE(arg1));
}


SWIGEXPORTC void wi_profiler_ScopedRangeCPU_id_set(SwigObj* carg1, size_t carg2) {
  wi::profiler::ScopedRangeCPU *arg1 = (wi::profiler::ScopedRangeCPU *) 0 ;
  size_t arg2 ;
  
  arg1 = (wi::profiler::ScopedRangeCPU *) carg1;
  arg2 = (size_t) carg2;
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORTC size_t wi_profiler_ScopedRangeCPU_id_get(SwigObj* carg1) {
  size_t cppresult;
  wi::profiler::ScopedRangeCPU *arg1 = (wi::profiler::ScopedRangeCPU *) 0 ;
  size_t result;
  
  arg1 = (wi::profiler::ScopedRangeCPU *) carg1;
  cppresult =  ((arg1)->id);
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_profiler_ScopedRangeCPU_new(const char * carg1) {
  wi::profiler::ScopedRangeCPU *cppresult;
  char *arg1 = (char *) 0 ;
  SwigObj* result;
  
  arg1 = (char *) carg1;
  cppresult = (wi::profiler::ScopedRangeCPU *)new wi::profiler::ScopedRangeCPU((char const *)arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_profiler_ScopedRangeCPU_delete(SwigObj* carg1) {
  wi::profiler::ScopedRangeCPU *arg1 = (wi::profiler::ScopedRangeCPU *) 0 ;
  
  arg1 = (wi::profiler::ScopedRangeCPU *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_profiler_ScopedRangeGPU_id_set(SwigObj* carg1, size_t carg2) {
  wi::profiler::ScopedRangeGPU *arg1 = (wi::profiler::ScopedRangeGPU *) 0 ;
  size_t arg2 ;
  
  arg1 = (wi::profiler::ScopedRangeGPU *) carg1;
  arg2 = (size_t) carg2;
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORTC size_t wi_profiler_ScopedRangeGPU_id_get(SwigObj* carg1) {
  size_t cppresult;
  wi::profiler::ScopedRangeGPU *arg1 = (wi::profiler::ScopedRangeGPU *) 0 ;
  size_t result;
  
  arg1 = (wi::profiler::ScopedRangeGPU *) carg1;
  cppresult =  ((arg1)->id);
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_profiler_ScopedRangeGPU_new(const char * carg1, SwigObj* carg2) {
  wi::profiler::ScopedRangeGPU *cppresult;
  char *arg1 = (char *) 0 ;
  wi::graphics::CommandList arg2 ;
  SwigObj* result;
  
  arg1 = (char *) carg1;
  arg2 = *(wi::graphics::CommandList *)carg2;
  cppresult = (wi::profiler::ScopedRangeGPU *)new wi::profiler::ScopedRangeGPU((char const *)arg1,SWIG_STD_MOVE(arg2));
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_profiler_ScopedRangeGPU_delete(SwigObj* carg1) {
  wi::profiler::ScopedRangeGPU *arg1 = (wi::profiler::ScopedRangeGPU *) 0 ;
  
  arg1 = (wi::profiler::ScopedRangeGPU *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_profiler_DrawData_rcwi_Canvas_f_f_wi_graphics_CommandList_wi_graphics_ColorSpace(SwigObj* carg1, float carg2, float carg3, SwigObj* carg4, SwigObj* carg5) {
  wi::Canvas *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  wi::graphics::CommandList arg4 ;
  wi::graphics::ColorSpace arg5 ;
  
  
  arg1 = (wi::Canvas *) carg1;
  
  arg2 = (float) carg2;
  arg3 = (float) carg3;
  arg4 = *(wi::graphics::CommandList *)carg4;
  arg5 = *(wi::graphics::ColorSpace *)carg5;
  wi::profiler::DrawData((wi::Canvas const &)*arg1,arg2,arg3,SWIG_STD_MOVE(arg4),SWIG_STD_MOVE(arg5));
}


SWIGEXPORTC void wi_profiler_DrawData_rcwi_Canvas_f_f_wi_graphics_CommandList(SwigObj* carg1, float carg2, float carg3, SwigObj* carg4) {
  wi::Canvas *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  wi::graphics::CommandList arg4 ;
  
  
  arg1 = (wi::Canvas *) carg1;
  
  arg2 = (float) carg2;
  arg3 = (float) carg3;
  arg4 = *(wi::graphics::CommandList *)carg4;
  wi::profiler::DrawData((wi::Canvas const &)*arg1,arg2,arg3,SWIG_STD_MOVE(arg4));
}


SWIGEXPORTC void wi_profiler_DisableDrawForThisFrame() {
  wi::profiler::DisableDrawForThisFrame();
}


SWIGEXPORTC void wi_profiler_SetEnabled(bool carg1) {
  bool arg1 ;
  
  arg1 = (bool) carg1;
  wi::profiler::SetEnabled(arg1);
}


SWIGEXPORTC bool wi_profiler_IsEnabled() {
  bool cppresult;
  bool result;
  
  cppresult = (bool)wi::profiler::IsEnabled();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_profiler_SetBackgroundColor(SwigObj* carg1) {
  wi::Color arg1 ;
  
  arg1 = *(wi::Color *)carg1;
  wi::profiler::SetBackgroundColor(SWIG_STD_MOVE(arg1));
}


SWIGEXPORTC void wi_profiler_SetTextColor(SwigObj* carg1) {
  wi::Color arg1 ;
  
  arg1 = *(wi::Color *)carg1;
  wi::profiler::SetTextColor(SWIG_STD_MOVE(arg1));
}


SWIGEXPORTC void wi_random_RNG_state_set(SwigObj* carg1, SwigObj* carg2) {
  wi::random::RNG *arg1 = (wi::random::RNG *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (wi::random::RNG *) carg1;
  arg2 = *(uint64_t *)carg2;
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORTC SwigObj* wi_random_RNG_state_get(SwigObj* carg1) {
  uint64_t cppresult;
  wi::random::RNG *arg1 = (wi::random::RNG *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::random::RNG *) carg1;
  cppresult =  ((arg1)->state);
  result = (SwigObj*)new uint64_t(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_random_RNG_new_uint64_t(SwigObj* carg1) {
  wi::random::RNG *cppresult;
  uint64_t arg1 ;
  SwigObj* result;
  
  arg1 = *(uint64_t *)carg1;
  cppresult = (wi::random::RNG *)new wi::random::RNG(SWIG_STD_MOVE(arg1));
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_random_RNG_new() {
  wi::random::RNG *cppresult;
  SwigObj* result;
  
  cppresult = (wi::random::RNG *)new wi::random::RNG();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_random_RNG_seed(SwigObj* carg1, SwigObj* carg2) {
  wi::random::RNG *arg1 = (wi::random::RNG *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (wi::random::RNG *) carg1;
  arg2 = *(uint64_t *)carg2;
  (arg1)->seed(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC SwigObj* wi_random_RNG_next_uint(SwigObj* carg1) {
  uint64_t cppresult;
  wi::random::RNG *arg1 = (wi::random::RNG *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::random::RNG *) carg1;
  cppresult = (arg1)->next_uint();
  result = (SwigObj*)new uint64_t(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_random_RNG_next_uint_uint64_t_uint64_t(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  uint64_t cppresult;
  wi::random::RNG *arg1 = (wi::random::RNG *) 0 ;
  uint64_t arg2 ;
  uint64_t arg3 ;
  SwigObj* result;
  
  arg1 = (wi::random::RNG *) carg1;
  arg2 = *(uint64_t *)carg2;
  arg3 = *(uint64_t *)carg3;
  cppresult = (arg1)->next_uint(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  result = (SwigObj*)new uint64_t(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_random_RNG_next_uint_uint32_t_uint32_t(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  uint32_t cppresult;
  wi::random::RNG *arg1 = (wi::random::RNG *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  SwigObj* result;
  
  arg1 = (wi::random::RNG *) carg1;
  arg2 = *(uint32_t *)carg2;
  arg3 = *(uint32_t *)carg3;
  cppresult = (arg1)->next_uint(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_random_RNG_next_int(SwigObj* carg1) {
  int64_t cppresult;
  wi::random::RNG *arg1 = (wi::random::RNG *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::random::RNG *) carg1;
  cppresult = (arg1)->next_int();
  result = (SwigObj*)new int64_t(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_random_RNG_next_int_int64_t_int64_t(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  int64_t cppresult;
  wi::random::RNG *arg1 = (wi::random::RNG *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  SwigObj* result;
  
  arg1 = (wi::random::RNG *) carg1;
  arg2 = *(int64_t *)carg2;
  arg3 = *(int64_t *)carg3;
  cppresult = (arg1)->next_int(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  result = (SwigObj*)new int64_t(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_random_RNG_next_int_int32_t_int32_t(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  int32_t cppresult;
  wi::random::RNG *arg1 = (wi::random::RNG *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  SwigObj* result;
  
  arg1 = (wi::random::RNG *) carg1;
  arg2 = *(int32_t *)carg2;
  arg3 = *(int32_t *)carg3;
  cppresult = (arg1)->next_int(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  result = (SwigObj*)new int32_t(cppresult);
  return result;
}


SWIGEXPORTC float wi_random_RNG_next_float(SwigObj* carg1) {
  float cppresult;
  wi::random::RNG *arg1 = (wi::random::RNG *) 0 ;
  float result;
  
  arg1 = (wi::random::RNG *) carg1;
  cppresult = (float)(arg1)->next_float();
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC float wi_random_RNG_next_float_f_f(SwigObj* carg1, float carg2, float carg3) {
  float cppresult;
  wi::random::RNG *arg1 = (wi::random::RNG *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (wi::random::RNG *) carg1;
  arg2 = (float) carg2;
  arg3 = (float) carg3;
  cppresult = (float)(arg1)->next_float(arg2,arg3);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void wi_random_RNG_delete(SwigObj* carg1) {
  wi::random::RNG *arg1 = (wi::random::RNG *) 0 ;
  
  arg1 = (wi::random::RNG *) carg1;
  delete arg1;
}


SWIGEXPORTC int wi_random_GetRandom_i_i(int carg1, int carg2) {
  int cppresult;
  int arg1 ;
  int arg2 ;
  int result;
  
  arg1 = (int) carg1;
  arg2 = (int) carg2;
  cppresult = (int)wi::random::GetRandom(arg1,arg2);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC int wi_random_GetRandom_i(int carg1) {
  int cppresult;
  int arg1 ;
  int result;
  
  arg1 = (int) carg1;
  cppresult = (int)wi::random::GetRandom(arg1);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_random_GetRandom_uint32_t_uint32_t(SwigObj* carg1, SwigObj* carg2) {
  uint32_t cppresult;
  uint32_t arg1 ;
  uint32_t arg2 ;
  SwigObj* result;
  
  arg1 = *(uint32_t *)carg1;
  arg2 = *(uint32_t *)carg2;
  cppresult = wi::random::GetRandom(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_random_GetRandom_uint32_t(SwigObj* carg1) {
  uint32_t cppresult;
  uint32_t arg1 ;
  SwigObj* result;
  
  arg1 = *(uint32_t *)carg1;
  cppresult = wi::random::GetRandom(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_random_GetRandom_uint64_t_uint64_t(SwigObj* carg1, SwigObj* carg2) {
  uint64_t cppresult;
  uint64_t arg1 ;
  uint64_t arg2 ;
  SwigObj* result;
  
  arg1 = *(uint64_t *)carg1;
  arg2 = *(uint64_t *)carg2;
  cppresult = wi::random::GetRandom(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  result = (SwigObj*)new uint64_t(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_random_GetRandom_uint64_t(SwigObj* carg1) {
  uint64_t cppresult;
  uint64_t arg1 ;
  SwigObj* result;
  
  arg1 = *(uint64_t *)carg1;
  cppresult = wi::random::GetRandom(SWIG_STD_MOVE(arg1));
  result = (SwigObj*)new uint64_t(cppresult);
  return result;
}


SWIGEXPORTC float wi_random_GetRandom_f_f(float carg1, float carg2) {
  float cppresult;
  float arg1 ;
  float arg2 ;
  float result;
  
  arg1 = (float) carg1;
  arg2 = (float) carg2;
  cppresult = (float)wi::random::GetRandom(arg1,arg2);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC float wi_random_GetRandom_f(float carg1) {
  float cppresult;
  float arg1 ;
  float result;
  
  arg1 = (float) carg1;
  cppresult = (float)wi::random::GetRandom(arg1);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void wi_rectpacker_State_context_set(SwigObj* carg1, SwigObj* carg2) {
  wi::rectpacker::State *arg1 = (wi::rectpacker::State *) 0 ;
  stbrp_context arg2 ;
  
  arg1 = (wi::rectpacker::State *) carg1;
  arg2 = *(stbrp_context *)carg2;
  if (arg1) (arg1)->context = arg2;
}


SWIGEXPORTC SwigObj* wi_rectpacker_State_context_get(SwigObj* carg1) {
  stbrp_context cppresult;
  wi::rectpacker::State *arg1 = (wi::rectpacker::State *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::rectpacker::State *) carg1;
  cppresult =  ((arg1)->context);
  result = (SwigObj*)new stbrp_context(cppresult);
  return result;
}


SWIGEXPORTC void wi_rectpacker_State_nodes_set(SwigObj* carg1, SwigObj* carg2) {
  wi::rectpacker::State *arg1 = (wi::rectpacker::State *) 0 ;
  wi::vector< stbrp_node,std::allocator< stbrp_node > > *arg2 = (wi::vector< stbrp_node,std::allocator< stbrp_node > > *) 0 ;
  
  arg1 = (wi::rectpacker::State *) carg1;
  arg2 = (wi::vector< stbrp_node,std::allocator< stbrp_node > > *) carg2;
  if (arg1) (arg1)->nodes = *arg2;
}


SWIGEXPORTC SwigObj* wi_rectpacker_State_nodes_get(SwigObj* carg1) {
  wi::vector< stbrp_node,std::allocator< stbrp_node > > *cppresult;
  wi::rectpacker::State *arg1 = (wi::rectpacker::State *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::rectpacker::State *) carg1;
  cppresult = (wi::vector< stbrp_node,std::allocator< stbrp_node > > *)& ((arg1)->nodes);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_rectpacker_State_rects_set(SwigObj* carg1, SwigObj* carg2) {
  wi::rectpacker::State *arg1 = (wi::rectpacker::State *) 0 ;
  wi::vector< stbrp_rect,std::allocator< stbrp_rect > > *arg2 = (wi::vector< stbrp_rect,std::allocator< stbrp_rect > > *) 0 ;
  
  arg1 = (wi::rectpacker::State *) carg1;
  arg2 = (wi::vector< stbrp_rect,std::allocator< stbrp_rect > > *) carg2;
  if (arg1) (arg1)->rects = *arg2;
}


SWIGEXPORTC SwigObj* wi_rectpacker_State_rects_get(SwigObj* carg1) {
  wi::vector< stbrp_rect,std::allocator< stbrp_rect > > *cppresult;
  wi::rectpacker::State *arg1 = (wi::rectpacker::State *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::rectpacker::State *) carg1;
  cppresult = (wi::vector< stbrp_rect,std::allocator< stbrp_rect > > *)& ((arg1)->rects);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_rectpacker_State_width_set(SwigObj* carg1, int carg2) {
  wi::rectpacker::State *arg1 = (wi::rectpacker::State *) 0 ;
  int arg2 ;
  
  arg1 = (wi::rectpacker::State *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORTC int wi_rectpacker_State_width_get(SwigObj* carg1) {
  int cppresult;
  wi::rectpacker::State *arg1 = (wi::rectpacker::State *) 0 ;
  int result;
  
  arg1 = (wi::rectpacker::State *) carg1;
  cppresult = (int) ((arg1)->width);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void wi_rectpacker_State_height_set(SwigObj* carg1, int carg2) {
  wi::rectpacker::State *arg1 = (wi::rectpacker::State *) 0 ;
  int arg2 ;
  
  arg1 = (wi::rectpacker::State *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORTC int wi_rectpacker_State_height_get(SwigObj* carg1) {
  int cppresult;
  wi::rectpacker::State *arg1 = (wi::rectpacker::State *) 0 ;
  int result;
  
  arg1 = (wi::rectpacker::State *) carg1;
  cppresult = (int) ((arg1)->height);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void wi_rectpacker_State_clear(SwigObj* carg1) {
  wi::rectpacker::State *arg1 = (wi::rectpacker::State *) 0 ;
  
  arg1 = (wi::rectpacker::State *) carg1;
  (arg1)->clear();
}


SWIGEXPORTC void wi_rectpacker_State_add_rect(SwigObj* carg1, SwigObj* carg2) {
  wi::rectpacker::State *arg1 = (wi::rectpacker::State *) 0 ;
  wi::rectpacker::Rect *arg2 = 0 ;
  
  arg1 = (wi::rectpacker::State *) carg1;
  
  arg2 = (wi::rectpacker::Rect *) carg2;
  
  (arg1)->add_rect((wi::rectpacker::Rect const &)*arg2);
}


SWIGEXPORTC bool wi_rectpacker_State_pack(SwigObj* carg1, int carg2) {
  bool cppresult;
  wi::rectpacker::State *arg1 = (wi::rectpacker::State *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (wi::rectpacker::State *) carg1;
  arg2 = (int) carg2;
  cppresult = (bool)(arg1)->pack(arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_rectpacker_State_new() {
  wi::rectpacker::State *cppresult;
  SwigObj* result;
  
  cppresult = (wi::rectpacker::State *)new wi::rectpacker::State();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_rectpacker_State_delete(SwigObj* carg1) {
  wi::rectpacker::State *arg1 = (wi::rectpacker::State *) 0 ;
  
  arg1 = (wi::rectpacker::State *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_RenderPath_delete(SwigObj* carg1) {
  wi::RenderPath *arg1 = (wi::RenderPath *) 0 ;
  
  arg1 = (wi::RenderPath *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_RenderPath_Load(SwigObj* carg1) {
  wi::RenderPath *arg1 = (wi::RenderPath *) 0 ;
  
  arg1 = (wi::RenderPath *) carg1;
  (arg1)->Load();
}


SWIGEXPORTC void wi_RenderPath_Start(SwigObj* carg1) {
  wi::RenderPath *arg1 = (wi::RenderPath *) 0 ;
  
  arg1 = (wi::RenderPath *) carg1;
  (arg1)->Start();
}


SWIGEXPORTC void wi_RenderPath_Stop(SwigObj* carg1) {
  wi::RenderPath *arg1 = (wi::RenderPath *) 0 ;
  
  arg1 = (wi::RenderPath *) carg1;
  (arg1)->Stop();
}


SWIGEXPORTC void wi_RenderPath_PreUpdate(SwigObj* carg1) {
  wi::RenderPath *arg1 = (wi::RenderPath *) 0 ;
  
  arg1 = (wi::RenderPath *) carg1;
  (arg1)->PreUpdate();
}


SWIGEXPORTC void wi_RenderPath_FixedUpdate(SwigObj* carg1) {
  wi::RenderPath *arg1 = (wi::RenderPath *) 0 ;
  
  arg1 = (wi::RenderPath *) carg1;
  (arg1)->FixedUpdate();
}


SWIGEXPORTC void wi_RenderPath_Update(SwigObj* carg1, float carg2) {
  wi::RenderPath *arg1 = (wi::RenderPath *) 0 ;
  float arg2 ;
  
  arg1 = (wi::RenderPath *) carg1;
  arg2 = (float) carg2;
  (arg1)->Update(arg2);
}


SWIGEXPORTC void wi_RenderPath_PostUpdate(SwigObj* carg1) {
  wi::RenderPath *arg1 = (wi::RenderPath *) 0 ;
  
  arg1 = (wi::RenderPath *) carg1;
  (arg1)->PostUpdate();
}


SWIGEXPORTC void wi_RenderPath_Render(SwigObj* carg1) {
  wi::RenderPath *arg1 = (wi::RenderPath *) 0 ;
  
  arg1 = (wi::RenderPath *) carg1;
  ((wi::RenderPath const *)arg1)->Render();
}


SWIGEXPORTC void wi_RenderPath_Compose(SwigObj* carg1, SwigObj* carg2) {
  wi::RenderPath *arg1 = (wi::RenderPath *) 0 ;
  wi::graphics::CommandList arg2 ;
  
  arg1 = (wi::RenderPath *) carg1;
  arg2 = *(wi::graphics::CommandList *)carg2;
  ((wi::RenderPath const *)arg1)->Compose(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC SwigObj* wi_RenderPath_getLayerMask(SwigObj* carg1) {
  uint32_t cppresult;
  wi::RenderPath *arg1 = (wi::RenderPath *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::RenderPath *) carg1;
  cppresult = ((wi::RenderPath const *)arg1)->getLayerMask();
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC void wi_RenderPath_setlayerMask(SwigObj* carg1, SwigObj* carg2) {
  wi::RenderPath *arg1 = (wi::RenderPath *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (wi::RenderPath *) carg1;
  arg2 = *(uint32_t *)carg2;
  (arg1)->setlayerMask(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void wi_RenderPath_colorspace_set(SwigObj* carg1, SwigObj* carg2) {
  wi::RenderPath *arg1 = (wi::RenderPath *) 0 ;
  wi::graphics::ColorSpace arg2 ;
  
  arg1 = (wi::RenderPath *) carg1;
  arg2 = *(wi::graphics::ColorSpace *)carg2;
  if (arg1) (arg1)->colorspace = arg2;
}


SWIGEXPORTC SwigObj* wi_RenderPath_colorspace_get(SwigObj* carg1) {
  wi::graphics::ColorSpace cppresult;
  wi::RenderPath *arg1 = (wi::RenderPath *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::RenderPath *) carg1;
  cppresult =  ((arg1)->colorspace);
  result = (SwigObj*)new wi::graphics::ColorSpace(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_RenderPath_new() {
  wi::RenderPath *cppresult;
  SwigObj* result;
  
  cppresult = (wi::RenderPath *)new wi::RenderPath();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_RenderPath2D_DeleteGPUResources(SwigObj* carg1) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  (arg1)->DeleteGPUResources();
}


SWIGEXPORTC void wi_RenderPath2D_ResizeBuffers(SwigObj* carg1) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  (arg1)->ResizeBuffers();
}


SWIGEXPORTC void wi_RenderPath2D_ResizeLayout(SwigObj* carg1) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  (arg1)->ResizeLayout();
}


SWIGEXPORTC void wi_RenderPath2D_setMSAASampleCount(SwigObj* carg1, SwigObj* carg2) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  arg2 = *(uint32_t *)carg2;
  (arg1)->setMSAASampleCount(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC SwigObj* wi_RenderPath2D_getMSAASampleCount(SwigObj* carg1) {
  uint32_t cppresult;
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::RenderPath2D *) carg1;
  cppresult = ((wi::RenderPath2D const *)arg1)->getMSAASampleCount();
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_RenderPath2D_GetRenderResult(SwigObj* carg1) {
  wi::graphics::Texture *cppresult;
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::RenderPath2D *) carg1;
  cppresult = (wi::graphics::Texture *) &((wi::RenderPath2D const *)arg1)->GetRenderResult();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_RenderPath2D_GetDepthStencil(SwigObj* carg1) {
  wi::graphics::Texture *cppresult;
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::RenderPath2D *) carg1;
  cppresult = (wi::graphics::Texture *)((wi::RenderPath2D const *)arg1)->GetDepthStencil();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_RenderPath2D_GetGUIBlurredBackground(SwigObj* carg1) {
  wi::graphics::Texture *cppresult;
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::RenderPath2D *) carg1;
  cppresult = (wi::graphics::Texture *)((wi::RenderPath2D const *)arg1)->GetGUIBlurredBackground();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_RenderPath2D_AddSprite_pwi_Sprite_rcstd_string(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  wi::Sprite *arg2 = (wi::Sprite *) 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  arg2 = (wi::Sprite *) carg2;
  
  arg3 = (std::string *) carg3;
  
  (arg1)->AddSprite(arg2,(std::string const &)*arg3);
}


SWIGEXPORTC void wi_RenderPath2D_AddSprite_pwi_Sprite(SwigObj* carg1, SwigObj* carg2) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  wi::Sprite *arg2 = (wi::Sprite *) 0 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  arg2 = (wi::Sprite *) carg2;
  (arg1)->AddSprite(arg2);
}


SWIGEXPORTC void wi_RenderPath2D_RemoveSprite(SwigObj* carg1, SwigObj* carg2) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  wi::Sprite *arg2 = (wi::Sprite *) 0 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  arg2 = (wi::Sprite *) carg2;
  (arg1)->RemoveSprite(arg2);
}


SWIGEXPORTC void wi_RenderPath2D_ClearSprites(SwigObj* carg1) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  (arg1)->ClearSprites();
}


SWIGEXPORTC int wi_RenderPath2D_GetSpriteOrder(SwigObj* carg1, SwigObj* carg2) {
  int cppresult;
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  wi::Sprite *arg2 = (wi::Sprite *) 0 ;
  int result;
  
  arg1 = (wi::RenderPath2D *) carg1;
  arg2 = (wi::Sprite *) carg2;
  cppresult = (int)(arg1)->GetSpriteOrder(arg2);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void wi_RenderPath2D_AddFont_pwi_SpriteFont_rcstd_string(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  wi::SpriteFont *arg2 = (wi::SpriteFont *) 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  arg2 = (wi::SpriteFont *) carg2;
  
  arg3 = (std::string *) carg3;
  
  (arg1)->AddFont(arg2,(std::string const &)*arg3);
}


SWIGEXPORTC void wi_RenderPath2D_AddFont_pwi_SpriteFont(SwigObj* carg1, SwigObj* carg2) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  wi::SpriteFont *arg2 = (wi::SpriteFont *) 0 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  arg2 = (wi::SpriteFont *) carg2;
  (arg1)->AddFont(arg2);
}


SWIGEXPORTC void wi_RenderPath2D_RemoveFont(SwigObj* carg1, SwigObj* carg2) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  wi::SpriteFont *arg2 = (wi::SpriteFont *) 0 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  arg2 = (wi::SpriteFont *) carg2;
  (arg1)->RemoveFont(arg2);
}


SWIGEXPORTC void wi_RenderPath2D_ClearFonts(SwigObj* carg1) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  (arg1)->ClearFonts();
}


SWIGEXPORTC int wi_RenderPath2D_GetFontOrder(SwigObj* carg1, SwigObj* carg2) {
  int cppresult;
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  wi::SpriteFont *arg2 = (wi::SpriteFont *) 0 ;
  int result;
  
  arg1 = (wi::RenderPath2D *) carg1;
  arg2 = (wi::SpriteFont *) carg2;
  cppresult = (int)(arg1)->GetFontOrder(arg2);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void wi_RenderPath2D_layers_set(SwigObj* carg1, SwigObj* carg2) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  wi::vector< wi::RenderPath2D::RenderLayer2D,std::allocator< wi::RenderPath2D::RenderLayer2D > > *arg2 = (wi::vector< wi::RenderPath2D::RenderLayer2D,std::allocator< wi::RenderPath2D::RenderLayer2D > > *) 0 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  arg2 = (wi::vector< wi::RenderPath2D::RenderLayer2D,std::allocator< wi::RenderPath2D::RenderLayer2D > > *) carg2;
  if (arg1) (arg1)->layers = *arg2;
}


SWIGEXPORTC SwigObj* wi_RenderPath2D_layers_get(SwigObj* carg1) {
  wi::vector< wi::RenderPath2D::RenderLayer2D,std::allocator< wi::RenderPath2D::RenderLayer2D > > *cppresult;
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::RenderPath2D *) carg1;
  cppresult = (wi::vector< wi::RenderPath2D::RenderLayer2D,std::allocator< wi::RenderPath2D::RenderLayer2D > > *)& ((arg1)->layers);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_RenderPath2D_AddLayer(SwigObj* carg1, SwigObj* carg2) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  
  arg2 = (std::string *) carg2;
  
  (arg1)->AddLayer((std::string const &)*arg2);
}


SWIGEXPORTC void wi_RenderPath2D_SetLayerOrder(SwigObj* carg1, SwigObj* carg2, int carg3) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  
  arg2 = (std::string *) carg2;
  
  arg3 = (int) carg3;
  (arg1)->SetLayerOrder((std::string const &)*arg2,arg3);
}


SWIGEXPORTC void wi_RenderPath2D_SetSpriteOrder(SwigObj* carg1, SwigObj* carg2, int carg3) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  wi::Sprite *arg2 = (wi::Sprite *) 0 ;
  int arg3 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  arg2 = (wi::Sprite *) carg2;
  arg3 = (int) carg3;
  (arg1)->SetSpriteOrder(arg2,arg3);
}


SWIGEXPORTC void wi_RenderPath2D_SetFontOrder(SwigObj* carg1, SwigObj* carg2, int carg3) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  wi::SpriteFont *arg2 = (wi::SpriteFont *) 0 ;
  int arg3 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  arg2 = (wi::SpriteFont *) carg2;
  arg3 = (int) carg3;
  (arg1)->SetFontOrder(arg2,arg3);
}


SWIGEXPORTC void wi_RenderPath2D_SortLayers(SwigObj* carg1) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  (arg1)->SortLayers();
}


SWIGEXPORTC void wi_RenderPath2D_CleanLayers(SwigObj* carg1) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  (arg1)->CleanLayers();
}


SWIGEXPORTC SwigObj* wi_RenderPath2D_GetGUI_const(SwigObj* carg1) {
  wi::gui::GUI *cppresult;
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::RenderPath2D *) carg1;
  cppresult = (wi::gui::GUI *) &((wi::RenderPath2D const *)arg1)->GetGUI();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_RenderPath2D_GetGUI(SwigObj* carg1) {
  wi::gui::GUI *cppresult;
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::RenderPath2D *) carg1;
  cppresult = (wi::gui::GUI *) &(arg1)->GetGUI();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_RenderPath2D_resolutionScale_set(SwigObj* carg1, float carg2) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  float arg2 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->resolutionScale = arg2;
}


SWIGEXPORTC float wi_RenderPath2D_resolutionScale_get(SwigObj* carg1) {
  float cppresult;
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  float result;
  
  arg1 = (wi::RenderPath2D *) carg1;
  cppresult = (float) ((arg1)->resolutionScale);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_RenderPath2D_GetInternalResolution(SwigObj* carg1) {
  XMUINT2 cppresult;
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::RenderPath2D *) carg1;
  cppresult = ((wi::RenderPath2D const *)arg1)->GetInternalResolution();
  result = (SwigObj*)new XMUINT2(cppresult);
  return result;
}


SWIGEXPORTC float wi_RenderPath2D_GetHDRScaling(SwigObj* carg1) {
  float cppresult;
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  float result;
  
  arg1 = (wi::RenderPath2D *) carg1;
  cppresult = (float)((wi::RenderPath2D const *)arg1)->GetHDRScaling();
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void wi_RenderPath2D_SetHDRScaling(SwigObj* carg1, float carg2) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  float arg2 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  arg2 = (float) carg2;
  (arg1)->SetHDRScaling(arg2);
}


SWIGEXPORTC SwigObj* wi_RenderPath2D_new() {
  wi::RenderPath2D *cppresult;
  SwigObj* result;
  
  cppresult = (wi::RenderPath2D *)new wi::RenderPath2D();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_RenderPath2D_delete(SwigObj* carg1) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_RenderPath2D_Load(SwigObj* carg1) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  (arg1)->Load();
}


SWIGEXPORTC void wi_RenderPath2D_Start(SwigObj* carg1) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  (arg1)->Start();
}


SWIGEXPORTC void wi_RenderPath2D_Stop(SwigObj* carg1) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  (arg1)->Stop();
}


SWIGEXPORTC void wi_RenderPath2D_PreUpdate(SwigObj* carg1) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  (arg1)->PreUpdate();
}


SWIGEXPORTC void wi_RenderPath2D_PostUpdate(SwigObj* carg1) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  (arg1)->PostUpdate();
}


SWIGEXPORTC SwigObj* wi_RenderPath2D_getLayerMask(SwigObj* carg1) {
  uint32_t cppresult;
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::RenderPath2D *) carg1;
  cppresult = ((wi::RenderPath2D const *)arg1)->getLayerMask();
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC void wi_RenderPath2D_setlayerMask(SwigObj* carg1, SwigObj* carg2) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  arg2 = *(uint32_t *)carg2;
  (arg1)->setlayerMask(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void wi_RenderPath2D_colorspace_set(SwigObj* carg1, SwigObj* carg2) {
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  wi::graphics::ColorSpace arg2 ;
  
  arg1 = (wi::RenderPath2D *) carg1;
  arg2 = *(wi::graphics::ColorSpace *)carg2;
  if (arg1) (arg1)->colorspace = arg2;
}


SWIGEXPORTC SwigObj* wi_RenderPath2D_colorspace_get(SwigObj* carg1) {
  wi::graphics::ColorSpace cppresult;
  wi::RenderPath2D *arg1 = (wi::RenderPath2D *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::RenderPath2D *) carg1;
  cppresult =  ((arg1)->colorspace);
  result = (SwigObj*)new wi::graphics::ColorSpace(cppresult);
  return result;
}


SWIGEXPORTC void wi_RenderPath3D_PathTracing_Update(SwigObj* carg1, float carg2) {
  wi::RenderPath3D_PathTracing *arg1 = (wi::RenderPath3D_PathTracing *) 0 ;
  float arg2 ;
  
  arg1 = (wi::RenderPath3D_PathTracing *) carg1;
  arg2 = (float) carg2;
  (arg1)->Update(arg2);
}


SWIGEXPORTC void wi_RenderPath3D_PathTracing_Render(SwigObj* carg1) {
  wi::RenderPath3D_PathTracing *arg1 = (wi::RenderPath3D_PathTracing *) 0 ;
  
  arg1 = (wi::RenderPath3D_PathTracing *) carg1;
  ((wi::RenderPath3D_PathTracing const *)arg1)->Render();
}


SWIGEXPORTC void wi_RenderPath3D_PathTracing_Compose(SwigObj* carg1, SwigObj* carg2) {
  wi::RenderPath3D_PathTracing *arg1 = (wi::RenderPath3D_PathTracing *) 0 ;
  wi::graphics::CommandList arg2 ;
  
  arg1 = (wi::RenderPath3D_PathTracing *) carg1;
  arg2 = *(wi::graphics::CommandList *)carg2;
  ((wi::RenderPath3D_PathTracing const *)arg1)->Compose(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC int wi_RenderPath3D_PathTracing_getCurrentSampleCount(SwigObj* carg1) {
  int cppresult;
  wi::RenderPath3D_PathTracing *arg1 = (wi::RenderPath3D_PathTracing *) 0 ;
  int result;
  
  arg1 = (wi::RenderPath3D_PathTracing *) carg1;
  cppresult = (int)((wi::RenderPath3D_PathTracing const *)arg1)->getCurrentSampleCount();
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void wi_RenderPath3D_PathTracing_setTargetSampleCount(SwigObj* carg1, int carg2) {
  wi::RenderPath3D_PathTracing *arg1 = (wi::RenderPath3D_PathTracing *) 0 ;
  int arg2 ;
  
  arg1 = (wi::RenderPath3D_PathTracing *) carg1;
  arg2 = (int) carg2;
  (arg1)->setTargetSampleCount(arg2);
}


SWIGEXPORTC float wi_RenderPath3D_PathTracing_getProgress(SwigObj* carg1) {
  float cppresult;
  wi::RenderPath3D_PathTracing *arg1 = (wi::RenderPath3D_PathTracing *) 0 ;
  float result;
  
  arg1 = (wi::RenderPath3D_PathTracing *) carg1;
  cppresult = (float)((wi::RenderPath3D_PathTracing const *)arg1)->getProgress();
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void wi_RenderPath3D_PathTracing_denoiserProgress_set(SwigObj* carg1, float carg2) {
  wi::RenderPath3D_PathTracing *arg1 = (wi::RenderPath3D_PathTracing *) 0 ;
  float arg2 ;
  
  arg1 = (wi::RenderPath3D_PathTracing *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->denoiserProgress = arg2;
}


SWIGEXPORTC float wi_RenderPath3D_PathTracing_denoiserProgress_get(SwigObj* carg1) {
  float cppresult;
  wi::RenderPath3D_PathTracing *arg1 = (wi::RenderPath3D_PathTracing *) 0 ;
  float result;
  
  arg1 = (wi::RenderPath3D_PathTracing *) carg1;
  cppresult = (float) ((arg1)->denoiserProgress);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC float wi_RenderPath3D_PathTracing_getDenoiserProgress(SwigObj* carg1) {
  float cppresult;
  wi::RenderPath3D_PathTracing *arg1 = (wi::RenderPath3D_PathTracing *) 0 ;
  float result;
  
  arg1 = (wi::RenderPath3D_PathTracing *) carg1;
  cppresult = (float)((wi::RenderPath3D_PathTracing const *)arg1)->getDenoiserProgress();
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC bool wi_RenderPath3D_PathTracing_isDenoiserAvailable(SwigObj* carg1) {
  bool cppresult;
  wi::RenderPath3D_PathTracing *arg1 = (wi::RenderPath3D_PathTracing *) 0 ;
  bool result;
  
  arg1 = (wi::RenderPath3D_PathTracing *) carg1;
  cppresult = (bool)((wi::RenderPath3D_PathTracing const *)arg1)->isDenoiserAvailable();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_RenderPath3D_PathTracing_resetProgress(SwigObj* carg1) {
  wi::RenderPath3D_PathTracing *arg1 = (wi::RenderPath3D_PathTracing *) 0 ;
  
  arg1 = (wi::RenderPath3D_PathTracing *) carg1;
  (arg1)->resetProgress();
}


SWIGEXPORTC void wi_RenderPath3D_PathTracing_instanceInclusionMask_PathTrace_set(SwigObj* carg1, SwigObj* carg2) {
  wi::RenderPath3D_PathTracing *arg1 = (wi::RenderPath3D_PathTracing *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (wi::RenderPath3D_PathTracing *) carg1;
  arg2 = *(uint8_t *)carg2;
  if (arg1) (arg1)->instanceInclusionMask_PathTrace = arg2;
}


SWIGEXPORTC SwigObj* wi_RenderPath3D_PathTracing_instanceInclusionMask_PathTrace_get(SwigObj* carg1) {
  uint8_t cppresult;
  wi::RenderPath3D_PathTracing *arg1 = (wi::RenderPath3D_PathTracing *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::RenderPath3D_PathTracing *) carg1;
  cppresult =  ((arg1)->instanceInclusionMask_PathTrace);
  result = (SwigObj*)new uint8_t(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_RenderPath3D_PathTracing_new() {
  wi::RenderPath3D_PathTracing *cppresult;
  SwigObj* result;
  
  cppresult = (wi::RenderPath3D_PathTracing *)new wi::RenderPath3D_PathTracing();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_RenderPath3D_PathTracing_delete(SwigObj* carg1) {
  wi::RenderPath3D_PathTracing *arg1 = (wi::RenderPath3D_PathTracing *) 0 ;
  
  arg1 = (wi::RenderPath3D_PathTracing *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_shadercompiler_CompilerInput_flags_set(SwigObj* carg1, int carg2) {
  wi::shadercompiler::CompilerInput *arg1 = (wi::shadercompiler::CompilerInput *) 0 ;
  enum wi::shadercompiler::Flags arg2 ;
  
  arg1 = (wi::shadercompiler::CompilerInput *) carg1;
  arg2 = (enum wi::shadercompiler::Flags) carg2;
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORTC int wi_shadercompiler_CompilerInput_flags_get(SwigObj* carg1) {
  enum wi::shadercompiler::Flags cppresult;
  wi::shadercompiler::CompilerInput *arg1 = (wi::shadercompiler::CompilerInput *) 0 ;
  int result;
  
  arg1 = (wi::shadercompiler::CompilerInput *) carg1;
  cppresult = (enum wi::shadercompiler::Flags) ((arg1)->flags);
  result = (int) cppresult;
  return result;
}


SWIGEXPORTC void wi_shadercompiler_CompilerInput_format_set(SwigObj* carg1, SwigObj* carg2) {
  wi::shadercompiler::CompilerInput *arg1 = (wi::shadercompiler::CompilerInput *) 0 ;
  wi::graphics::ShaderFormat arg2 ;
  
  arg1 = (wi::shadercompiler::CompilerInput *) carg1;
  arg2 = *(wi::graphics::ShaderFormat *)carg2;
  if (arg1) (arg1)->format = arg2;
}


SWIGEXPORTC SwigObj* wi_shadercompiler_CompilerInput_format_get(SwigObj* carg1) {
  wi::graphics::ShaderFormat cppresult;
  wi::shadercompiler::CompilerInput *arg1 = (wi::shadercompiler::CompilerInput *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::shadercompiler::CompilerInput *) carg1;
  cppresult =  ((arg1)->format);
  result = (SwigObj*)new wi::graphics::ShaderFormat(cppresult);
  return result;
}


SWIGEXPORTC void wi_shadercompiler_CompilerInput_stage_set(SwigObj* carg1, SwigObj* carg2) {
  wi::shadercompiler::CompilerInput *arg1 = (wi::shadercompiler::CompilerInput *) 0 ;
  wi::graphics::ShaderStage arg2 ;
  
  arg1 = (wi::shadercompiler::CompilerInput *) carg1;
  arg2 = *(wi::graphics::ShaderStage *)carg2;
  if (arg1) (arg1)->stage = arg2;
}


SWIGEXPORTC SwigObj* wi_shadercompiler_CompilerInput_stage_get(SwigObj* carg1) {
  wi::graphics::ShaderStage cppresult;
  wi::shadercompiler::CompilerInput *arg1 = (wi::shadercompiler::CompilerInput *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::shadercompiler::CompilerInput *) carg1;
  cppresult =  ((arg1)->stage);
  result = (SwigObj*)new wi::graphics::ShaderStage(cppresult);
  return result;
}


SWIGEXPORTC void wi_shadercompiler_CompilerInput_minshadermodel_set(SwigObj* carg1, SwigObj* carg2) {
  wi::shadercompiler::CompilerInput *arg1 = (wi::shadercompiler::CompilerInput *) 0 ;
  wi::graphics::ShaderModel arg2 ;
  
  arg1 = (wi::shadercompiler::CompilerInput *) carg1;
  arg2 = *(wi::graphics::ShaderModel *)carg2;
  if (arg1) (arg1)->minshadermodel = arg2;
}


SWIGEXPORTC SwigObj* wi_shadercompiler_CompilerInput_minshadermodel_get(SwigObj* carg1) {
  wi::graphics::ShaderModel cppresult;
  wi::shadercompiler::CompilerInput *arg1 = (wi::shadercompiler::CompilerInput *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::shadercompiler::CompilerInput *) carg1;
  cppresult =  ((arg1)->minshadermodel);
  result = (SwigObj*)new wi::graphics::ShaderModel(cppresult);
  return result;
}


SWIGEXPORTC void wi_shadercompiler_CompilerInput_shadersourcefilename_set(SwigObj* carg1, SwigObj* carg2) {
  wi::shadercompiler::CompilerInput *arg1 = (wi::shadercompiler::CompilerInput *) 0 ;
  std::string arg2 ;
  
  arg1 = (wi::shadercompiler::CompilerInput *) carg1;
  arg2 = *(std::string *)carg2;
  if (arg1) (arg1)->shadersourcefilename = arg2;
}


SWIGEXPORTC SwigObj* wi_shadercompiler_CompilerInput_shadersourcefilename_get(SwigObj* carg1) {
  std::string cppresult;
  wi::shadercompiler::CompilerInput *arg1 = (wi::shadercompiler::CompilerInput *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::shadercompiler::CompilerInput *) carg1;
  cppresult =  ((arg1)->shadersourcefilename);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC void wi_shadercompiler_CompilerInput_entrypoint_set(SwigObj* carg1, SwigObj* carg2) {
  wi::shadercompiler::CompilerInput *arg1 = (wi::shadercompiler::CompilerInput *) 0 ;
  std::string arg2 ;
  
  arg1 = (wi::shadercompiler::CompilerInput *) carg1;
  arg2 = *(std::string *)carg2;
  if (arg1) (arg1)->entrypoint = arg2;
}


SWIGEXPORTC SwigObj* wi_shadercompiler_CompilerInput_entrypoint_get(SwigObj* carg1) {
  std::string cppresult;
  wi::shadercompiler::CompilerInput *arg1 = (wi::shadercompiler::CompilerInput *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::shadercompiler::CompilerInput *) carg1;
  cppresult =  ((arg1)->entrypoint);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC void wi_shadercompiler_CompilerInput_include_directories_set(SwigObj* carg1, SwigObj* carg2) {
  wi::shadercompiler::CompilerInput *arg1 = (wi::shadercompiler::CompilerInput *) 0 ;
  wi::vector< std::string,std::allocator< std::string > > *arg2 = (wi::vector< std::string,std::allocator< std::string > > *) 0 ;
  
  arg1 = (wi::shadercompiler::CompilerInput *) carg1;
  arg2 = (wi::vector< std::string,std::allocator< std::string > > *) carg2;
  if (arg1) (arg1)->include_directories = *arg2;
}


SWIGEXPORTC SwigObj* wi_shadercompiler_CompilerInput_include_directories_get(SwigObj* carg1) {
  wi::vector< std::string,std::allocator< std::string > > *cppresult;
  wi::shadercompiler::CompilerInput *arg1 = (wi::shadercompiler::CompilerInput *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::shadercompiler::CompilerInput *) carg1;
  cppresult = (wi::vector< std::string,std::allocator< std::string > > *)& ((arg1)->include_directories);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_shadercompiler_CompilerInput_defines_set(SwigObj* carg1, SwigObj* carg2) {
  wi::shadercompiler::CompilerInput *arg1 = (wi::shadercompiler::CompilerInput *) 0 ;
  wi::vector< std::string,std::allocator< std::string > > *arg2 = (wi::vector< std::string,std::allocator< std::string > > *) 0 ;
  
  arg1 = (wi::shadercompiler::CompilerInput *) carg1;
  arg2 = (wi::vector< std::string,std::allocator< std::string > > *) carg2;
  if (arg1) (arg1)->defines = *arg2;
}


SWIGEXPORTC SwigObj* wi_shadercompiler_CompilerInput_defines_get(SwigObj* carg1) {
  wi::vector< std::string,std::allocator< std::string > > *cppresult;
  wi::shadercompiler::CompilerInput *arg1 = (wi::shadercompiler::CompilerInput *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::shadercompiler::CompilerInput *) carg1;
  cppresult = (wi::vector< std::string,std::allocator< std::string > > *)& ((arg1)->defines);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_shadercompiler_CompilerInput_new() {
  wi::shadercompiler::CompilerInput *cppresult;
  SwigObj* result;
  
  cppresult = (wi::shadercompiler::CompilerInput *)new wi::shadercompiler::CompilerInput();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_shadercompiler_CompilerInput_delete(SwigObj* carg1) {
  wi::shadercompiler::CompilerInput *arg1 = (wi::shadercompiler::CompilerInput *) 0 ;
  
  arg1 = (wi::shadercompiler::CompilerInput *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_shadercompiler_CompilerOutput_internal_state_set(SwigObj* carg1, SwigObj* carg2) {
  wi::shadercompiler::CompilerOutput *arg1 = (wi::shadercompiler::CompilerOutput *) 0 ;
  std::shared_ptr< void > arg2 ;
  
  arg1 = (wi::shadercompiler::CompilerOutput *) carg1;
  arg2 = *(std::shared_ptr< void > *)carg2;
  if (arg1) (arg1)->internal_state = arg2;
}


SWIGEXPORTC SwigObj* wi_shadercompiler_CompilerOutput_internal_state_get(SwigObj* carg1) {
  std::shared_ptr< void > cppresult;
  wi::shadercompiler::CompilerOutput *arg1 = (wi::shadercompiler::CompilerOutput *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::shadercompiler::CompilerOutput *) carg1;
  cppresult =  ((arg1)->internal_state);
  result = (SwigObj*)new std::shared_ptr< void >(cppresult);
  return result;
}


SWIGEXPORTC bool wi_shadercompiler_CompilerOutput_IsValid(SwigObj* carg1) {
  bool cppresult;
  wi::shadercompiler::CompilerOutput *arg1 = (wi::shadercompiler::CompilerOutput *) 0 ;
  bool result;
  
  arg1 = (wi::shadercompiler::CompilerOutput *) carg1;
  cppresult = (bool)((wi::shadercompiler::CompilerOutput const *)arg1)->IsValid();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_shadercompiler_CompilerOutput_shaderdata_set(SwigObj* carg1, SwigObj* carg2) {
  wi::shadercompiler::CompilerOutput *arg1 = (wi::shadercompiler::CompilerOutput *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  arg1 = (wi::shadercompiler::CompilerOutput *) carg1;
  arg2 = (uint8_t *) carg2;
  if (arg1) (arg1)->shaderdata = (uint8_t const *)arg2;
}


SWIGEXPORTC SwigObj* wi_shadercompiler_CompilerOutput_shaderdata_get(SwigObj* carg1) {
  uint8_t *cppresult;
  wi::shadercompiler::CompilerOutput *arg1 = (wi::shadercompiler::CompilerOutput *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::shadercompiler::CompilerOutput *) carg1;
  cppresult = (uint8_t *) ((arg1)->shaderdata);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_shadercompiler_CompilerOutput_shadersize_set(SwigObj* carg1, size_t carg2) {
  wi::shadercompiler::CompilerOutput *arg1 = (wi::shadercompiler::CompilerOutput *) 0 ;
  size_t arg2 ;
  
  arg1 = (wi::shadercompiler::CompilerOutput *) carg1;
  arg2 = (size_t) carg2;
  if (arg1) (arg1)->shadersize = arg2;
}


SWIGEXPORTC size_t wi_shadercompiler_CompilerOutput_shadersize_get(SwigObj* carg1) {
  size_t cppresult;
  wi::shadercompiler::CompilerOutput *arg1 = (wi::shadercompiler::CompilerOutput *) 0 ;
  size_t result;
  
  arg1 = (wi::shadercompiler::CompilerOutput *) carg1;
  cppresult =  ((arg1)->shadersize);
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void wi_shadercompiler_CompilerOutput_shaderhash_set(SwigObj* carg1, SwigObj* carg2) {
  wi::shadercompiler::CompilerOutput *arg1 = (wi::shadercompiler::CompilerOutput *) 0 ;
  wi::vector< uint8_t,std::allocator< uint8_t > > *arg2 = (wi::vector< uint8_t,std::allocator< uint8_t > > *) 0 ;
  
  arg1 = (wi::shadercompiler::CompilerOutput *) carg1;
  arg2 = (wi::vector< uint8_t,std::allocator< uint8_t > > *) carg2;
  if (arg1) (arg1)->shaderhash = *arg2;
}


SWIGEXPORTC SwigObj* wi_shadercompiler_CompilerOutput_shaderhash_get(SwigObj* carg1) {
  wi::vector< uint8_t,std::allocator< uint8_t > > *cppresult;
  wi::shadercompiler::CompilerOutput *arg1 = (wi::shadercompiler::CompilerOutput *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::shadercompiler::CompilerOutput *) carg1;
  cppresult = (wi::vector< uint8_t,std::allocator< uint8_t > > *)& ((arg1)->shaderhash);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_shadercompiler_CompilerOutput_error_message_set(SwigObj* carg1, SwigObj* carg2) {
  wi::shadercompiler::CompilerOutput *arg1 = (wi::shadercompiler::CompilerOutput *) 0 ;
  std::string arg2 ;
  
  arg1 = (wi::shadercompiler::CompilerOutput *) carg1;
  arg2 = *(std::string *)carg2;
  if (arg1) (arg1)->error_message = arg2;
}


SWIGEXPORTC SwigObj* wi_shadercompiler_CompilerOutput_error_message_get(SwigObj* carg1) {
  std::string cppresult;
  wi::shadercompiler::CompilerOutput *arg1 = (wi::shadercompiler::CompilerOutput *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::shadercompiler::CompilerOutput *) carg1;
  cppresult =  ((arg1)->error_message);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC void wi_shadercompiler_CompilerOutput_dependencies_set(SwigObj* carg1, SwigObj* carg2) {
  wi::shadercompiler::CompilerOutput *arg1 = (wi::shadercompiler::CompilerOutput *) 0 ;
  wi::vector< std::string,std::allocator< std::string > > *arg2 = (wi::vector< std::string,std::allocator< std::string > > *) 0 ;
  
  arg1 = (wi::shadercompiler::CompilerOutput *) carg1;
  arg2 = (wi::vector< std::string,std::allocator< std::string > > *) carg2;
  if (arg1) (arg1)->dependencies = *arg2;
}


SWIGEXPORTC SwigObj* wi_shadercompiler_CompilerOutput_dependencies_get(SwigObj* carg1) {
  wi::vector< std::string,std::allocator< std::string > > *cppresult;
  wi::shadercompiler::CompilerOutput *arg1 = (wi::shadercompiler::CompilerOutput *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::shadercompiler::CompilerOutput *) carg1;
  cppresult = (wi::vector< std::string,std::allocator< std::string > > *)& ((arg1)->dependencies);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_shadercompiler_CompilerOutput_new() {
  wi::shadercompiler::CompilerOutput *cppresult;
  SwigObj* result;
  
  cppresult = (wi::shadercompiler::CompilerOutput *)new wi::shadercompiler::CompilerOutput();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_shadercompiler_CompilerOutput_delete(SwigObj* carg1) {
  wi::shadercompiler::CompilerOutput *arg1 = (wi::shadercompiler::CompilerOutput *) 0 ;
  
  arg1 = (wi::shadercompiler::CompilerOutput *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_shadercompiler_Compile(SwigObj* carg1, SwigObj* carg2) {
  wi::shadercompiler::CompilerInput *arg1 = 0 ;
  wi::shadercompiler::CompilerOutput *arg2 = 0 ;
  
  
  arg1 = (wi::shadercompiler::CompilerInput *) carg1;
  
  
  arg2 = (wi::shadercompiler::CompilerOutput *) carg2;
  
  wi::shadercompiler::Compile((wi::shadercompiler::CompilerInput const &)*arg1,*arg2);
}


SWIGEXPORTC bool wi_shadercompiler_SaveShaderAndMetadata(SwigObj* carg1, SwigObj* carg2) {
  bool cppresult;
  std::string *arg1 = 0 ;
  wi::shadercompiler::CompilerOutput *arg2 = 0 ;
  bool result;
  
  
  arg1 = (std::string *) carg1;
  
  
  arg2 = (wi::shadercompiler::CompilerOutput *) carg2;
  
  cppresult = (bool)wi::shadercompiler::SaveShaderAndMetadata((std::string const &)*arg1,(wi::shadercompiler::CompilerOutput const &)*arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_shadercompiler_IsShaderOutdated(SwigObj* carg1) {
  bool cppresult;
  std::string *arg1 = 0 ;
  bool result;
  
  
  arg1 = (std::string *) carg1;
  
  cppresult = (bool)wi::shadercompiler::IsShaderOutdated((std::string const &)*arg1);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_shadercompiler_RegisterShader(SwigObj* carg1) {
  std::string *arg1 = 0 ;
  
  
  arg1 = (std::string *) carg1;
  
  wi::shadercompiler::RegisterShader((std::string const &)*arg1);
}


SWIGEXPORTC size_t wi_shadercompiler_GetRegisteredShaderCount() {
  size_t cppresult;
  size_t result;
  
  cppresult = wi::shadercompiler::GetRegisteredShaderCount();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC bool wi_shadercompiler_CheckRegisteredShadersOutdated() {
  bool cppresult;
  bool result;
  
  cppresult = (bool)wi::shadercompiler::CheckRegisteredShadersOutdated();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_SpinLock_lock(SwigObj* carg1) {
  wi::SpinLock *arg1 = (wi::SpinLock *) 0 ;
  
  arg1 = (wi::SpinLock *) carg1;
  (arg1)->lock();
}


SWIGEXPORTC bool wi_SpinLock_try_lock(SwigObj* carg1) {
  bool cppresult;
  wi::SpinLock *arg1 = (wi::SpinLock *) 0 ;
  bool result;
  
  arg1 = (wi::SpinLock *) carg1;
  cppresult = (bool)(arg1)->try_lock();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_SpinLock_unlock(SwigObj* carg1) {
  wi::SpinLock *arg1 = (wi::SpinLock *) 0 ;
  
  arg1 = (wi::SpinLock *) carg1;
  (arg1)->unlock();
}


SWIGEXPORTC SwigObj* wi_SpinLock_new() {
  wi::SpinLock *cppresult;
  SwigObj* result;
  
  cppresult = (wi::SpinLock *)new wi::SpinLock();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_SpinLock_delete(SwigObj* carg1) {
  wi::SpinLock *arg1 = (wi::SpinLock *) 0 ;
  
  arg1 = (wi::SpinLock *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_Sprite__flags_set(SwigObj* carg1, SwigObj* carg2) {
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (wi::Sprite *) carg1;
  arg2 = *(uint32_t *)carg2;
  if (arg1) (arg1)->_flags = arg2;
}


SWIGEXPORTC SwigObj* wi_Sprite__flags_get(SwigObj* carg1) {
  uint32_t cppresult;
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Sprite *) carg1;
  cppresult =  ((arg1)->_flags);
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC void wi_Sprite_textureName_set(SwigObj* carg1, SwigObj* carg2) {
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  std::string arg2 ;
  
  arg1 = (wi::Sprite *) carg1;
  arg2 = *(std::string *)carg2;
  if (arg1) (arg1)->textureName = arg2;
}


SWIGEXPORTC SwigObj* wi_Sprite_textureName_get(SwigObj* carg1) {
  std::string cppresult;
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Sprite *) carg1;
  cppresult =  ((arg1)->textureName);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC void wi_Sprite_maskName_set(SwigObj* carg1, SwigObj* carg2) {
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  std::string arg2 ;
  
  arg1 = (wi::Sprite *) carg1;
  arg2 = *(std::string *)carg2;
  if (arg1) (arg1)->maskName = arg2;
}


SWIGEXPORTC SwigObj* wi_Sprite_maskName_get(SwigObj* carg1) {
  std::string cppresult;
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Sprite *) carg1;
  cppresult =  ((arg1)->maskName);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Sprite_new_rcstd_string_rcstd_string(SwigObj* carg1, SwigObj* carg2) {
  wi::Sprite *cppresult;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::string *) carg1;
  
  
  arg2 = (std::string *) carg2;
  
  cppresult = (wi::Sprite *)new wi::Sprite((std::string const &)*arg1,(std::string const &)*arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Sprite_new_rcstd_string(SwigObj* carg1) {
  wi::Sprite *cppresult;
  std::string *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::string *) carg1;
  
  cppresult = (wi::Sprite *)new wi::Sprite((std::string const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Sprite_new() {
  wi::Sprite *cppresult;
  SwigObj* result;
  
  cppresult = (wi::Sprite *)new wi::Sprite();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_Sprite_delete(SwigObj* carg1) {
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  
  arg1 = (wi::Sprite *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_Sprite_FixedUpdate(SwigObj* carg1) {
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  
  arg1 = (wi::Sprite *) carg1;
  (arg1)->FixedUpdate();
}


SWIGEXPORTC void wi_Sprite_Update(SwigObj* carg1, float carg2) {
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  float arg2 ;
  
  arg1 = (wi::Sprite *) carg1;
  arg2 = (float) carg2;
  (arg1)->Update(arg2);
}


SWIGEXPORTC void wi_Sprite_Draw(SwigObj* carg1, SwigObj* carg2) {
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  wi::graphics::CommandList arg2 ;
  
  arg1 = (wi::Sprite *) carg1;
  arg2 = *(wi::graphics::CommandList *)carg2;
  ((wi::Sprite const *)arg1)->Draw(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void wi_Sprite_SetHidden_b(SwigObj* carg1, bool carg2) {
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  bool arg2 ;
  
  arg1 = (wi::Sprite *) carg1;
  arg2 = (bool) carg2;
  (arg1)->SetHidden(arg2);
}


SWIGEXPORTC void wi_Sprite_SetHidden(SwigObj* carg1) {
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  
  arg1 = (wi::Sprite *) carg1;
  (arg1)->SetHidden();
}


SWIGEXPORTC bool wi_Sprite_IsHidden(SwigObj* carg1) {
  bool cppresult;
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  bool result;
  
  arg1 = (wi::Sprite *) carg1;
  cppresult = (bool)((wi::Sprite const *)arg1)->IsHidden();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_Sprite_SetDisableUpdate_b(SwigObj* carg1, bool carg2) {
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  bool arg2 ;
  
  arg1 = (wi::Sprite *) carg1;
  arg2 = (bool) carg2;
  (arg1)->SetDisableUpdate(arg2);
}


SWIGEXPORTC void wi_Sprite_SetDisableUpdate(SwigObj* carg1) {
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  
  arg1 = (wi::Sprite *) carg1;
  (arg1)->SetDisableUpdate();
}


SWIGEXPORTC void wi_Sprite_SetCameraFacing_b(SwigObj* carg1, bool carg2) {
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  bool arg2 ;
  
  arg1 = (wi::Sprite *) carg1;
  arg2 = (bool) carg2;
  (arg1)->SetCameraFacing(arg2);
}


SWIGEXPORTC void wi_Sprite_SetCameraFacing(SwigObj* carg1) {
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  
  arg1 = (wi::Sprite *) carg1;
  (arg1)->SetCameraFacing();
}


SWIGEXPORTC void wi_Sprite_SetCameraScaling_b(SwigObj* carg1, bool carg2) {
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  bool arg2 ;
  
  arg1 = (wi::Sprite *) carg1;
  arg2 = (bool) carg2;
  (arg1)->SetCameraScaling(arg2);
}


SWIGEXPORTC void wi_Sprite_SetCameraScaling(SwigObj* carg1) {
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  
  arg1 = (wi::Sprite *) carg1;
  (arg1)->SetCameraScaling();
}


SWIGEXPORTC bool wi_Sprite_IsDisableUpdate(SwigObj* carg1) {
  bool cppresult;
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  bool result;
  
  arg1 = (wi::Sprite *) carg1;
  cppresult = (bool)((wi::Sprite const *)arg1)->IsDisableUpdate();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_Sprite_IsCameraFacing(SwigObj* carg1) {
  bool cppresult;
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  bool result;
  
  arg1 = (wi::Sprite *) carg1;
  cppresult = (bool)((wi::Sprite const *)arg1)->IsCameraFacing();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_Sprite_IsCameraScaling(SwigObj* carg1) {
  bool cppresult;
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  bool result;
  
  arg1 = (wi::Sprite *) carg1;
  cppresult = (bool)((wi::Sprite const *)arg1)->IsCameraScaling();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_Sprite_params_set(SwigObj* carg1, SwigObj* carg2) {
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  wi::image::Params arg2 ;
  
  arg1 = (wi::Sprite *) carg1;
  arg2 = *(wi::image::Params *)carg2;
  if (arg1) (arg1)->params = arg2;
}


SWIGEXPORTC SwigObj* wi_Sprite_params_get(SwigObj* carg1) {
  wi::image::Params cppresult;
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Sprite *) carg1;
  cppresult =  ((arg1)->params);
  result = (SwigObj*)new wi::image::Params(cppresult);
  return result;
}


SWIGEXPORTC void wi_Sprite_textureResource_set(SwigObj* carg1, SwigObj* carg2) {
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  wi::Resource arg2 ;
  
  arg1 = (wi::Sprite *) carg1;
  arg2 = *(wi::Resource *)carg2;
  if (arg1) (arg1)->textureResource = arg2;
}


SWIGEXPORTC SwigObj* wi_Sprite_textureResource_get(SwigObj* carg1) {
  wi::Resource cppresult;
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Sprite *) carg1;
  cppresult =  ((arg1)->textureResource);
  result = (SwigObj*)new wi::Resource(cppresult);
  return result;
}


SWIGEXPORTC void wi_Sprite_maskResource_set(SwigObj* carg1, SwigObj* carg2) {
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  wi::Resource arg2 ;
  
  arg1 = (wi::Sprite *) carg1;
  arg2 = *(wi::Resource *)carg2;
  if (arg1) (arg1)->maskResource = arg2;
}


SWIGEXPORTC SwigObj* wi_Sprite_maskResource_get(SwigObj* carg1) {
  wi::Resource cppresult;
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Sprite *) carg1;
  cppresult =  ((arg1)->maskResource);
  result = (SwigObj*)new wi::Resource(cppresult);
  return result;
}


SWIGEXPORTC void wi_Sprite_backgroundResource_set(SwigObj* carg1, SwigObj* carg2) {
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  wi::Resource arg2 ;
  
  arg1 = (wi::Sprite *) carg1;
  arg2 = *(wi::Resource *)carg2;
  if (arg1) (arg1)->backgroundResource = arg2;
}


SWIGEXPORTC SwigObj* wi_Sprite_backgroundResource_get(SwigObj* carg1) {
  wi::Resource cppresult;
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Sprite *) carg1;
  cppresult =  ((arg1)->backgroundResource);
  result = (SwigObj*)new wi::Resource(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_Sprite_GetTexture(SwigObj* carg1) {
  wi::graphics::Texture *cppresult;
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Sprite *) carg1;
  cppresult = (wi::graphics::Texture *)((wi::Sprite const *)arg1)->GetTexture();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_Sprite_anim_set(SwigObj* carg1, SwigObj* carg2) {
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  wi::Sprite::Anim *arg2 = (wi::Sprite::Anim *) 0 ;
  
  arg1 = (wi::Sprite *) carg1;
  arg2 = (wi::Sprite::Anim *) carg2;
  if (arg1) (arg1)->anim = *arg2;
}


SWIGEXPORTC SwigObj* wi_Sprite_anim_get(SwigObj* carg1) {
  wi::Sprite::Anim *cppresult;
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Sprite *) carg1;
  cppresult = (wi::Sprite::Anim *)& ((arg1)->anim);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Sprite_getTexture(SwigObj* carg1) {
  wi::graphics::Texture *cppresult;
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Sprite *) carg1;
  cppresult = (wi::graphics::Texture *)((wi::Sprite const *)arg1)->getTexture();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_Sprite_Serialize(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  wi::Sprite *arg1 = (wi::Sprite *) 0 ;
  wi::Archive *arg2 = 0 ;
  wi::ecs::EntitySerializer *arg3 = 0 ;
  
  arg1 = (wi::Sprite *) carg1;
  
  arg2 = (wi::Archive *) carg2;
  
  
  arg3 = (wi::ecs::EntitySerializer *) carg3;
  
  (arg1)->Serialize(*arg2,*arg3);
}


SWIGEXPORTC void wi_SpriteFont__flags_set(SwigObj* carg1, SwigObj* carg2) {
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (wi::SpriteFont *) carg1;
  arg2 = *(uint32_t *)carg2;
  if (arg1) (arg1)->_flags = arg2;
}


SWIGEXPORTC SwigObj* wi_SpriteFont__flags_get(SwigObj* carg1) {
  uint32_t cppresult;
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::SpriteFont *) carg1;
  cppresult =  ((arg1)->_flags);
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC void wi_SpriteFont_text_set(SwigObj* carg1, SwigObj* carg2) {
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  std::wstring arg2 ;
  
  arg1 = (wi::SpriteFont *) carg1;
  arg2 = *(std::wstring *)carg2;
  if (arg1) (arg1)->text = arg2;
}


SWIGEXPORTC SwigObj* wi_SpriteFont_text_get(SwigObj* carg1) {
  std::wstring cppresult;
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::SpriteFont *) carg1;
  cppresult =  ((arg1)->text);
  result = (SwigObj*)new std::wstring(cppresult);
  return result;
}


SWIGEXPORTC void wi_SpriteFont_params_set(SwigObj* carg1, SwigObj* carg2) {
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  wi::font::Params arg2 ;
  
  arg1 = (wi::SpriteFont *) carg1;
  arg2 = *(wi::font::Params *)carg2;
  if (arg1) (arg1)->params = arg2;
}


SWIGEXPORTC SwigObj* wi_SpriteFont_params_get(SwigObj* carg1) {
  wi::font::Params cppresult;
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::SpriteFont *) carg1;
  cppresult =  ((arg1)->params);
  result = (SwigObj*)new wi::font::Params(cppresult);
  return result;
}


SWIGEXPORTC void wi_SpriteFont_fontStyleResource_set(SwigObj* carg1, SwigObj* carg2) {
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  wi::Resource arg2 ;
  
  arg1 = (wi::SpriteFont *) carg1;
  arg2 = *(wi::Resource *)carg2;
  if (arg1) (arg1)->fontStyleResource = arg2;
}


SWIGEXPORTC SwigObj* wi_SpriteFont_fontStyleResource_get(SwigObj* carg1) {
  wi::Resource cppresult;
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::SpriteFont *) carg1;
  cppresult =  ((arg1)->fontStyleResource);
  result = (SwigObj*)new wi::Resource(cppresult);
  return result;
}


SWIGEXPORTC void wi_SpriteFont_fontStyleName_set(SwigObj* carg1, SwigObj* carg2) {
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  std::string arg2 ;
  
  arg1 = (wi::SpriteFont *) carg1;
  arg2 = *(std::string *)carg2;
  if (arg1) (arg1)->fontStyleName = arg2;
}


SWIGEXPORTC SwigObj* wi_SpriteFont_fontStyleName_get(SwigObj* carg1) {
  std::string cppresult;
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::SpriteFont *) carg1;
  cppresult =  ((arg1)->fontStyleName);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_SpriteFont_new() {
  wi::SpriteFont *cppresult;
  SwigObj* result;
  
  cppresult = (wi::SpriteFont *)new wi::SpriteFont();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_SpriteFont_new_rcstd_string_rcwi_font_Params_rcstd_string(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  wi::SpriteFont *cppresult;
  std::string *arg1 = 0 ;
  wi::font::Params *arg2 = 0 ;
  std::string *arg3 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::string *) carg1;
  
  
  arg2 = (wi::font::Params *) carg2;
  
  
  arg3 = (std::string *) carg3;
  
  cppresult = (wi::SpriteFont *)new wi::SpriteFont((std::string const &)*arg1,(wi::font::Params const &)*arg2,(std::string const &)*arg3);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_SpriteFont_new_rcstd_string_rcwi_font_Params(SwigObj* carg1, SwigObj* carg2) {
  wi::SpriteFont *cppresult;
  std::string *arg1 = 0 ;
  wi::font::Params *arg2 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::string *) carg1;
  
  
  arg2 = (wi::font::Params *) carg2;
  
  cppresult = (wi::SpriteFont *)new wi::SpriteFont((std::string const &)*arg1,(wi::font::Params const &)*arg2);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_SpriteFont_new_rcstd_string(SwigObj* carg1) {
  wi::SpriteFont *cppresult;
  std::string *arg1 = 0 ;
  SwigObj* result;
  
  
  arg1 = (std::string *) carg1;
  
  cppresult = (wi::SpriteFont *)new wi::SpriteFont((std::string const &)*arg1);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_SpriteFont_delete(SwigObj* carg1) {
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  
  arg1 = (wi::SpriteFont *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_SpriteFont_FixedUpdate(SwigObj* carg1) {
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  
  arg1 = (wi::SpriteFont *) carg1;
  (arg1)->FixedUpdate();
}


SWIGEXPORTC void wi_SpriteFont_Update(SwigObj* carg1, float carg2) {
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  float arg2 ;
  
  arg1 = (wi::SpriteFont *) carg1;
  arg2 = (float) carg2;
  (arg1)->Update(arg2);
}


SWIGEXPORTC void wi_SpriteFont_Draw(SwigObj* carg1, SwigObj* carg2) {
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  wi::graphics::CommandList arg2 ;
  
  arg1 = (wi::SpriteFont *) carg1;
  arg2 = *(wi::graphics::CommandList *)carg2;
  ((wi::SpriteFont const *)arg1)->Draw(SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void wi_SpriteFont_SetHidden_b(SwigObj* carg1, bool carg2) {
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  bool arg2 ;
  
  arg1 = (wi::SpriteFont *) carg1;
  arg2 = (bool) carg2;
  (arg1)->SetHidden(arg2);
}


SWIGEXPORTC void wi_SpriteFont_SetHidden(SwigObj* carg1) {
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  
  arg1 = (wi::SpriteFont *) carg1;
  (arg1)->SetHidden();
}


SWIGEXPORTC bool wi_SpriteFont_IsHidden(SwigObj* carg1) {
  bool cppresult;
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  bool result;
  
  arg1 = (wi::SpriteFont *) carg1;
  cppresult = (bool)((wi::SpriteFont const *)arg1)->IsHidden();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_SpriteFont_SetDisableUpdate_b(SwigObj* carg1, bool carg2) {
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  bool arg2 ;
  
  arg1 = (wi::SpriteFont *) carg1;
  arg2 = (bool) carg2;
  (arg1)->SetDisableUpdate(arg2);
}


SWIGEXPORTC void wi_SpriteFont_SetDisableUpdate(SwigObj* carg1) {
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  
  arg1 = (wi::SpriteFont *) carg1;
  (arg1)->SetDisableUpdate();
}


SWIGEXPORTC void wi_SpriteFont_SetCameraFacing_b(SwigObj* carg1, bool carg2) {
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  bool arg2 ;
  
  arg1 = (wi::SpriteFont *) carg1;
  arg2 = (bool) carg2;
  (arg1)->SetCameraFacing(arg2);
}


SWIGEXPORTC void wi_SpriteFont_SetCameraFacing(SwigObj* carg1) {
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  
  arg1 = (wi::SpriteFont *) carg1;
  (arg1)->SetCameraFacing();
}


SWIGEXPORTC void wi_SpriteFont_SetCameraScaling_b(SwigObj* carg1, bool carg2) {
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  bool arg2 ;
  
  arg1 = (wi::SpriteFont *) carg1;
  arg2 = (bool) carg2;
  (arg1)->SetCameraScaling(arg2);
}


SWIGEXPORTC void wi_SpriteFont_SetCameraScaling(SwigObj* carg1) {
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  
  arg1 = (wi::SpriteFont *) carg1;
  (arg1)->SetCameraScaling();
}


SWIGEXPORTC bool wi_SpriteFont_IsDisableUpdate(SwigObj* carg1) {
  bool cppresult;
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  bool result;
  
  arg1 = (wi::SpriteFont *) carg1;
  cppresult = (bool)((wi::SpriteFont const *)arg1)->IsDisableUpdate();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_SpriteFont_IsCameraFacing(SwigObj* carg1) {
  bool cppresult;
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  bool result;
  
  arg1 = (wi::SpriteFont *) carg1;
  cppresult = (bool)((wi::SpriteFont const *)arg1)->IsCameraFacing();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_SpriteFont_IsCameraScaling(SwigObj* carg1) {
  bool cppresult;
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  bool result;
  
  arg1 = (wi::SpriteFont *) carg1;
  cppresult = (bool)((wi::SpriteFont const *)arg1)->IsCameraScaling();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_SpriteFont_TextSize(SwigObj* carg1) {
  XMFLOAT2 cppresult;
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::SpriteFont *) carg1;
  cppresult = ((wi::SpriteFont const *)arg1)->TextSize();
  result = (SwigObj*)new XMFLOAT2(cppresult);
  return result;
}


SWIGEXPORTC float wi_SpriteFont_TextWidth(SwigObj* carg1) {
  float cppresult;
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  float result;
  
  arg1 = (wi::SpriteFont *) carg1;
  cppresult = (float)((wi::SpriteFont const *)arg1)->TextWidth();
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC float wi_SpriteFont_TextHeight(SwigObj* carg1) {
  float cppresult;
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  float result;
  
  arg1 = (wi::SpriteFont *) carg1;
  cppresult = (float)((wi::SpriteFont const *)arg1)->TextHeight();
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void wi_SpriteFont_SetText_rcstd_string(SwigObj* carg1, SwigObj* carg2) {
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (wi::SpriteFont *) carg1;
  
  arg2 = (std::string *) carg2;
  
  (arg1)->SetText((std::string const &)*arg2);
}


SWIGEXPORTC void wi_SpriteFont_SetText_zstd_string(SwigObj* carg1, SwigObj* carg2) {
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (wi::SpriteFont *) carg1;
  arg2 = *(std::string * *)carg2;
  (arg1)->SetText((std::string &&)*arg2);
}


SWIGEXPORTC void wi_SpriteFont_SetText_rcstd_wstring(SwigObj* carg1, SwigObj* carg2) {
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  std::wstring *arg2 = 0 ;
  
  arg1 = (wi::SpriteFont *) carg1;
  
  arg2 = (std::wstring *) carg2;
  
  (arg1)->SetText((std::wstring const &)*arg2);
}


SWIGEXPORTC void wi_SpriteFont_SetText_zstd_wstring(SwigObj* carg1, SwigObj* carg2) {
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  std::wstring *arg2 = 0 ;
  
  arg1 = (wi::SpriteFont *) carg1;
  arg2 = *(std::wstring * *)carg2;
  (arg1)->SetText((std::wstring &&)*arg2);
}


SWIGEXPORTC SwigObj* wi_SpriteFont_GetTextA(SwigObj* carg1) {
  std::string cppresult;
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::SpriteFont *) carg1;
  cppresult = ((wi::SpriteFont const *)arg1)->GetTextA();
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC SwigObj* wi_SpriteFont_GetText(SwigObj* carg1) {
  std::wstring *cppresult;
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::SpriteFont *) carg1;
  cppresult = (std::wstring *) &((wi::SpriteFont const *)arg1)->GetText();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC size_t wi_SpriteFont_GetCurrentTextLength(SwigObj* carg1) {
  size_t cppresult;
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  size_t result;
  
  arg1 = (wi::SpriteFont *) carg1;
  cppresult = ((wi::SpriteFont const *)arg1)->GetCurrentTextLength();
  result = (size_t)cppresult;
  return result;
}


SWIGEXPORTC void wi_SpriteFont_anim_set(SwigObj* carg1, SwigObj* carg2) {
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  wi::SpriteFont::Animation *arg2 = (wi::SpriteFont::Animation *) 0 ;
  
  arg1 = (wi::SpriteFont *) carg1;
  arg2 = (wi::SpriteFont::Animation *) carg2;
  if (arg1) (arg1)->anim = *arg2;
}


SWIGEXPORTC SwigObj* wi_SpriteFont_anim_get(SwigObj* carg1) {
  wi::SpriteFont::Animation *cppresult;
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::SpriteFont *) carg1;
  cppresult = (wi::SpriteFont::Animation *)& ((arg1)->anim);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_SpriteFont_Serialize(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  wi::SpriteFont *arg1 = (wi::SpriteFont *) 0 ;
  wi::Archive *arg2 = 0 ;
  wi::ecs::EntitySerializer *arg3 = 0 ;
  
  arg1 = (wi::SpriteFont *) carg1;
  
  arg2 = (wi::Archive *) carg2;
  
  
  arg3 = (wi::ecs::EntitySerializer *) carg3;
  
  (arg1)->Serialize(*arg2,*arg3);
}


SWIGEXPORTC void wi_Timer_timestamp_set(SwigObj* carg1, SwigObj* carg2) {
  wi::Timer *arg1 = (wi::Timer *) 0 ;
  std::chrono::high_resolution_clock::time_point arg2 ;
  
  arg1 = (wi::Timer *) carg1;
  arg2 = *(std::chrono::high_resolution_clock::time_point *)carg2;
  if (arg1) (arg1)->timestamp = arg2;
}


SWIGEXPORTC SwigObj* wi_Timer_timestamp_get(SwigObj* carg1) {
  std::chrono::high_resolution_clock::time_point cppresult;
  wi::Timer *arg1 = (wi::Timer *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::Timer *) carg1;
  cppresult =  ((arg1)->timestamp);
  result = (SwigObj*)new std::chrono::high_resolution_clock::time_point(cppresult);
  return result;
}


SWIGEXPORTC void wi_Timer_record(SwigObj* carg1) {
  wi::Timer *arg1 = (wi::Timer *) 0 ;
  
  arg1 = (wi::Timer *) carg1;
  (arg1)->record();
}


SWIGEXPORTC double wi_Timer_elapsed_seconds_since(SwigObj* carg1, SwigObj* carg2) {
  double cppresult;
  wi::Timer *arg1 = (wi::Timer *) 0 ;
  std::chrono::high_resolution_clock::time_point arg2 ;
  double result;
  
  arg1 = (wi::Timer *) carg1;
  arg2 = *(std::chrono::high_resolution_clock::time_point *)carg2;
  cppresult = (double)(arg1)->elapsed_seconds_since(SWIG_STD_MOVE(arg2));
  result = (double)cppresult;
  return result;
}


SWIGEXPORTC double wi_Timer_elapsed_seconds(SwigObj* carg1) {
  double cppresult;
  wi::Timer *arg1 = (wi::Timer *) 0 ;
  double result;
  
  arg1 = (wi::Timer *) carg1;
  cppresult = (double)(arg1)->elapsed_seconds();
  result = (double)cppresult;
  return result;
}


SWIGEXPORTC double wi_Timer_elapsed_milliseconds(SwigObj* carg1) {
  double cppresult;
  wi::Timer *arg1 = (wi::Timer *) 0 ;
  double result;
  
  arg1 = (wi::Timer *) carg1;
  cppresult = (double)(arg1)->elapsed_milliseconds();
  result = (double)cppresult;
  return result;
}


SWIGEXPORTC double wi_Timer_elapsed(SwigObj* carg1) {
  double cppresult;
  wi::Timer *arg1 = (wi::Timer *) 0 ;
  double result;
  
  arg1 = (wi::Timer *) carg1;
  cppresult = (double)(arg1)->elapsed();
  result = (double)cppresult;
  return result;
}


SWIGEXPORTC double wi_Timer_record_elapsed_seconds(SwigObj* carg1) {
  double cppresult;
  wi::Timer *arg1 = (wi::Timer *) 0 ;
  double result;
  
  arg1 = (wi::Timer *) carg1;
  cppresult = (double)(arg1)->record_elapsed_seconds();
  result = (double)cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_Timer_new() {
  wi::Timer *cppresult;
  SwigObj* result;
  
  cppresult = (wi::Timer *)new wi::Timer();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_Timer_delete(SwigObj* carg1) {
  wi::Timer *arg1 = (wi::Timer *) 0 ;
  
  arg1 = (wi::Timer *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_TrailRenderer_points_set(SwigObj* carg1, SwigObj* carg2) {
  wi::TrailRenderer *arg1 = (wi::TrailRenderer *) 0 ;
  wi::vector< wi::TrailRenderer::TrailPoint,std::allocator< wi::TrailRenderer::TrailPoint > > *arg2 = (wi::vector< wi::TrailRenderer::TrailPoint,std::allocator< wi::TrailRenderer::TrailPoint > > *) 0 ;
  
  arg1 = (wi::TrailRenderer *) carg1;
  arg2 = (wi::vector< wi::TrailRenderer::TrailPoint,std::allocator< wi::TrailRenderer::TrailPoint > > *) carg2;
  if (arg1) (arg1)->points = *arg2;
}


SWIGEXPORTC SwigObj* wi_TrailRenderer_points_get(SwigObj* carg1) {
  wi::vector< wi::TrailRenderer::TrailPoint,std::allocator< wi::TrailRenderer::TrailPoint > > *cppresult;
  wi::TrailRenderer *arg1 = (wi::TrailRenderer *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::TrailRenderer *) carg1;
  cppresult = (wi::vector< wi::TrailRenderer::TrailPoint,std::allocator< wi::TrailRenderer::TrailPoint > > *)& ((arg1)->points);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_TrailRenderer_cuts_set(SwigObj* carg1, SwigObj* carg2) {
  wi::TrailRenderer *arg1 = (wi::TrailRenderer *) 0 ;
  wi::vector< uint32_t,std::allocator< uint32_t > > *arg2 = (wi::vector< uint32_t,std::allocator< uint32_t > > *) 0 ;
  
  arg1 = (wi::TrailRenderer *) carg1;
  arg2 = (wi::vector< uint32_t,std::allocator< uint32_t > > *) carg2;
  if (arg1) (arg1)->cuts = *arg2;
}


SWIGEXPORTC SwigObj* wi_TrailRenderer_cuts_get(SwigObj* carg1) {
  wi::vector< uint32_t,std::allocator< uint32_t > > *cppresult;
  wi::TrailRenderer *arg1 = (wi::TrailRenderer *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::TrailRenderer *) carg1;
  cppresult = (wi::vector< uint32_t,std::allocator< uint32_t > > *)& ((arg1)->cuts);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_TrailRenderer_color_set(SwigObj* carg1, SwigObj* carg2) {
  wi::TrailRenderer *arg1 = (wi::TrailRenderer *) 0 ;
  XMFLOAT4 arg2 ;
  
  arg1 = (wi::TrailRenderer *) carg1;
  arg2 = *(XMFLOAT4 *)carg2;
  if (arg1) (arg1)->color = arg2;
}


SWIGEXPORTC SwigObj* wi_TrailRenderer_color_get(SwigObj* carg1) {
  XMFLOAT4 cppresult;
  wi::TrailRenderer *arg1 = (wi::TrailRenderer *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::TrailRenderer *) carg1;
  cppresult =  ((arg1)->color);
  result = (SwigObj*)new XMFLOAT4(cppresult);
  return result;
}


SWIGEXPORTC void wi_TrailRenderer_blendMode_set(SwigObj* carg1, SwigObj* carg2) {
  wi::TrailRenderer *arg1 = (wi::TrailRenderer *) 0 ;
  wi::enums::BLENDMODE arg2 ;
  
  arg1 = (wi::TrailRenderer *) carg1;
  arg2 = *(wi::enums::BLENDMODE *)carg2;
  if (arg1) (arg1)->blendMode = arg2;
}


SWIGEXPORTC SwigObj* wi_TrailRenderer_blendMode_get(SwigObj* carg1) {
  wi::enums::BLENDMODE cppresult;
  wi::TrailRenderer *arg1 = (wi::TrailRenderer *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::TrailRenderer *) carg1;
  cppresult =  ((arg1)->blendMode);
  result = (SwigObj*)new wi::enums::BLENDMODE(cppresult);
  return result;
}


SWIGEXPORTC void wi_TrailRenderer_subdivision_set(SwigObj* carg1, SwigObj* carg2) {
  wi::TrailRenderer *arg1 = (wi::TrailRenderer *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (wi::TrailRenderer *) carg1;
  arg2 = *(uint32_t *)carg2;
  if (arg1) (arg1)->subdivision = arg2;
}


SWIGEXPORTC SwigObj* wi_TrailRenderer_subdivision_get(SwigObj* carg1) {
  uint32_t cppresult;
  wi::TrailRenderer *arg1 = (wi::TrailRenderer *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::TrailRenderer *) carg1;
  cppresult =  ((arg1)->subdivision);
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC void wi_TrailRenderer_width_set(SwigObj* carg1, float carg2) {
  wi::TrailRenderer *arg1 = (wi::TrailRenderer *) 0 ;
  float arg2 ;
  
  arg1 = (wi::TrailRenderer *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORTC float wi_TrailRenderer_width_get(SwigObj* carg1) {
  float cppresult;
  wi::TrailRenderer *arg1 = (wi::TrailRenderer *) 0 ;
  float result;
  
  arg1 = (wi::TrailRenderer *) carg1;
  cppresult = (float) ((arg1)->width);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void wi_TrailRenderer_texture_set(SwigObj* carg1, SwigObj* carg2) {
  wi::TrailRenderer *arg1 = (wi::TrailRenderer *) 0 ;
  wi::graphics::Texture arg2 ;
  
  arg1 = (wi::TrailRenderer *) carg1;
  arg2 = *(wi::graphics::Texture *)carg2;
  if (arg1) (arg1)->texture = arg2;
}


SWIGEXPORTC SwigObj* wi_TrailRenderer_texture_get(SwigObj* carg1) {
  wi::graphics::Texture cppresult;
  wi::TrailRenderer *arg1 = (wi::TrailRenderer *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::TrailRenderer *) carg1;
  cppresult =  ((arg1)->texture);
  result = (SwigObj*)new wi::graphics::Texture(cppresult);
  return result;
}


SWIGEXPORTC void wi_TrailRenderer_texture2_set(SwigObj* carg1, SwigObj* carg2) {
  wi::TrailRenderer *arg1 = (wi::TrailRenderer *) 0 ;
  wi::graphics::Texture arg2 ;
  
  arg1 = (wi::TrailRenderer *) carg1;
  arg2 = *(wi::graphics::Texture *)carg2;
  if (arg1) (arg1)->texture2 = arg2;
}


SWIGEXPORTC SwigObj* wi_TrailRenderer_texture2_get(SwigObj* carg1) {
  wi::graphics::Texture cppresult;
  wi::TrailRenderer *arg1 = (wi::TrailRenderer *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::TrailRenderer *) carg1;
  cppresult =  ((arg1)->texture2);
  result = (SwigObj*)new wi::graphics::Texture(cppresult);
  return result;
}


SWIGEXPORTC void wi_TrailRenderer_texMulAdd_set(SwigObj* carg1, SwigObj* carg2) {
  wi::TrailRenderer *arg1 = (wi::TrailRenderer *) 0 ;
  XMFLOAT4 arg2 ;
  
  arg1 = (wi::TrailRenderer *) carg1;
  arg2 = *(XMFLOAT4 *)carg2;
  if (arg1) (arg1)->texMulAdd = arg2;
}


SWIGEXPORTC SwigObj* wi_TrailRenderer_texMulAdd_get(SwigObj* carg1) {
  XMFLOAT4 cppresult;
  wi::TrailRenderer *arg1 = (wi::TrailRenderer *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::TrailRenderer *) carg1;
  cppresult =  ((arg1)->texMulAdd);
  result = (SwigObj*)new XMFLOAT4(cppresult);
  return result;
}


SWIGEXPORTC void wi_TrailRenderer_texMulAdd2_set(SwigObj* carg1, SwigObj* carg2) {
  wi::TrailRenderer *arg1 = (wi::TrailRenderer *) 0 ;
  XMFLOAT4 arg2 ;
  
  arg1 = (wi::TrailRenderer *) carg1;
  arg2 = *(XMFLOAT4 *)carg2;
  if (arg1) (arg1)->texMulAdd2 = arg2;
}


SWIGEXPORTC SwigObj* wi_TrailRenderer_texMulAdd2_get(SwigObj* carg1) {
  XMFLOAT4 cppresult;
  wi::TrailRenderer *arg1 = (wi::TrailRenderer *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::TrailRenderer *) carg1;
  cppresult =  ((arg1)->texMulAdd2);
  result = (SwigObj*)new XMFLOAT4(cppresult);
  return result;
}


SWIGEXPORTC void wi_TrailRenderer_Cut(SwigObj* carg1) {
  wi::TrailRenderer *arg1 = (wi::TrailRenderer *) 0 ;
  
  arg1 = (wi::TrailRenderer *) carg1;
  (arg1)->Cut();
}


SWIGEXPORTC void wi_TrailRenderer_Draw(SwigObj* carg1, SwigObj* carg2, SwigObj* carg3) {
  wi::TrailRenderer *arg1 = (wi::TrailRenderer *) 0 ;
  wi::scene::CameraComponent *arg2 = 0 ;
  wi::graphics::CommandList arg3 ;
  
  arg1 = (wi::TrailRenderer *) carg1;
  
  arg2 = (wi::scene::CameraComponent *) carg2;
  
  arg3 = *(wi::graphics::CommandList *)carg3;
  ((wi::TrailRenderer const *)arg1)->Draw((wi::scene::CameraComponent const &)*arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORTC void wi_TrailRenderer_Initialize() {
  wi::TrailRenderer::Initialize();
}


SWIGEXPORTC SwigObj* wi_TrailRenderer_new() {
  wi::TrailRenderer *cppresult;
  SwigObj* result;
  
  cppresult = (wi::TrailRenderer *)new wi::TrailRenderer();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_TrailRenderer_delete(SwigObj* carg1) {
  wi::TrailRenderer *arg1 = (wi::TrailRenderer *) 0 ;
  
  arg1 = (wi::TrailRenderer *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_video_Video_title_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  std::string arg2 ;
  
  arg1 = (wi::video::Video *) carg1;
  arg2 = *(std::string *)carg2;
  if (arg1) (arg1)->title = arg2;
}


SWIGEXPORTC SwigObj* wi_video_Video_title_get(SwigObj* carg1) {
  std::string cppresult;
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::Video *) carg1;
  cppresult =  ((arg1)->title);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC void wi_video_Video_album_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  std::string arg2 ;
  
  arg1 = (wi::video::Video *) carg1;
  arg2 = *(std::string *)carg2;
  if (arg1) (arg1)->album = arg2;
}


SWIGEXPORTC SwigObj* wi_video_Video_album_get(SwigObj* carg1) {
  std::string cppresult;
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::Video *) carg1;
  cppresult =  ((arg1)->album);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC void wi_video_Video_artist_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  std::string arg2 ;
  
  arg1 = (wi::video::Video *) carg1;
  arg2 = *(std::string *)carg2;
  if (arg1) (arg1)->artist = arg2;
}


SWIGEXPORTC SwigObj* wi_video_Video_artist_get(SwigObj* carg1) {
  std::string cppresult;
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::Video *) carg1;
  cppresult =  ((arg1)->artist);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC void wi_video_Video_year_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  std::string arg2 ;
  
  arg1 = (wi::video::Video *) carg1;
  arg2 = *(std::string *)carg2;
  if (arg1) (arg1)->year = arg2;
}


SWIGEXPORTC SwigObj* wi_video_Video_year_get(SwigObj* carg1) {
  std::string cppresult;
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::Video *) carg1;
  cppresult =  ((arg1)->year);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC void wi_video_Video_comment_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  std::string arg2 ;
  
  arg1 = (wi::video::Video *) carg1;
  arg2 = *(std::string *)carg2;
  if (arg1) (arg1)->comment = arg2;
}


SWIGEXPORTC SwigObj* wi_video_Video_comment_get(SwigObj* carg1) {
  std::string cppresult;
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::Video *) carg1;
  cppresult =  ((arg1)->comment);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC void wi_video_Video_genre_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  std::string arg2 ;
  
  arg1 = (wi::video::Video *) carg1;
  arg2 = *(std::string *)carg2;
  if (arg1) (arg1)->genre = arg2;
}


SWIGEXPORTC SwigObj* wi_video_Video_genre_get(SwigObj* carg1) {
  std::string cppresult;
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::Video *) carg1;
  cppresult =  ((arg1)->genre);
  result = (SwigObj*)new std::string(cppresult);
  return result;
}


SWIGEXPORTC void wi_video_Video_padded_width_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (wi::video::Video *) carg1;
  arg2 = *(uint32_t *)carg2;
  if (arg1) (arg1)->padded_width = arg2;
}


SWIGEXPORTC SwigObj* wi_video_Video_padded_width_get(SwigObj* carg1) {
  uint32_t cppresult;
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::Video *) carg1;
  cppresult =  ((arg1)->padded_width);
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC void wi_video_Video_padded_height_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (wi::video::Video *) carg1;
  arg2 = *(uint32_t *)carg2;
  if (arg1) (arg1)->padded_height = arg2;
}


SWIGEXPORTC SwigObj* wi_video_Video_padded_height_get(SwigObj* carg1) {
  uint32_t cppresult;
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::Video *) carg1;
  cppresult =  ((arg1)->padded_height);
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC void wi_video_Video_width_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (wi::video::Video *) carg1;
  arg2 = *(uint32_t *)carg2;
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORTC SwigObj* wi_video_Video_width_get(SwigObj* carg1) {
  uint32_t cppresult;
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::Video *) carg1;
  cppresult =  ((arg1)->width);
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC void wi_video_Video_height_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (wi::video::Video *) carg1;
  arg2 = *(uint32_t *)carg2;
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORTC SwigObj* wi_video_Video_height_get(SwigObj* carg1) {
  uint32_t cppresult;
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::Video *) carg1;
  cppresult =  ((arg1)->height);
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC void wi_video_Video_bit_rate_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (wi::video::Video *) carg1;
  arg2 = *(uint32_t *)carg2;
  if (arg1) (arg1)->bit_rate = arg2;
}


SWIGEXPORTC SwigObj* wi_video_Video_bit_rate_get(SwigObj* carg1) {
  uint32_t cppresult;
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::Video *) carg1;
  cppresult =  ((arg1)->bit_rate);
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC void wi_video_Video_profile_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  wi::graphics::VideoProfile arg2 ;
  
  arg1 = (wi::video::Video *) carg1;
  arg2 = *(wi::graphics::VideoProfile *)carg2;
  if (arg1) (arg1)->profile = arg2;
}


SWIGEXPORTC SwigObj* wi_video_Video_profile_get(SwigObj* carg1) {
  wi::graphics::VideoProfile cppresult;
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::Video *) carg1;
  cppresult =  ((arg1)->profile);
  result = (SwigObj*)new wi::graphics::VideoProfile(cppresult);
  return result;
}


SWIGEXPORTC void wi_video_Video_sps_datas_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  wi::vector< uint8_t,std::allocator< uint8_t > > *arg2 = (wi::vector< uint8_t,std::allocator< uint8_t > > *) 0 ;
  
  arg1 = (wi::video::Video *) carg1;
  arg2 = (wi::vector< uint8_t,std::allocator< uint8_t > > *) carg2;
  if (arg1) (arg1)->sps_datas = *arg2;
}


SWIGEXPORTC SwigObj* wi_video_Video_sps_datas_get(SwigObj* carg1) {
  wi::vector< uint8_t,std::allocator< uint8_t > > *cppresult;
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::Video *) carg1;
  cppresult = (wi::vector< uint8_t,std::allocator< uint8_t > > *)& ((arg1)->sps_datas);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_video_Video_pps_datas_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  wi::vector< uint8_t,std::allocator< uint8_t > > *arg2 = (wi::vector< uint8_t,std::allocator< uint8_t > > *) 0 ;
  
  arg1 = (wi::video::Video *) carg1;
  arg2 = (wi::vector< uint8_t,std::allocator< uint8_t > > *) carg2;
  if (arg1) (arg1)->pps_datas = *arg2;
}


SWIGEXPORTC SwigObj* wi_video_Video_pps_datas_get(SwigObj* carg1) {
  wi::vector< uint8_t,std::allocator< uint8_t > > *cppresult;
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::Video *) carg1;
  cppresult = (wi::vector< uint8_t,std::allocator< uint8_t > > *)& ((arg1)->pps_datas);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_video_Video_slice_header_datas_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  wi::vector< uint8_t,std::allocator< uint8_t > > *arg2 = (wi::vector< uint8_t,std::allocator< uint8_t > > *) 0 ;
  
  arg1 = (wi::video::Video *) carg1;
  arg2 = (wi::vector< uint8_t,std::allocator< uint8_t > > *) carg2;
  if (arg1) (arg1)->slice_header_datas = *arg2;
}


SWIGEXPORTC SwigObj* wi_video_Video_slice_header_datas_get(SwigObj* carg1) {
  wi::vector< uint8_t,std::allocator< uint8_t > > *cppresult;
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::Video *) carg1;
  cppresult = (wi::vector< uint8_t,std::allocator< uint8_t > > *)& ((arg1)->slice_header_datas);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_video_Video_sps_count_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (wi::video::Video *) carg1;
  arg2 = *(uint32_t *)carg2;
  if (arg1) (arg1)->sps_count = arg2;
}


SWIGEXPORTC SwigObj* wi_video_Video_sps_count_get(SwigObj* carg1) {
  uint32_t cppresult;
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::Video *) carg1;
  cppresult =  ((arg1)->sps_count);
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC void wi_video_Video_pps_count_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (wi::video::Video *) carg1;
  arg2 = *(uint32_t *)carg2;
  if (arg1) (arg1)->pps_count = arg2;
}


SWIGEXPORTC SwigObj* wi_video_Video_pps_count_get(SwigObj* carg1) {
  uint32_t cppresult;
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::Video *) carg1;
  cppresult =  ((arg1)->pps_count);
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC void wi_video_Video_slice_header_count_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (wi::video::Video *) carg1;
  arg2 = *(uint32_t *)carg2;
  if (arg1) (arg1)->slice_header_count = arg2;
}


SWIGEXPORTC SwigObj* wi_video_Video_slice_header_count_get(SwigObj* carg1) {
  uint32_t cppresult;
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::Video *) carg1;
  cppresult =  ((arg1)->slice_header_count);
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC void wi_video_Video_data_stream_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  wi::graphics::GPUBuffer arg2 ;
  
  arg1 = (wi::video::Video *) carg1;
  arg2 = *(wi::graphics::GPUBuffer *)carg2;
  if (arg1) (arg1)->data_stream = arg2;
}


SWIGEXPORTC SwigObj* wi_video_Video_data_stream_get(SwigObj* carg1) {
  wi::graphics::GPUBuffer cppresult;
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::Video *) carg1;
  cppresult =  ((arg1)->data_stream);
  result = (SwigObj*)new wi::graphics::GPUBuffer(cppresult);
  return result;
}


SWIGEXPORTC void wi_video_Video_average_frames_per_second_set(SwigObj* carg1, float carg2) {
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  float arg2 ;
  
  arg1 = (wi::video::Video *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->average_frames_per_second = arg2;
}


SWIGEXPORTC float wi_video_Video_average_frames_per_second_get(SwigObj* carg1) {
  float cppresult;
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  float result;
  
  arg1 = (wi::video::Video *) carg1;
  cppresult = (float) ((arg1)->average_frames_per_second);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void wi_video_Video_duration_seconds_set(SwigObj* carg1, float carg2) {
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  float arg2 ;
  
  arg1 = (wi::video::Video *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->duration_seconds = arg2;
}


SWIGEXPORTC float wi_video_Video_duration_seconds_get(SwigObj* carg1) {
  float cppresult;
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  float result;
  
  arg1 = (wi::video::Video *) carg1;
  cppresult = (float) ((arg1)->duration_seconds);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void wi_video_Video_frames_infos_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  wi::vector< wi::video::Video::FrameInfo,std::allocator< wi::video::Video::FrameInfo > > *arg2 = (wi::vector< wi::video::Video::FrameInfo,std::allocator< wi::video::Video::FrameInfo > > *) 0 ;
  
  arg1 = (wi::video::Video *) carg1;
  arg2 = (wi::vector< wi::video::Video::FrameInfo,std::allocator< wi::video::Video::FrameInfo > > *) carg2;
  if (arg1) (arg1)->frames_infos = *arg2;
}


SWIGEXPORTC SwigObj* wi_video_Video_frames_infos_get(SwigObj* carg1) {
  wi::vector< wi::video::Video::FrameInfo,std::allocator< wi::video::Video::FrameInfo > > *cppresult;
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::Video *) carg1;
  cppresult = (wi::vector< wi::video::Video::FrameInfo,std::allocator< wi::video::Video::FrameInfo > > *)& ((arg1)->frames_infos);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_video_Video_frame_display_order_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  wi::vector< size_t,std::allocator< size_t > > *arg2 = (wi::vector< size_t,std::allocator< size_t > > *) 0 ;
  
  arg1 = (wi::video::Video *) carg1;
  arg2 = (wi::vector< size_t,std::allocator< size_t > > *) carg2;
  if (arg1) (arg1)->frame_display_order = *arg2;
}


SWIGEXPORTC SwigObj* wi_video_Video_frame_display_order_get(SwigObj* carg1) {
  wi::vector< size_t,std::allocator< size_t > > *cppresult;
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::Video *) carg1;
  cppresult = (wi::vector< size_t,std::allocator< size_t > > *)& ((arg1)->frame_display_order);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_video_Video_num_dpb_slots_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (wi::video::Video *) carg1;
  arg2 = *(uint32_t *)carg2;
  if (arg1) (arg1)->num_dpb_slots = arg2;
}


SWIGEXPORTC SwigObj* wi_video_Video_num_dpb_slots_get(SwigObj* carg1) {
  uint32_t cppresult;
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::Video *) carg1;
  cppresult =  ((arg1)->num_dpb_slots);
  result = (SwigObj*)new uint32_t(cppresult);
  return result;
}


SWIGEXPORTC bool wi_video_Video_IsValid(SwigObj* carg1) {
  bool cppresult;
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  bool result;
  
  arg1 = (wi::video::Video *) carg1;
  cppresult = (bool)((wi::video::Video const *)arg1)->IsValid();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_video_Video_new() {
  wi::video::Video *cppresult;
  SwigObj* result;
  
  cppresult = (wi::video::Video *)new wi::video::Video();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_video_Video_delete(SwigObj* carg1) {
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  
  arg1 = (wi::video::Video *) carg1;
  delete arg1;
}


SWIGEXPORTC void wi_video_VideoInstance_video_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::VideoInstance *arg1 = (wi::video::VideoInstance *) 0 ;
  wi::video::Video *arg2 = (wi::video::Video *) 0 ;
  
  arg1 = (wi::video::VideoInstance *) carg1;
  arg2 = (wi::video::Video *) carg2;
  if (arg1) (arg1)->video = (wi::video::Video const *)arg2;
}


SWIGEXPORTC SwigObj* wi_video_VideoInstance_video_get(SwigObj* carg1) {
  wi::video::Video *cppresult;
  wi::video::VideoInstance *arg1 = (wi::video::VideoInstance *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::VideoInstance *) carg1;
  cppresult = (wi::video::Video *) ((arg1)->video);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_video_VideoInstance_decoder_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::VideoInstance *arg1 = (wi::video::VideoInstance *) 0 ;
  wi::graphics::VideoDecoder arg2 ;
  
  arg1 = (wi::video::VideoInstance *) carg1;
  arg2 = *(wi::graphics::VideoDecoder *)carg2;
  if (arg1) (arg1)->decoder = arg2;
}


SWIGEXPORTC SwigObj* wi_video_VideoInstance_decoder_get(SwigObj* carg1) {
  wi::graphics::VideoDecoder cppresult;
  wi::video::VideoInstance *arg1 = (wi::video::VideoInstance *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::VideoInstance *) carg1;
  cppresult =  ((arg1)->decoder);
  result = (SwigObj*)new wi::graphics::VideoDecoder(cppresult);
  return result;
}


SWIGEXPORTC void wi_video_VideoInstance_dpb_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::VideoInstance *arg1 = (wi::video::VideoInstance *) 0 ;
  wi::video::VideoInstance::DPB *arg2 = (wi::video::VideoInstance::DPB *) 0 ;
  
  arg1 = (wi::video::VideoInstance *) carg1;
  arg2 = (wi::video::VideoInstance::DPB *) carg2;
  if (arg1) (arg1)->dpb = *arg2;
}


SWIGEXPORTC SwigObj* wi_video_VideoInstance_dpb_get(SwigObj* carg1) {
  wi::video::VideoInstance::DPB *cppresult;
  wi::video::VideoInstance *arg1 = (wi::video::VideoInstance *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::VideoInstance *) carg1;
  cppresult = (wi::video::VideoInstance::DPB *)& ((arg1)->dpb);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_video_VideoInstance_output_textures_free_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::VideoInstance *arg1 = (wi::video::VideoInstance *) 0 ;
  wi::vector< wi::video::VideoInstance::OutputTexture,std::allocator< wi::video::VideoInstance::OutputTexture > > *arg2 = (wi::vector< wi::video::VideoInstance::OutputTexture,std::allocator< wi::video::VideoInstance::OutputTexture > > *) 0 ;
  
  arg1 = (wi::video::VideoInstance *) carg1;
  arg2 = (wi::vector< wi::video::VideoInstance::OutputTexture,std::allocator< wi::video::VideoInstance::OutputTexture > > *) carg2;
  if (arg1) (arg1)->output_textures_free = *arg2;
}


SWIGEXPORTC SwigObj* wi_video_VideoInstance_output_textures_free_get(SwigObj* carg1) {
  wi::vector< wi::video::VideoInstance::OutputTexture,std::allocator< wi::video::VideoInstance::OutputTexture > > *cppresult;
  wi::video::VideoInstance *arg1 = (wi::video::VideoInstance *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::VideoInstance *) carg1;
  cppresult = (wi::vector< wi::video::VideoInstance::OutputTexture,std::allocator< wi::video::VideoInstance::OutputTexture > > *)& ((arg1)->output_textures_free);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_video_VideoInstance_output_textures_used_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::VideoInstance *arg1 = (wi::video::VideoInstance *) 0 ;
  wi::vector< wi::video::VideoInstance::OutputTexture,std::allocator< wi::video::VideoInstance::OutputTexture > > *arg2 = (wi::vector< wi::video::VideoInstance::OutputTexture,std::allocator< wi::video::VideoInstance::OutputTexture > > *) 0 ;
  
  arg1 = (wi::video::VideoInstance *) carg1;
  arg2 = (wi::vector< wi::video::VideoInstance::OutputTexture,std::allocator< wi::video::VideoInstance::OutputTexture > > *) carg2;
  if (arg1) (arg1)->output_textures_used = *arg2;
}


SWIGEXPORTC SwigObj* wi_video_VideoInstance_output_textures_used_get(SwigObj* carg1) {
  wi::vector< wi::video::VideoInstance::OutputTexture,std::allocator< wi::video::VideoInstance::OutputTexture > > *cppresult;
  wi::video::VideoInstance *arg1 = (wi::video::VideoInstance *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::VideoInstance *) carg1;
  cppresult = (wi::vector< wi::video::VideoInstance::OutputTexture,std::allocator< wi::video::VideoInstance::OutputTexture > > *)& ((arg1)->output_textures_used);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_video_VideoInstance_output_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::VideoInstance *arg1 = (wi::video::VideoInstance *) 0 ;
  wi::video::VideoInstance::OutputTexture *arg2 = (wi::video::VideoInstance::OutputTexture *) 0 ;
  
  arg1 = (wi::video::VideoInstance *) carg1;
  arg2 = (wi::video::VideoInstance::OutputTexture *) carg2;
  if (arg1) (arg1)->output = *arg2;
}


SWIGEXPORTC SwigObj* wi_video_VideoInstance_output_get(SwigObj* carg1) {
  wi::video::VideoInstance::OutputTexture *cppresult;
  wi::video::VideoInstance *arg1 = (wi::video::VideoInstance *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::VideoInstance *) carg1;
  cppresult = (wi::video::VideoInstance::OutputTexture *)& ((arg1)->output);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_video_VideoInstance_target_display_order_set(SwigObj* carg1, int carg2) {
  wi::video::VideoInstance *arg1 = (wi::video::VideoInstance *) 0 ;
  int arg2 ;
  
  arg1 = (wi::video::VideoInstance *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->target_display_order = arg2;
}


SWIGEXPORTC int wi_video_VideoInstance_target_display_order_get(SwigObj* carg1) {
  int cppresult;
  wi::video::VideoInstance *arg1 = (wi::video::VideoInstance *) 0 ;
  int result;
  
  arg1 = (wi::video::VideoInstance *) carg1;
  cppresult = (int) ((arg1)->target_display_order);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void wi_video_VideoInstance_current_frame_set(SwigObj* carg1, int carg2) {
  wi::video::VideoInstance *arg1 = (wi::video::VideoInstance *) 0 ;
  int arg2 ;
  
  arg1 = (wi::video::VideoInstance *) carg1;
  arg2 = (int) carg2;
  if (arg1) (arg1)->current_frame = arg2;
}


SWIGEXPORTC int wi_video_VideoInstance_current_frame_get(SwigObj* carg1) {
  int cppresult;
  wi::video::VideoInstance *arg1 = (wi::video::VideoInstance *) 0 ;
  int result;
  
  arg1 = (wi::video::VideoInstance *) carg1;
  cppresult = (int) ((arg1)->current_frame);
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC void wi_video_VideoInstance_time_until_next_frame_set(SwigObj* carg1, float carg2) {
  wi::video::VideoInstance *arg1 = (wi::video::VideoInstance *) 0 ;
  float arg2 ;
  
  arg1 = (wi::video::VideoInstance *) carg1;
  arg2 = (float) carg2;
  if (arg1) (arg1)->time_until_next_frame = arg2;
}


SWIGEXPORTC float wi_video_VideoInstance_time_until_next_frame_get(SwigObj* carg1) {
  float cppresult;
  wi::video::VideoInstance *arg1 = (wi::video::VideoInstance *) 0 ;
  float result;
  
  arg1 = (wi::video::VideoInstance *) carg1;
  cppresult = (float) ((arg1)->time_until_next_frame);
  result = (float)cppresult;
  return result;
}


SWIGEXPORTC void wi_video_VideoInstance_barriers_set(SwigObj* carg1, SwigObj* carg2) {
  wi::video::VideoInstance *arg1 = (wi::video::VideoInstance *) 0 ;
  wi::vector< wi::graphics::GPUBarrier,std::allocator< wi::graphics::GPUBarrier > > *arg2 = (wi::vector< wi::graphics::GPUBarrier,std::allocator< wi::graphics::GPUBarrier > > *) 0 ;
  
  arg1 = (wi::video::VideoInstance *) carg1;
  arg2 = (wi::vector< wi::graphics::GPUBarrier,std::allocator< wi::graphics::GPUBarrier > > *) carg2;
  if (arg1) (arg1)->barriers = *arg2;
}


SWIGEXPORTC SwigObj* wi_video_VideoInstance_barriers_get(SwigObj* carg1) {
  wi::vector< wi::graphics::GPUBarrier,std::allocator< wi::graphics::GPUBarrier > > *cppresult;
  wi::video::VideoInstance *arg1 = (wi::video::VideoInstance *) 0 ;
  SwigObj* result;
  
  arg1 = (wi::video::VideoInstance *) carg1;
  cppresult = (wi::vector< wi::graphics::GPUBarrier,std::allocator< wi::graphics::GPUBarrier > > *)& ((arg1)->barriers);
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_video_VideoInstance_flags_set(SwigObj* carg1, int carg2) {
  wi::video::VideoInstance *arg1 = (wi::video::VideoInstance *) 0 ;
  enum wi::video::VideoInstance::Flags arg2 ;
  
  arg1 = (wi::video::VideoInstance *) carg1;
  arg2 = (enum wi::video::VideoInstance::Flags) carg2;
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORTC int wi_video_VideoInstance_flags_get(SwigObj* carg1) {
  enum wi::video::VideoInstance::Flags cppresult;
  wi::video::VideoInstance *arg1 = (wi::video::VideoInstance *) 0 ;
  int result;
  
  arg1 = (wi::video::VideoInstance *) carg1;
  cppresult = (enum wi::video::VideoInstance::Flags) ((arg1)->flags);
  result = (int) cppresult;
  return result;
}


SWIGEXPORTC bool wi_video_VideoInstance_IsValid(SwigObj* carg1) {
  bool cppresult;
  wi::video::VideoInstance *arg1 = (wi::video::VideoInstance *) 0 ;
  bool result;
  
  arg1 = (wi::video::VideoInstance *) carg1;
  cppresult = (bool)((wi::video::VideoInstance const *)arg1)->IsValid();
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC SwigObj* wi_video_VideoInstance_new() {
  wi::video::VideoInstance *cppresult;
  SwigObj* result;
  
  cppresult = (wi::video::VideoInstance *)new wi::video::VideoInstance();
  result = (SwigObj*) cppresult;
  return result;
}


SWIGEXPORTC void wi_video_VideoInstance_delete(SwigObj* carg1) {
  wi::video::VideoInstance *arg1 = (wi::video::VideoInstance *) 0 ;
  
  arg1 = (wi::video::VideoInstance *) carg1;
  delete arg1;
}


SWIGEXPORTC bool wi_video_CreateVideo_rcstd_string_pwi_video_Video(SwigObj* carg1, SwigObj* carg2) {
  bool cppresult;
  std::string *arg1 = 0 ;
  wi::video::Video *arg2 = (wi::video::Video *) 0 ;
  bool result;
  
  
  arg1 = (std::string *) carg1;
  
  arg2 = (wi::video::Video *) carg2;
  cppresult = (bool)wi::video::CreateVideo((std::string const &)*arg1,arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_video_CreateVideo_pcuint8_t_size_t_pwi_video_Video(SwigObj* carg1, size_t carg2, SwigObj* carg3) {
  bool cppresult;
  uint8_t *arg1 = (uint8_t *) 0 ;
  size_t arg2 ;
  wi::video::Video *arg3 = (wi::video::Video *) 0 ;
  bool result;
  
  arg1 = (uint8_t *) carg1;
  arg2 = (size_t) carg2;
  arg3 = (wi::video::Video *) carg3;
  cppresult = (bool)wi::video::CreateVideo((uint8_t const *)arg1,SWIG_STD_MOVE(arg2),arg3);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_video_CreateVideoInstance(SwigObj* carg1, SwigObj* carg2) {
  bool cppresult;
  wi::video::Video *arg1 = (wi::video::Video *) 0 ;
  wi::video::VideoInstance *arg2 = (wi::video::VideoInstance *) 0 ;
  bool result;
  
  arg1 = (wi::video::Video *) carg1;
  arg2 = (wi::video::VideoInstance *) carg2;
  cppresult = (bool)wi::video::CreateVideoInstance((wi::video::Video const *)arg1,arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC bool wi_video_IsDecodingRequired(SwigObj* carg1, float carg2) {
  bool cppresult;
  wi::video::VideoInstance *arg1 = (wi::video::VideoInstance *) 0 ;
  float arg2 ;
  bool result;
  
  arg1 = (wi::video::VideoInstance *) carg1;
  arg2 = (float) carg2;
  cppresult = (bool)wi::video::IsDecodingRequired((wi::video::VideoInstance const *)arg1,arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_video_UpdateVideo(SwigObj* carg1, float carg2, SwigObj* carg3) {
  wi::video::VideoInstance *arg1 = (wi::video::VideoInstance *) 0 ;
  float arg2 ;
  wi::graphics::CommandList arg3 ;
  
  arg1 = (wi::video::VideoInstance *) carg1;
  arg2 = (float) carg2;
  arg3 = *(wi::graphics::CommandList *)carg3;
  wi::video::UpdateVideo(arg1,arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORTC void wi_video_ResolveVideoToRGB(SwigObj* carg1, SwigObj* carg2) {
  wi::video::VideoInstance *arg1 = (wi::video::VideoInstance *) 0 ;
  wi::graphics::CommandList arg2 ;
  
  arg1 = (wi::video::VideoInstance *) carg1;
  arg2 = *(wi::graphics::CommandList *)carg2;
  wi::video::ResolveVideoToRGB(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORTC void wi_input_xinput_Update() {
  wi::input::xinput::Update();
}


SWIGEXPORTC int wi_input_xinput_GetMaxControllerCount() {
  int cppresult;
  int result;
  
  cppresult = (int)wi::input::xinput::GetMaxControllerCount();
  result = (int)cppresult;
  return result;
}


SWIGEXPORTC bool wi_input_xinput_GetControllerState(SwigObj* carg1, int carg2) {
  bool cppresult;
  wi::input::ControllerState *arg1 = (wi::input::ControllerState *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (wi::input::ControllerState *) carg1;
  arg2 = (int) carg2;
  cppresult = (bool)wi::input::xinput::GetControllerState(arg1,arg2);
  result = (bool) cppresult;
  return result;
}


SWIGEXPORTC void wi_input_xinput_SetControllerFeedback(SwigObj* carg1, int carg2) {
  wi::input::ControllerFeedback *arg1 = 0 ;
  int arg2 ;
  
  
  arg1 = (wi::input::ControllerFeedback *) carg1;
  
  arg2 = (int) carg2;
  wi::input::xinput::SetControllerFeedback((wi::input::ControllerFeedback const &)*arg1,arg2);
}


SWIGEXPORTC void wi_renderer_SetShaderSourcePath(char * carg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *) carg1;
  wi::renderer::SetShaderSourcePath(arg1);
}


SWIGEXPORTC void wi_renderer_SetShaderPath(char * carg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *) carg1;
  wi::renderer::SetShaderPath(arg1);
}


SWIGEXPORTC void wi_arguments_Parse(int carg1, char ** carg2) {
  int arg1 ;
  char **arg2 = (char **) (char **)0 ;
  
  arg1 = (int) carg1;
  arg2 = (char * *) carg2;
  wi::arguments::Parse(arg1,arg2);
}


#ifdef __cplusplus
}
#endif

